<?xml version="1.0" encoding="UTF-8"?>
<robot rpa="false" generated="20210224 15:54:24.189" generator="Robot 3.1.2 (Python 2.7.17 on win32)">
<suite source="C:\Users\vinicius.trindade\Desktop\Banking_Robot\tests\accreditation" id="s1" name="Accreditation">
<suite source="C:\Users\vinicius.trindade\Desktop\Banking_Robot\tests\accreditation\holders" id="s1-s1" name="Holders">
<suite source="C:\Users\vinicius.trindade\Desktop\Banking_Robot\tests\accreditation\holders\Fluxo Básico" id="s1-s1-s1" name="Fluxo Básico">
<suite source="C:\Users\vinicius.trindade\Desktop\Banking_Robot\tests\accreditation\holders\Fluxo Básico\Criar Holder Business.robot" id="s1-s1-s1-s1" name="Criar Holder Business">
<test id="s1-s1-s1-s1-t1" name="Cenário: Criar Holder Business MEI">
<kw name="Dado que eu deseje me cadastrar como holder em Banking" library="steps">
<kw name="conectar accreditation" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accreditation</arg>
<arg>url=${accreditation_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210224 15:54:25.060" level="INFO">Creating Session using : alias=accreditation, url=https://banking-accreditation-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20210224 15:54:25.061" starttime="20210224 15:54:25.059"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:25.061" starttime="20210224 15:54:25.059"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:25.062" starttime="20210224 15:54:25.057"></status>
</kw>
<kw name="Quando eu preencher todos os dados necessários para o cadastro do holder business" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>mei</arg>
</arguments>
<kw name="Cnpj" library="FakerLibrary">
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:25.063" level="INFO">${national_registration} = 46.831.205/0001-10</msg>
<status status="PASS" endtime="20210224 15:54:25.063" starttime="20210224 15:54:25.063"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:25.064" level="INFO">${national_registration} = 46831205/0001-10</msg>
<status status="PASS" endtime="20210224 15:54:25.064" starttime="20210224 15:54:25.063"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:25.065" level="INFO">${national_registration} = 46831205/000110</msg>
<status status="PASS" endtime="20210224 15:54:25.065" starttime="20210224 15:54:25.064"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>/</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:25.066" level="INFO">${national_registration} = 46831205000110</msg>
<status status="PASS" endtime="20210224 15:54:25.066" starttime="20210224 15:54:25.065"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${national_registration}</arg>
</arguments>
<msg timestamp="20210224 15:54:25.067" level="INFO">${national_registration} = 46831205000110</msg>
<status status="PASS" endtime="20210224 15:54:25.067" starttime="20210224 15:54:25.066"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${establishment_format}</arg>
</arguments>
<msg timestamp="20210224 15:54:25.068" level="INFO">${establishment_format} = mei</msg>
<status status="PASS" endtime="20210224 15:54:25.068" starttime="20210224 15:54:25.067"></status>
</kw>
<kw name="criar holder business" library="accreditation_post_holder_business">
<arguments>
<arg>holder_type=business</arg>
<arg>holder_name=${holder_name}</arg>
<arg>email_business=${email_business}</arg>
<arg>national_registration=${national_registration}</arg>
<arg>revenue_business=${revenue_business}</arg>
<arg>cnae=${cnae}</arg>
<arg>legal_name=${legal_name}</arg>
<arg>establishment_format=${establishment_format}</arg>
<arg>establishment_date=${establishment_date}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:25.070" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:25.070" starttime="20210224 15:54:25.069"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${holder_type}",</arg>
<arg>"name": "${holder_name}",</arg>
<arg>"email": "${email_business}",</arg>
<arg>"national_registration": "${national_registration}",</arg>
<arg>"revenue": ${revenue_business},</arg>
<arg>"cnae": "${cnae}",</arg>
<arg>"legal_name": "${legal_name}",</arg>
<arg>"establishment": {</arg>
<arg>"format":"${establishment_format}",</arg>
<arg>"date":"${establishment_date}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:25.072" level="INFO">${body} = { "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "46831205000110", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Emp...</msg>
<status status="PASS" endtime="20210224 15:54:25.072" starttime="20210224 15:54:25.070"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:25.073" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "46831205000110", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Empresa", "establishment": { "format":"mei", "date":"2012-04-25" } } 
json=None</msg>
<msg timestamp="20210224 15:54:26.451" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:26.451" starttime="20210224 15:54:25.072"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:26.452" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:27.410342', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:26.452" starttime="20210224 15:54:26.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210224 15:54:26.453" level="INFO">{ "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "46831205000110", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Empresa", "establishment": { "format":"mei", "date":"2012-04-25" } }</msg>
<status status="PASS" endtime="20210224 15:54:26.453" starttime="20210224 15:54:26.453"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:26.453" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:26.454" starttime="20210224 15:54:26.453"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:26.454" level="INFO">${holder_external_key} = ed913c3c4ab34b3a9818eb9f385011b1</msg>
<status status="PASS" endtime="20210224 15:54:26.454" starttime="20210224 15:54:26.454"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:26.455" level="INFO">${holder_external_key} = ed913c3c4ab34b3a9818eb9f385011b1</msg>
<status status="PASS" endtime="20210224 15:54:26.455" starttime="20210224 15:54:26.454"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:26.455" starttime="20210224 15:54:25.068"></status>
</kw>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.456" starttime="20210224 15:54:26.455"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.457" starttime="20210224 15:54:26.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.458" starttime="20210224 15:54:26.457"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.458" starttime="20210224 15:54:26.458"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.459" starttime="20210224 15:54:26.459"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:26.460" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:26.460" starttime="20210224 15:54:26.459"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.460" starttime="20210224 15:54:26.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.461" starttime="20210224 15:54:26.460"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.462" starttime="20210224 15:54:26.461"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.462" starttime="20210224 15:54:26.462"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:26.462" starttime="20210224 15:54:26.455"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:26.462" starttime="20210224 15:54:25.062"></status>
</kw>
<kw name="E realizar o cadastro do meu telefone" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar holder phone" library="accreditation_post_holder_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996221236</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:26.463" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:26.464" starttime="20210224 15:54:26.463"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:26.464" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996221236" }</msg>
<status status="PASS" endtime="20210224 15:54:26.464" starttime="20210224 15:54:26.464"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/phones</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:26.465" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996221236" } 
json=None</msg>
<msg timestamp="20210224 15:54:26.691" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:26.691" starttime="20210224 15:54:26.464"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:26.692" level="INFO">{u'area_code': u'21', u'number': u'996221236', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones/bb1b1ec775e345aca7eb2625f013d446', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'bb1b1ec775e345aca7eb2625f013d446'}</msg>
<status status="PASS" endtime="20210224 15:54:26.692" starttime="20210224 15:54:26.692"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:26.693" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:26.693" starttime="20210224 15:54:26.693"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${phone_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:26.694" level="INFO">${phone_external_key} = bb1b1ec775e345aca7eb2625f013d446</msg>
<status status="PASS" endtime="20210224 15:54:26.694" starttime="20210224 15:54:26.693"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:26.695" level="INFO">${phone_external_key} = bb1b1ec775e345aca7eb2625f013d446</msg>
<status status="PASS" endtime="20210224 15:54:26.695" starttime="20210224 15:54:26.694"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:26.695" starttime="20210224 15:54:26.463"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:26.696" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:26.846" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:26.846" starttime="20210224 15:54:26.696"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:26.847" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:27.410342', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:26.847" starttime="20210224 15:54:26.846"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:26.847" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:26.847" starttime="20210224 15:54:26.847"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:26.848" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:26.848" starttime="20210224 15:54:26.847"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:26.848" starttime="20210224 15:54:26.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.849" starttime="20210224 15:54:26.849"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.850" starttime="20210224 15:54:26.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.851" starttime="20210224 15:54:26.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.851" starttime="20210224 15:54:26.851"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.852" starttime="20210224 15:54:26.851"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:26.852" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:26.852" starttime="20210224 15:54:26.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.854" starttime="20210224 15:54:26.853"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.854" starttime="20210224 15:54:26.854"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.854" starttime="20210224 15:54:26.854"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:26.855" starttime="20210224 15:54:26.854"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:26.855" starttime="20210224 15:54:26.849"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:26.855" starttime="20210224 15:54:26.848"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:26.855" starttime="20210224 15:54:26.462"></status>
</kw>
<kw name="E realizar o cadastro do meu endereço" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar holder address" library="accreditation_post_holder_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>90</arg>
<arg>apto 200</arg>
<arg>21550987</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:26.858" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:26.858" starttime="20210224 15:54:26.857"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:26.859" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:26.859" starttime="20210224 15:54:26.858"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:26.862" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "21550987" } 
json=None</msg>
<msg timestamp="20210224 15:54:27.050" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.050" starttime="20210224 15:54:26.860"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.050" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 200', u'number': u'90', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550987', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses/404d0e0c35de47b283826edd412c8df0', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}}, u'main': True, u'id': u'404d0e0c35de47b283826edd412c8df0'}</msg>
<status status="PASS" endtime="20210224 15:54:27.050" starttime="20210224 15:54:27.050"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.051" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.051" starttime="20210224 15:54:27.050"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:27.052" level="INFO">${address_external_key} = 404d0e0c35de47b283826edd412c8df0</msg>
<status status="PASS" endtime="20210224 15:54:27.052" starttime="20210224 15:54:27.051"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.053" level="INFO">${address_external_key} = 404d0e0c35de47b283826edd412c8df0</msg>
<status status="PASS" endtime="20210224 15:54:27.053" starttime="20210224 15:54:27.053"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:27.053" starttime="20210224 15:54:26.856"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:27.055" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:27.203" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.203" starttime="20210224 15:54:27.054"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.204" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:27.410342', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:27.204" starttime="20210224 15:54:27.204"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.205" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.205" starttime="20210224 15:54:27.204"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:27.205" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.205" starttime="20210224 15:54:27.205"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:27.205" starttime="20210224 15:54:27.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.208" starttime="20210224 15:54:27.207"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.208" starttime="20210224 15:54:27.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.209" starttime="20210224 15:54:27.208"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.209" starttime="20210224 15:54:27.209"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.210" starttime="20210224 15:54:27.209"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.210" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.210" starttime="20210224 15:54:27.210"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.211" starttime="20210224 15:54:27.211"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.212" starttime="20210224 15:54:27.211"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.212" starttime="20210224 15:54:27.212"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.213" starttime="20210224 15:54:27.212"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:27.213" starttime="20210224 15:54:27.207"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:27.214" starttime="20210224 15:54:27.206"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:27.214" starttime="20210224 15:54:26.855"></status>
</kw>
<kw name="E realizar o cadastro do documento" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>CCMEI</arg>
</arguments>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:27.215" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:27.215" starttime="20210224 15:54:27.214"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:27.215" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:27.217" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:27.217" starttime="20210224 15:54:27.215"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:27.231" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents?type=CCMEI, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:27.495" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.495" starttime="20210224 15:54:27.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.496" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'ccmei', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents/aecb51102b014829a9288e269dc2608e/download', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents/aecb51102b014829a9288e269dc2608e', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}}, u'id': u'aecb51102b014829a9288e269dc2608e'}</msg>
<status status="PASS" endtime="20210224 15:54:27.496" starttime="20210224 15:54:27.495"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.497" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.498" starttime="20210224 15:54:27.497"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:27.499" level="INFO">${document_external_key} = aecb51102b014829a9288e269dc2608e</msg>
<status status="PASS" endtime="20210224 15:54:27.499" starttime="20210224 15:54:27.498"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.500" level="INFO">${document_external_key} = aecb51102b014829a9288e269dc2608e</msg>
<status status="PASS" endtime="20210224 15:54:27.501" starttime="20210224 15:54:27.500"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:27.501" starttime="20210224 15:54:27.214"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:27.502" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:27.650" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.650" starttime="20210224 15:54:27.502"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.651" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:27.410342', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:27.651" starttime="20210224 15:54:27.651"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.653" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.653" starttime="20210224 15:54:27.653"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:27.653" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.654" starttime="20210224 15:54:27.653"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:27.654" starttime="20210224 15:54:27.501"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.660" starttime="20210224 15:54:27.657"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.660" starttime="20210224 15:54:27.660"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.662" starttime="20210224 15:54:27.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.663" starttime="20210224 15:54:27.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.664" starttime="20210224 15:54:27.663"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.665" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.665" starttime="20210224 15:54:27.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.667" starttime="20210224 15:54:27.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.669" starttime="20210224 15:54:27.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.670" starttime="20210224 15:54:27.669"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:27.671" starttime="20210224 15:54:27.670"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:27.671" starttime="20210224 15:54:27.655"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:27.671" starttime="20210224 15:54:27.654"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:27.671" starttime="20210224 15:54:27.214"></status>
</kw>
<kw name="E realizar o cadastro de um sócio pessoal física" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>50</arg>
<arg>true</arg>
</arguments>
<kw name="Cpf" library="FakerLibrary">
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:27.674" level="INFO">${partner_individual_national_registration} = 405.768.921-49</msg>
<status status="PASS" endtime="20210224 15:54:27.674" starttime="20210224 15:54:27.673"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:27.675" level="INFO">${partner_individual_national_registration} = 405768921-49</msg>
<status status="PASS" endtime="20210224 15:54:27.676" starttime="20210224 15:54:27.674"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:27.677" level="INFO">${partner_individual_national_registration} = 40576892149</msg>
<status status="PASS" endtime="20210224 15:54:27.677" starttime="20210224 15:54:27.676"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.680" level="INFO">${partner_individual_national_registration} = 40576892149</msg>
<status status="PASS" endtime="20210224 15:54:27.680" starttime="20210224 15:54:27.680"></status>
</kw>
<kw name="Rg" library="FakerLibrary">
<doc>Brazilian RG, return plain numbers.
Check:  https://www.ngmatematica.com/2014/02/como-determinar-o-digito-verificador-do.html</doc>
<assign>
<var>${partner_individual_identity_card}</var>
</assign>
<msg timestamp="20210224 15:54:27.681" level="INFO">${partner_individual_identity_card} = 827156042</msg>
<status status="PASS" endtime="20210224 15:54:27.681" starttime="20210224 15:54:27.680"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_individual_identity_card}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.682" level="INFO">${partner_individual_identity_card} = 827156042</msg>
<status status="PASS" endtime="20210224 15:54:27.682" starttime="20210224 15:54:27.681"></status>
</kw>
<kw name="criar partner individual" library="accreditation_post_partner_individual">
<arguments>
<arg>partner_individual_type=individual</arg>
<arg>partner_individual_name=${partner_individual_name}</arg>
<arg>partner_individual_email=${partner_individual_email}</arg>
<arg>partner_individual_national_registration=${partner_individual_national_registration}</arg>
<arg>partner_individual_revenue=${partner_individual_revenue}</arg>
<arg>partner_individual_birthday=${partner_individual_birthday}</arg>
<arg>partner_individual_mothers_name=${partner_individual_mothers_name}</arg>
<arg>partner_individual_identity_card=${partner_individual_identity_card}</arg>
<arg>partner_individual_pep=false</arg>
<arg>partner_individual_percentage=${partner_individual_percentage}</arg>
<arg>partner_individual_adm=${partner_individual_adm}</arg>
<arg>partner_individual_cbo=${partner_individual_cbo}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:27.684" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:27.684" starttime="20210224 15:54:27.684"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${partner_individual_type}",</arg>
<arg>"name": "${partner_individual_name}",</arg>
<arg>"email": "${partner_individual_email}",</arg>
<arg>"national_registration": "${partner_individual_national_registration}",</arg>
<arg>"revenue": ${partner_individual_revenue},</arg>
<arg>"birthday": "${partner_individual_birthday}",</arg>
<arg>"mothers_name": "${partner_individual_mothers_name}",</arg>
<arg>"identity_card": "${partner_individual_identity_card}",</arg>
<arg>"pep": false,</arg>
<arg>"percentage": ${partner_individual_percentage},</arg>
<arg>"adm": ${partner_individual_adm},</arg>
<arg>"cbo": ${partner_individual_cbo}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:27.686" level="INFO">${body} = { "type": "individual", "name": "Individual Partner de teste", "email": "teste@teste.com.br", "national_registration": "40576892149", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe...</msg>
<status status="PASS" endtime="20210224 15:54:27.686" starttime="20210224 15:54:27.685"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:27.687" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "individual", "name": "Individual Partner de teste", "email": "teste@teste.com.br", "national_registration": "40576892149", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Individual Partner", "identity_card": "827156042", "pep": false, "percentage": 50, "adm": true, "cbo": 821450 } 
json=None</msg>
<msg timestamp="20210224 15:54:27.904" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.905" starttime="20210224 15:54:27.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.908" level="INFO">{u'adm': True, u'name': u'Individual Partner de teste', u'mothers_name': u'M\xe3e do Individual Partner', u'revenue': 5500.0, u'cbo': u'821450', u'created_at': u'2021-02-24T15:54:28.858104', u'pep': False, u'updated_at': u'2021-02-24T15:54:28.858106', u'id': u'7f2eedf866274c9dbe1c6137c308eee9', u'identity_card': u'827156042', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/documents', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/addresses', u'type': u'GET'}}, u'national_registration': u'40576892149', u'percentage': 50.0, u'main': True, u'type': u'individual', u'email': u'teste@teste.com.br'}</msg>
<status status="PASS" endtime="20210224 15:54:27.909" starttime="20210224 15:54:27.905"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.911" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:27.911" starttime="20210224 15:54:27.909"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${partner_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:27.913" level="INFO">${partner_external_key} = 7f2eedf866274c9dbe1c6137c308eee9</msg>
<status status="PASS" endtime="20210224 15:54:27.914" starttime="20210224 15:54:27.912"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:27.915" level="INFO">${partner_external_key} = 7f2eedf866274c9dbe1c6137c308eee9</msg>
<status status="PASS" endtime="20210224 15:54:27.915" starttime="20210224 15:54:27.914"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:27.916" starttime="20210224 15:54:27.682"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:27.919" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:28.071" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.071" starttime="20210224 15:54:27.917"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.072" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:27.410342', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:28.073" starttime="20210224 15:54:28.072"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.074" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.074" starttime="20210224 15:54:28.074"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:28.075" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.075" starttime="20210224 15:54:28.075"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.075" starttime="20210224 15:54:27.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.077" starttime="20210224 15:54:28.077"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.078" starttime="20210224 15:54:28.078"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.079" starttime="20210224 15:54:28.078"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.079" starttime="20210224 15:54:28.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.080" starttime="20210224 15:54:28.079"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.080" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.080" starttime="20210224 15:54:28.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.081" starttime="20210224 15:54:28.080"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.081" starttime="20210224 15:54:28.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.082" starttime="20210224 15:54:28.082"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.082" starttime="20210224 15:54:28.082"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.083" starttime="20210224 15:54:28.077"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.083" starttime="20210224 15:54:28.076"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.083" starttime="20210224 15:54:27.672"></status>
</kw>
<kw name="E realizar o cadastro do telefone do sócio" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar partner phone" library="accreditation_post_partner_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996554785</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:28.084" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:28.084" starttime="20210224 15:54:28.083"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:28.084" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996554785" }</msg>
<status status="PASS" endtime="20210224 15:54:28.084" starttime="20210224 15:54:28.084"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/phones/</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:28.085" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/phones/, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996554785" } 
json=None</msg>
<msg timestamp="20210224 15:54:28.277" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.277" starttime="20210224 15:54:28.085"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.277" level="INFO">{u'area_code': u'21', u'number': u'996554785', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/phones/7dc11079f70b47e2b3c968eade85814b', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'7dc11079f70b47e2b3c968eade85814b'}</msg>
<status status="PASS" endtime="20210224 15:54:28.278" starttime="20210224 15:54:28.277"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.278" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.278" starttime="20210224 15:54:28.278"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:28.279" level="INFO">${holder_external_key} = 7dc11079f70b47e2b3c968eade85814b</msg>
<status status="PASS" endtime="20210224 15:54:28.279" starttime="20210224 15:54:28.278"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.279" level="INFO">${phone_external_key} = bb1b1ec775e345aca7eb2625f013d446</msg>
<status status="PASS" endtime="20210224 15:54:28.279" starttime="20210224 15:54:28.279"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.279" starttime="20210224 15:54:28.083"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:28.280" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:28.426" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.426" starttime="20210224 15:54:28.280"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.427" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:27.410342', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:28.430" starttime="20210224 15:54:28.427"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.430" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.430" starttime="20210224 15:54:28.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:28.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.431" starttime="20210224 15:54:28.431"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.431" starttime="20210224 15:54:28.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.433" starttime="20210224 15:54:28.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.433" starttime="20210224 15:54:28.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.434" starttime="20210224 15:54:28.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.435" starttime="20210224 15:54:28.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.435" starttime="20210224 15:54:28.435"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.435" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.435" starttime="20210224 15:54:28.435"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.436" starttime="20210224 15:54:28.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.436" starttime="20210224 15:54:28.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.437" starttime="20210224 15:54:28.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.438" starttime="20210224 15:54:28.437"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.438" starttime="20210224 15:54:28.432"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.438" starttime="20210224 15:54:28.431"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.438" starttime="20210224 15:54:28.083"></status>
</kw>
<kw name="E realizar o cadastro do endereço do sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
</arguments>
<kw name="criar partner address" library="accreditation_post_partner_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>61</arg>
<arg>apto 201</arg>
<arg>21550478</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:28.439" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:28.439" starttime="20210224 15:54:28.439"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:28.440" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:28.440" starttime="20210224 15:54:28.439"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:28.441" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "21550478" } 
json=None</msg>
<msg timestamp="20210224 15:54:28.630" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.630" starttime="20210224 15:54:28.440"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.630" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 201', u'number': u'61', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550478', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/addresses/0c4031d42ddf42e2a4cab3a3b6f7cad1', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}}, u'main': True, u'id': u'0c4031d42ddf42e2a4cab3a3b6f7cad1'}</msg>
<status status="PASS" endtime="20210224 15:54:28.631" starttime="20210224 15:54:28.630"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.631" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.631" starttime="20210224 15:54:28.631"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:28.632" level="INFO">${address_external_key} = 0c4031d42ddf42e2a4cab3a3b6f7cad1</msg>
<status status="PASS" endtime="20210224 15:54:28.632" starttime="20210224 15:54:28.631"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.632" level="INFO">${address_external_key} = 0c4031d42ddf42e2a4cab3a3b6f7cad1</msg>
<status status="PASS" endtime="20210224 15:54:28.632" starttime="20210224 15:54:28.632"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.632" starttime="20210224 15:54:28.438"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:28.633" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:28.783" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.783" starttime="20210224 15:54:28.633"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.783" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:29.644675', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:28.783" starttime="20210224 15:54:28.783"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.784" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.784" starttime="20210224 15:54:28.784"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:28.785" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.785" starttime="20210224 15:54:28.784"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.785" starttime="20210224 15:54:28.632"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.786" starttime="20210224 15:54:28.786"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.787" starttime="20210224 15:54:28.787"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.788" starttime="20210224 15:54:28.787"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.788" starttime="20210224 15:54:28.788"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.790" starttime="20210224 15:54:28.788"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:28.791" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:28.791" starttime="20210224 15:54:28.790"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.791" starttime="20210224 15:54:28.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.793" starttime="20210224 15:54:28.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.793" starttime="20210224 15:54:28.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:28.793" starttime="20210224 15:54:28.793"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.793" starttime="20210224 15:54:28.786"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.793" starttime="20210224 15:54:28.785"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:28.793" starttime="20210224 15:54:28.438"></status>
</kw>
<kw name="E realizar o cadastro da Selfie do Sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>SELFIE</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:28.794" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:28.794" starttime="20210224 15:54:28.794"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:28.795" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:28.796" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:28.796" starttime="20210224 15:54:28.794"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:28.797" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/documents?type=SELFIE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:29.113" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.113" starttime="20210224 15:54:28.796"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.114" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'selfie', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/documents/ecc572374d0f426c8d6f0bd8116dbb64/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/documents/ecc572374d0f426c8d6f0bd8116dbb64', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}}, u'id': u'ecc572374d0f426c8d6f0bd8116dbb64'}</msg>
<status status="PASS" endtime="20210224 15:54:29.114" starttime="20210224 15:54:29.114"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.115" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.115" starttime="20210224 15:54:29.114"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:29.116" level="INFO">${document_external_key} = ecc572374d0f426c8d6f0bd8116dbb64</msg>
<status status="PASS" endtime="20210224 15:54:29.116" starttime="20210224 15:54:29.115"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.116" level="INFO">${document_external_key} = ecc572374d0f426c8d6f0bd8116dbb64</msg>
<status status="PASS" endtime="20210224 15:54:29.116" starttime="20210224 15:54:29.116"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:29.118" starttime="20210224 15:54:28.794"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:29.118" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:29.265" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.266" starttime="20210224 15:54:29.118"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.266" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:29.644675', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:29.267" starttime="20210224 15:54:29.266"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.267" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.267" starttime="20210224 15:54:29.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:29.268" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.268" starttime="20210224 15:54:29.268"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:29.268" starttime="20210224 15:54:29.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.272" starttime="20210224 15:54:29.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.272" starttime="20210224 15:54:29.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.273" starttime="20210224 15:54:29.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.274" starttime="20210224 15:54:29.273"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.275" starttime="20210224 15:54:29.275"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.276" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.276" starttime="20210224 15:54:29.276"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.278" starttime="20210224 15:54:29.276"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.278" starttime="20210224 15:54:29.278"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.278" starttime="20210224 15:54:29.278"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.279" starttime="20210224 15:54:29.279"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:29.280" starttime="20210224 15:54:29.270"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:29.280" starttime="20210224 15:54:29.269"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:29.280" starttime="20210224 15:54:28.793"></status>
</kw>
<kw name="E realizar o cadastro da frente do RG do sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>RG_FRENTE</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:29.281" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:29.281" starttime="20210224 15:54:29.281"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:29.282" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:29.284" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:29.284" starttime="20210224 15:54:29.282"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:29.284" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/documents?type=RG_FRENTE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:29.537" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.537" starttime="20210224 15:54:29.284"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.537" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_frente', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/documents/42746ed2d29246bcb0ca666a62566f74/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/documents/42746ed2d29246bcb0ca666a62566f74', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}}, u'id': u'42746ed2d29246bcb0ca666a62566f74'}</msg>
<status status="PASS" endtime="20210224 15:54:29.537" starttime="20210224 15:54:29.537"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.539" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.539" starttime="20210224 15:54:29.537"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:29.539" level="INFO">${document_external_key} = 42746ed2d29246bcb0ca666a62566f74</msg>
<status status="PASS" endtime="20210224 15:54:29.539" starttime="20210224 15:54:29.539"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.540" level="INFO">${document_external_key} = 42746ed2d29246bcb0ca666a62566f74</msg>
<status status="PASS" endtime="20210224 15:54:29.540" starttime="20210224 15:54:29.540"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:29.540" starttime="20210224 15:54:29.280"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:29.542" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:29.688" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.688" starttime="20210224 15:54:29.542"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.690" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:29.644675', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:29.690" starttime="20210224 15:54:29.688"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.691" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.691" starttime="20210224 15:54:29.691"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:29.692" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.692" starttime="20210224 15:54:29.692"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:29.692" starttime="20210224 15:54:29.540"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.694" starttime="20210224 15:54:29.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.695" starttime="20210224 15:54:29.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.695" starttime="20210224 15:54:29.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.696" starttime="20210224 15:54:29.696"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.697" starttime="20210224 15:54:29.696"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.697" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.697" starttime="20210224 15:54:29.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.698" starttime="20210224 15:54:29.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.699" starttime="20210224 15:54:29.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.699" starttime="20210224 15:54:29.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:29.700" starttime="20210224 15:54:29.699"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:29.700" starttime="20210224 15:54:29.693"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:29.700" starttime="20210224 15:54:29.692"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:29.700" starttime="20210224 15:54:29.280"></status>
</kw>
<kw name="E realizar o cadastro do verso do RG do sócio" library="steps">
<arguments>
<arg>ready_for_analysis</arg>
<arg>RG_VERSO</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:29.701" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:29.701" starttime="20210224 15:54:29.701"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:29.702" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:29.704" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:29.704" starttime="20210224 15:54:29.702"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:29.704" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/documents?type=RG_VERSO, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:29.923" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.923" starttime="20210224 15:54:29.704"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.924" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_verso', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/documents/3219e8371cdd4b69af104b68cab462ec/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/7f2eedf866274c9dbe1c6137c308eee9/documents/3219e8371cdd4b69af104b68cab462ec', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}}, u'id': u'3219e8371cdd4b69af104b68cab462ec'}</msg>
<status status="PASS" endtime="20210224 15:54:29.924" starttime="20210224 15:54:29.923"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.925" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:29.925" starttime="20210224 15:54:29.925"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:29.926" level="INFO">${document_external_key} = 3219e8371cdd4b69af104b68cab462ec</msg>
<status status="PASS" endtime="20210224 15:54:29.926" starttime="20210224 15:54:29.925"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:29.926" level="INFO">${document_external_key} = 3219e8371cdd4b69af104b68cab462ec</msg>
<status status="PASS" endtime="20210224 15:54:29.926" starttime="20210224 15:54:29.926"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:29.926" starttime="20210224 15:54:29.701"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:29.928" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:30.083" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.083" starttime="20210224 15:54:29.928"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.083" level="INFO">{u'status': u'ready_for_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:30.920045', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:30.083" starttime="20210224 15:54:30.083"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.084" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.084" starttime="20210224 15:54:30.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:30.085" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.085" starttime="20210224 15:54:30.084"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.085" starttime="20210224 15:54:29.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.087" starttime="20210224 15:54:30.087"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.089" starttime="20210224 15:54:30.087"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.089" starttime="20210224 15:54:30.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.090" starttime="20210224 15:54:30.089"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.090" starttime="20210224 15:54:30.090"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.092" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.092" starttime="20210224 15:54:30.091"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.092" starttime="20210224 15:54:30.092"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.093" starttime="20210224 15:54:30.092"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.094" starttime="20210224 15:54:30.093"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.094" starttime="20210224 15:54:30.094"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.094" starttime="20210224 15:54:30.086"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.095" starttime="20210224 15:54:30.085"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.095" starttime="20210224 15:54:29.700"></status>
</kw>
<kw name="E realizar o cadastro de um sócio pessoal jurídica" library="steps">
<arguments>
<arg>waiting_info</arg>
<arg>mei</arg>
<arg>50</arg>
<arg>false</arg>
</arguments>
<kw name="Cnpj" library="FakerLibrary">
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:30.096" level="INFO">${partner_business_national_registration} = 80.491.753/0001-86</msg>
<status status="PASS" endtime="20210224 15:54:30.096" starttime="20210224 15:54:30.096"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:30.097" level="INFO">${partner_business_national_registration} = 80491753/0001-86</msg>
<status status="PASS" endtime="20210224 15:54:30.097" starttime="20210224 15:54:30.096"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:30.097" level="INFO">${partner_business_national_registration} = 80491753/000186</msg>
<status status="PASS" endtime="20210224 15:54:30.097" starttime="20210224 15:54:30.097"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>/</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:30.098" level="INFO">${partner_business_national_registration} = 80491753000186</msg>
<status status="PASS" endtime="20210224 15:54:30.098" starttime="20210224 15:54:30.097"></status>
</kw>
<kw name="criar partner business" library="accreditation_post_partner_business">
<arguments>
<arg>partner_business_type=business</arg>
<arg>partner_holder_name=${partner_holder_name}</arg>
<arg>partner_business_email=${partner_business_email}</arg>
<arg>partner_business_national_registration=${partner_business_national_registration}</arg>
<arg>partner_business_revenue=${partner_business_revenue}</arg>
<arg>partner_business_cnae=${partner_business_cnae}</arg>
<arg>partner_business_legal_name=${partner_business_legal_name}</arg>
<arg>partner_business_adm=${partner_business_adm}</arg>
<arg>partner_business_percentage=${partner_business_percentage}</arg>
<arg>partner_business_establishment_format=${partner_business_establishment_format}</arg>
<arg>partner_business_establishment_date=${partner_business_establishment_date}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:30.100" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:30.100" starttime="20210224 15:54:30.100"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${partner_business_type}",</arg>
<arg>"name": "${partner_holder_name}",</arg>
<arg>"email": "${partner_business_email}",</arg>
<arg>"national_registration": "${partner_business_national_registration}",</arg>
<arg>"revenue": ${partner_business_revenue},</arg>
<arg>"cnae": "${partner_business_cnae}",</arg>
<arg>"legal_name": "${partner_business_legal_name}",</arg>
<arg>"adm": ${partner_business_adm},</arg>
<arg>"percentage": ${partner_business_percentage},</arg>
<arg>"establishment": {</arg>
<arg>"format":"${partner_business_establishment_format}",</arg>
<arg>"date":"${partner_business_establishment_date}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:30.101" level="INFO">${body} = { "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "80491753000186", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Part...</msg>
<status status="PASS" endtime="20210224 15:54:30.101" starttime="20210224 15:54:30.100"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:30.102" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "80491753000186", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Partner Legal Name", "adm": false, "percentage": 50, "establishment": { "format":"mei", "date":"1988-04-23" } } 
json=None</msg>
<msg timestamp="20210224 15:54:30.297" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.297" starttime="20210224 15:54:30.102"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.297" level="INFO">{ "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "80491753000186", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Partner Legal Name", "adm": false, "percentage": 50, "establishment": { "format":"mei", "date":"1988-04-23" } }</msg>
<status status="PASS" endtime="20210224 15:54:30.297" starttime="20210224 15:54:30.297"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.297" level="INFO">{u'legal_name': u'Business Partner Legal Name', u'adm': False, u'name': u'Business Partner de teste', u'cnae': u'0111301', u'revenue': 5500.0, u'establishment': {u'date': u'1988-04-23', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:31.272891', u'updated_at': u'2021-02-24T15:54:31.272893', u'id': u'f8fabdc39d514b839c894845c846f46a', u'_links': {u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/f8fabdc39d514b839c894845c846f46a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/f8fabdc39d514b839c894845c846f46a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/f8fabdc39d514b839c894845c846f46a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/f8fabdc39d514b839c894845c846f46a', u'type': u'GET'}, u'adm': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/f8fabdc39d514b839c894845c846f46a/adm', u'type': u'PUT'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}}, u'national_registration': u'80491753000186', u'percentage': 50.0, u'main': True, u'type': u'business', u'email': u'teste@teste.com.br'}</msg>
<status status="PASS" endtime="20210224 15:54:30.297" starttime="20210224 15:54:30.297"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.298" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.298" starttime="20210224 15:54:30.297"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${partner_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:30.298" level="INFO">${partner_external_key} = f8fabdc39d514b839c894845c846f46a</msg>
<status status="PASS" endtime="20210224 15:54:30.298" starttime="20210224 15:54:30.298"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.299" level="INFO">${partner_external_key} = f8fabdc39d514b839c894845c846f46a</msg>
<status status="PASS" endtime="20210224 15:54:30.299" starttime="20210224 15:54:30.299"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.299" starttime="20210224 15:54:30.098"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.299" starttime="20210224 15:54:30.095"></status>
</kw>
<kw name="E realizar o cadastro do telefone do sócio" library="steps">
<arguments>
<arg>waiting_info</arg>
</arguments>
<kw name="criar partner phone" library="accreditation_post_partner_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996554785</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:30.300" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:30.300" starttime="20210224 15:54:30.300"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:30.301" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996554785" }</msg>
<status status="PASS" endtime="20210224 15:54:30.301" starttime="20210224 15:54:30.301"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/phones/</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:30.302" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/f8fabdc39d514b839c894845c846f46a/phones/, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996554785" } 
json=None</msg>
<msg timestamp="20210224 15:54:30.496" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.496" starttime="20210224 15:54:30.301"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.496" level="INFO">{u'area_code': u'21', u'number': u'996554785', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/f8fabdc39d514b839c894845c846f46a', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/f8fabdc39d514b839c894845c846f46a/phones/1483550569794de7b18e682a3dc6e100', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'1483550569794de7b18e682a3dc6e100'}</msg>
<status status="PASS" endtime="20210224 15:54:30.496" starttime="20210224 15:54:30.496"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.497" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.497" starttime="20210224 15:54:30.496"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:30.498" level="INFO">${holder_external_key} = 1483550569794de7b18e682a3dc6e100</msg>
<status status="PASS" endtime="20210224 15:54:30.498" starttime="20210224 15:54:30.497"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.498" level="INFO">${phone_external_key} = bb1b1ec775e345aca7eb2625f013d446</msg>
<status status="PASS" endtime="20210224 15:54:30.498" starttime="20210224 15:54:30.498"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.499" starttime="20210224 15:54:30.300"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:30.500" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:30.652" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.652" starttime="20210224 15:54:30.499"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.654" level="INFO">{u'status': u'waiting_info', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:31.291274', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:30.654" starttime="20210224 15:54:30.652"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.654" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.654" starttime="20210224 15:54:30.654"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:30.655" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.655" starttime="20210224 15:54:30.655"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.655" starttime="20210224 15:54:30.499"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.660" starttime="20210224 15:54:30.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.662" starttime="20210224 15:54:30.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.662" starttime="20210224 15:54:30.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.664" starttime="20210224 15:54:30.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.664" starttime="20210224 15:54:30.664"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.666" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.666" starttime="20210224 15:54:30.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.666" starttime="20210224 15:54:30.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.667" starttime="20210224 15:54:30.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.669" starttime="20210224 15:54:30.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:30.669" starttime="20210224 15:54:30.669"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.669" starttime="20210224 15:54:30.658"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.669" starttime="20210224 15:54:30.657"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.669" starttime="20210224 15:54:30.299"></status>
</kw>
<kw name="E realizar o cadastro do endereço do sócio" library="steps">
<arguments>
<arg>ready_for_analysis</arg>
</arguments>
<kw name="criar partner address" library="accreditation_post_partner_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>61</arg>
<arg>apto 201</arg>
<arg>21550478</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:30.672" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:30.672" starttime="20210224 15:54:30.671"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:30.672" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:30.672" starttime="20210224 15:54:30.672"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:30.674" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/f8fabdc39d514b839c894845c846f46a/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "21550478" } 
json=None</msg>
<msg timestamp="20210224 15:54:30.867" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.867" starttime="20210224 15:54:30.673"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.868" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 201', u'number': u'61', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550478', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/f8fabdc39d514b839c894845c846f46a', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners/f8fabdc39d514b839c894845c846f46a/addresses/4fb0c79a08534cba93397eb29b5e795a', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}}, u'main': True, u'id': u'4fb0c79a08534cba93397eb29b5e795a'}</msg>
<status status="PASS" endtime="20210224 15:54:30.868" starttime="20210224 15:54:30.868"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.869" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:30.869" starttime="20210224 15:54:30.868"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:30.870" level="INFO">${address_external_key} = 4fb0c79a08534cba93397eb29b5e795a</msg>
<status status="PASS" endtime="20210224 15:54:30.870" starttime="20210224 15:54:30.869"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:30.870" level="INFO">${address_external_key} = 4fb0c79a08534cba93397eb29b5e795a</msg>
<status status="PASS" endtime="20210224 15:54:30.870" starttime="20210224 15:54:30.870"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:30.871" starttime="20210224 15:54:30.670"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:30.872" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:31.019" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.019" starttime="20210224 15:54:30.871"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.020" level="INFO">{u'status': u'ready_for_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:31.885549', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:31.020" starttime="20210224 15:54:31.019"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.020" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.021" starttime="20210224 15:54:31.020"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:31.021" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.021" starttime="20210224 15:54:31.021"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.021" starttime="20210224 15:54:30.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.024" starttime="20210224 15:54:31.023"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.025" starttime="20210224 15:54:31.024"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.026" starttime="20210224 15:54:31.025"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.027" starttime="20210224 15:54:31.026"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.027" starttime="20210224 15:54:31.027"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.028" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.028" starttime="20210224 15:54:31.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.029" starttime="20210224 15:54:31.028"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.029" starttime="20210224 15:54:31.029"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.030" starttime="20210224 15:54:31.030"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.031" starttime="20210224 15:54:31.030"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.031" starttime="20210224 15:54:31.023"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.031" starttime="20210224 15:54:31.022"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.031" starttime="20210224 15:54:30.670"></status>
</kw>
<kw name="E realizar a solicitação da aprovação do meu cadastro" library="steps">
<arguments>
<arg>waiting_analysis</arg>
</arguments>
<kw name="solicitar aprovação do holder" library="accreditation_request_approval">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:31.032" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:31.032" starttime="20210224 15:54:31.032"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/approval</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:31.033" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:31.273" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.273" starttime="20210224 15:54:31.033"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.274" level="INFO">{u'message': u'Approval request accepted successfully. Processing analysis'}</msg>
<status status="PASS" endtime="20210224 15:54:31.275" starttime="20210224 15:54:31.274"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.275" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.275" starttime="20210224 15:54:31.275"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.275" starttime="20210224 15:54:31.032"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:31.276" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.276" starttime="20210224 15:54:31.276"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:31.277" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:31.425" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.425" starttime="20210224 15:54:31.277"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.426" level="INFO">{u'status': u'waiting_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:32.213233', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:31.426" starttime="20210224 15:54:31.425"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.426" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.426" starttime="20210224 15:54:31.426"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:31.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.427" starttime="20210224 15:54:31.427"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.427" starttime="20210224 15:54:31.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.429" starttime="20210224 15:54:31.428"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.429" starttime="20210224 15:54:31.429"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.430" starttime="20210224 15:54:31.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.430" starttime="20210224 15:54:31.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.431" starttime="20210224 15:54:31.430"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.431" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.431" starttime="20210224 15:54:31.431"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.432" starttime="20210224 15:54:31.431"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.432" starttime="20210224 15:54:31.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.433" starttime="20210224 15:54:31.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.434" starttime="20210224 15:54:31.433"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.434" starttime="20210224 15:54:31.428"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.434" starttime="20210224 15:54:31.427"></status>
</kw>
<kw name="recebendo notificação de aprovação" library="accreditation_risk_notification">
<kw name="Uuid 4" library="FakerLibrary">
<doc>Generates a random UUID4 string.
:param cast_to: Specify what type the UUID should be cast to. Default is `str`
:type cast_to: callable</doc>
<assign>
<var>${assessment_id}</var>
</assign>
<msg timestamp="20210224 15:54:31.434" level="INFO">${assessment_id} = 1c35c379-3185-4b24-8072-328ef9899cfe</msg>
<status status="PASS" endtime="20210224 15:54:31.435" starttime="20210224 15:54:31.434"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year</arg>
</arguments>
<assign>
<var>${year}</var>
</assign>
<msg timestamp="20210224 15:54:31.436" level="INFO">${year} = 2021</msg>
<status status="PASS" endtime="20210224 15:54:31.436" starttime="20210224 15:54:31.435"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>month</arg>
</arguments>
<assign>
<var>${month}</var>
</assign>
<msg timestamp="20210224 15:54:31.436" level="INFO">${month} = 02</msg>
<status status="PASS" endtime="20210224 15:54:31.437" starttime="20210224 15:54:31.436"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>day</arg>
</arguments>
<assign>
<var>${day}</var>
</assign>
<msg timestamp="20210224 15:54:31.438" level="INFO">${day} = 24</msg>
<status status="PASS" endtime="20210224 15:54:31.438" starttime="20210224 15:54:31.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:31.438" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:31.438" starttime="20210224 15:54:31.438"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "risk.assessment.result",</arg>
<arg>"resource": "business.holder",</arg>
<arg>"created_at": "${year}-${month}-${day} 15:28:56.747Z",</arg>
<arg>"marketplace_id": "${marketplace_external_key}",</arg>
<arg>"object": {</arg>
<arg>"result": "APPROVED",</arg>
<arg>"holder_id": "${holder_external_key}",</arg>
<arg>"applicant_id": "${application_external_key}",</arg>
<arg>"assessment_id": "${assessment_id}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:31.439" level="INFO">${body} = { "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "ho...</msg>
<status status="PASS" endtime="20210224 15:54:31.439" starttime="20210224 15:54:31.438"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/admin/internal_operation/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/registration/approval</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:31.439" level="INFO">POST Request using : uri=/admin/internal_operation/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/registration/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "holder_id": "ed913c3c4ab34b3a9818eb9f385011b1", "applicant_id": "bcc25a6751c14b52af1340d40dba78c5", "assessment_id": "1c35c379-3185-4b24-8072-328ef9899cfe" } } 
json=None</msg>
<msg timestamp="20210224 15:54:31.661" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.661" starttime="20210224 15:54:31.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.662" level="INFO">{u'message': u'Holder approved successfully'}</msg>
<status status="PASS" endtime="20210224 15:54:31.662" starttime="20210224 15:54:31.661"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.663" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.663" starttime="20210224 15:54:31.662"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:31.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.664" starttime="20210224 15:54:31.663"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.664" starttime="20210224 15:54:31.434"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.664" starttime="20210224 15:54:31.031"></status>
</kw>
<kw name="Então o sistema deverá realizar o meu cadastro com sucesso" library="steps">
<arguments>
<arg>active</arg>
</arguments>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:31.666" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:31.820" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.820" starttime="20210224 15:54:31.666"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.820" level="INFO">{u'status': u'active', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:27.410339', u'updated_at': u'2021-02-24T15:54:32.610436', u'id': u'ed913c3c4ab34b3a9818eb9f385011b1', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/ed913c3c4ab34b3a9818eb9f385011b1/associates', u'type': u'GET'}}, u'national_registration': u'46831205000110', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:31.821" starttime="20210224 15:54:31.820"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.821" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.821" starttime="20210224 15:54:31.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:31.822" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.822" starttime="20210224 15:54:31.821"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.822" starttime="20210224 15:54:31.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.825" starttime="20210224 15:54:31.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.825" starttime="20210224 15:54:31.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.826" starttime="20210224 15:54:31.825"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.826" starttime="20210224 15:54:31.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.827" starttime="20210224 15:54:31.827"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.828" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:31.828" starttime="20210224 15:54:31.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.828" starttime="20210224 15:54:31.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.829" starttime="20210224 15:54:31.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.829" starttime="20210224 15:54:31.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:31.830" starttime="20210224 15:54:31.830"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.830" starttime="20210224 15:54:31.823"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.830" starttime="20210224 15:54:31.822"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.830" starttime="20210224 15:54:31.664"></status>
</kw>
<tags>
<tag>regression_test</tag>
<tag>smoke_test</tag>
</tags>
<status status="PASS" endtime="20210224 15:54:31.830" critical="yes" starttime="20210224 15:54:25.056"></status>
</test>
<test id="s1-s1-s1-s1-t2" name="Cenário: Criar Holder Business EI">
<kw name="Dado que eu deseje me cadastrar como holder em Banking" library="steps">
<kw name="conectar accreditation" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accreditation</arg>
<arg>url=${accreditation_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210224 15:54:31.832" level="INFO">Creating Session using : alias=accreditation, url=https://banking-accreditation-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20210224 15:54:31.832" starttime="20210224 15:54:31.832"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.832" starttime="20210224 15:54:31.832"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:31.832" starttime="20210224 15:54:31.832"></status>
</kw>
<kw name="Quando eu preencher todos os dados necessários para o cadastro do holder business" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>ei</arg>
</arguments>
<kw name="Cnpj" library="FakerLibrary">
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:31.833" level="INFO">${national_registration} = 71.690.534/0001-35</msg>
<status status="PASS" endtime="20210224 15:54:31.833" starttime="20210224 15:54:31.833"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:31.833" level="INFO">${national_registration} = 71690534/0001-35</msg>
<status status="PASS" endtime="20210224 15:54:31.833" starttime="20210224 15:54:31.833"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:31.834" level="INFO">${national_registration} = 71690534/000135</msg>
<status status="PASS" endtime="20210224 15:54:31.834" starttime="20210224 15:54:31.834"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>/</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:31.834" level="INFO">${national_registration} = 71690534000135</msg>
<status status="PASS" endtime="20210224 15:54:31.835" starttime="20210224 15:54:31.834"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${national_registration}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.835" level="INFO">${national_registration} = 71690534000135</msg>
<status status="PASS" endtime="20210224 15:54:31.835" starttime="20210224 15:54:31.835"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${establishment_format}</arg>
</arguments>
<msg timestamp="20210224 15:54:31.835" level="INFO">${establishment_format} = ei</msg>
<status status="PASS" endtime="20210224 15:54:31.835" starttime="20210224 15:54:31.835"></status>
</kw>
<kw name="criar holder business" library="accreditation_post_holder_business">
<arguments>
<arg>holder_type=business</arg>
<arg>holder_name=${holder_name}</arg>
<arg>email_business=${email_business}</arg>
<arg>national_registration=${national_registration}</arg>
<arg>revenue_business=${revenue_business}</arg>
<arg>cnae=${cnae}</arg>
<arg>legal_name=${legal_name}</arg>
<arg>establishment_format=${establishment_format}</arg>
<arg>establishment_date=${establishment_date}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:31.837" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:31.837" starttime="20210224 15:54:31.836"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${holder_type}",</arg>
<arg>"name": "${holder_name}",</arg>
<arg>"email": "${email_business}",</arg>
<arg>"national_registration": "${national_registration}",</arg>
<arg>"revenue": ${revenue_business},</arg>
<arg>"cnae": "${cnae}",</arg>
<arg>"legal_name": "${legal_name}",</arg>
<arg>"establishment": {</arg>
<arg>"format":"${establishment_format}",</arg>
<arg>"date":"${establishment_date}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:31.837" level="INFO">${body} = { "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "71690534000135", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Emp...</msg>
<status status="PASS" endtime="20210224 15:54:31.837" starttime="20210224 15:54:31.837"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:31.838" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "71690534000135", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Empresa", "establishment": { "format":"ei", "date":"2012-04-25" } } 
json=None</msg>
<msg timestamp="20210224 15:54:32.486" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:32.486" starttime="20210224 15:54:31.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:32.487" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:33.475625', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:32.487" starttime="20210224 15:54:32.486"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210224 15:54:32.487" level="INFO">{ "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "71690534000135", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Empresa", "establishment": { "format":"ei", "date":"2012-04-25" } }</msg>
<status status="PASS" endtime="20210224 15:54:32.488" starttime="20210224 15:54:32.487"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:32.489" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:32.489" starttime="20210224 15:54:32.489"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:32.490" level="INFO">${holder_external_key} = 7a359e2275b84c5ca5c7b1ea44e8d41a</msg>
<status status="PASS" endtime="20210224 15:54:32.490" starttime="20210224 15:54:32.489"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:32.491" level="INFO">${holder_external_key} = 7a359e2275b84c5ca5c7b1ea44e8d41a</msg>
<status status="PASS" endtime="20210224 15:54:32.491" starttime="20210224 15:54:32.491"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:32.491" starttime="20210224 15:54:31.836"></status>
</kw>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.492" starttime="20210224 15:54:32.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.493" starttime="20210224 15:54:32.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.494" starttime="20210224 15:54:32.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.494" starttime="20210224 15:54:32.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.495" starttime="20210224 15:54:32.495"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:32.496" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:32.496" starttime="20210224 15:54:32.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.496" starttime="20210224 15:54:32.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.497" starttime="20210224 15:54:32.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.498" starttime="20210224 15:54:32.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.499" starttime="20210224 15:54:32.498"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:32.499" starttime="20210224 15:54:32.491"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:32.499" starttime="20210224 15:54:31.832"></status>
</kw>
<kw name="E realizar o cadastro do meu telefone" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar holder phone" library="accreditation_post_holder_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996221236</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:32.500" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:32.500" starttime="20210224 15:54:32.500"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:32.501" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996221236" }</msg>
<status status="PASS" endtime="20210224 15:54:32.501" starttime="20210224 15:54:32.500"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/phones</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:32.502" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996221236" } 
json=None</msg>
<msg timestamp="20210224 15:54:32.697" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:32.697" starttime="20210224 15:54:32.501"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:32.698" level="INFO">{u'area_code': u'21', u'number': u'996221236', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones/258b882b0a6d438687ede81f87020e80', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'258b882b0a6d438687ede81f87020e80'}</msg>
<status status="PASS" endtime="20210224 15:54:32.698" starttime="20210224 15:54:32.697"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:32.700" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:32.700" starttime="20210224 15:54:32.698"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${phone_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:32.701" level="INFO">${phone_external_key} = 258b882b0a6d438687ede81f87020e80</msg>
<status status="PASS" endtime="20210224 15:54:32.702" starttime="20210224 15:54:32.700"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:32.703" level="INFO">${phone_external_key} = 258b882b0a6d438687ede81f87020e80</msg>
<status status="PASS" endtime="20210224 15:54:32.703" starttime="20210224 15:54:32.702"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:32.703" starttime="20210224 15:54:32.499"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:32.705" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:32.853" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:32.853" starttime="20210224 15:54:32.705"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:32.854" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:33.475625', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:32.854" starttime="20210224 15:54:32.853"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:32.854" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:32.854" starttime="20210224 15:54:32.854"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:32.855" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:32.855" starttime="20210224 15:54:32.855"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:32.855" starttime="20210224 15:54:32.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.858" starttime="20210224 15:54:32.857"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.859" starttime="20210224 15:54:32.858"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.860" starttime="20210224 15:54:32.859"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.860" starttime="20210224 15:54:32.860"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.861" starttime="20210224 15:54:32.860"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:32.861" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:32.862" starttime="20210224 15:54:32.861"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.862" starttime="20210224 15:54:32.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.863" starttime="20210224 15:54:32.862"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.863" starttime="20210224 15:54:32.863"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:32.864" starttime="20210224 15:54:32.863"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:32.864" starttime="20210224 15:54:32.857"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:32.864" starttime="20210224 15:54:32.855"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:32.864" starttime="20210224 15:54:32.499"></status>
</kw>
<kw name="E realizar o cadastro do meu endereço" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar holder address" library="accreditation_post_holder_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>90</arg>
<arg>apto 200</arg>
<arg>21550987</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:32.865" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:32.865" starttime="20210224 15:54:32.865"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:32.866" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:32.867" starttime="20210224 15:54:32.865"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:32.867" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "21550987" } 
json=None</msg>
<msg timestamp="20210224 15:54:33.046" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.046" starttime="20210224 15:54:32.867"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.046" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 200', u'number': u'90', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550987', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses/a1150e06e97e4d0c8c71d0addad7271f', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}}, u'main': True, u'id': u'a1150e06e97e4d0c8c71d0addad7271f'}</msg>
<status status="PASS" endtime="20210224 15:54:33.046" starttime="20210224 15:54:33.046"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.047" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.047" starttime="20210224 15:54:33.047"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:33.048" level="INFO">${address_external_key} = a1150e06e97e4d0c8c71d0addad7271f</msg>
<status status="PASS" endtime="20210224 15:54:33.048" starttime="20210224 15:54:33.047"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.049" level="INFO">${address_external_key} = a1150e06e97e4d0c8c71d0addad7271f</msg>
<status status="PASS" endtime="20210224 15:54:33.049" starttime="20210224 15:54:33.048"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:33.049" starttime="20210224 15:54:32.864"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:33.050" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:33.195" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.195" starttime="20210224 15:54:33.049"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.196" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:33.475625', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:33.196" starttime="20210224 15:54:33.196"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.197" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.197" starttime="20210224 15:54:33.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:33.198" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.198" starttime="20210224 15:54:33.197"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:33.198" starttime="20210224 15:54:33.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.200" starttime="20210224 15:54:33.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.201" starttime="20210224 15:54:33.200"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.202" starttime="20210224 15:54:33.201"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.202" starttime="20210224 15:54:33.202"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.203" starttime="20210224 15:54:33.203"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.204" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.204" starttime="20210224 15:54:33.203"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.204" starttime="20210224 15:54:33.204"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.205" starttime="20210224 15:54:33.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.206" starttime="20210224 15:54:33.205"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.207" starttime="20210224 15:54:33.206"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:33.208" starttime="20210224 15:54:33.199"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:33.208" starttime="20210224 15:54:33.198"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:33.208" starttime="20210224 15:54:32.864"></status>
</kw>
<kw name="E realizar o cadastro do documento" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>PAGINA_CONTRATO_SOCIAL</arg>
</arguments>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:33.209" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:33.209" starttime="20210224 15:54:33.209"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:33.210" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:33.211" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:33.212" starttime="20210224 15:54:33.210"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:33.213" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents?type=PAGINA_CONTRATO_SOCIAL, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:33.543" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.543" starttime="20210224 15:54:33.212"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.544" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'pagina_contrato_social', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents/ce3db83453074e7f826f9f39101148a9/download', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents/ce3db83453074e7f826f9f39101148a9', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}}, u'id': u'ce3db83453074e7f826f9f39101148a9'}</msg>
<status status="PASS" endtime="20210224 15:54:33.544" starttime="20210224 15:54:33.543"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.546" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.546" starttime="20210224 15:54:33.544"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:33.546" level="INFO">${document_external_key} = ce3db83453074e7f826f9f39101148a9</msg>
<status status="PASS" endtime="20210224 15:54:33.546" starttime="20210224 15:54:33.546"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.547" level="INFO">${document_external_key} = ce3db83453074e7f826f9f39101148a9</msg>
<status status="PASS" endtime="20210224 15:54:33.547" starttime="20210224 15:54:33.546"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:33.547" starttime="20210224 15:54:33.209"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:33.548" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:33.693" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.693" starttime="20210224 15:54:33.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.694" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:33.475625', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:33.694" starttime="20210224 15:54:33.693"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.695" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.695" starttime="20210224 15:54:33.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:33.695" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.695" starttime="20210224 15:54:33.695"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:33.696" starttime="20210224 15:54:33.547"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.698" starttime="20210224 15:54:33.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.699" starttime="20210224 15:54:33.698"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.700" starttime="20210224 15:54:33.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.701" starttime="20210224 15:54:33.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.701" starttime="20210224 15:54:33.701"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.702" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.702" starttime="20210224 15:54:33.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.703" starttime="20210224 15:54:33.702"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.704" starttime="20210224 15:54:33.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.705" starttime="20210224 15:54:33.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:33.705" starttime="20210224 15:54:33.705"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:33.706" starttime="20210224 15:54:33.697"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:33.706" starttime="20210224 15:54:33.696"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:33.706" starttime="20210224 15:54:33.208"></status>
</kw>
<kw name="E realizar o cadastro de um sócio pessoal física" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>50</arg>
<arg>true</arg>
</arguments>
<kw name="Cpf" library="FakerLibrary">
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:33.707" level="INFO">${partner_individual_national_registration} = 432.680.751-26</msg>
<status status="PASS" endtime="20210224 15:54:33.707" starttime="20210224 15:54:33.707"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:33.708" level="INFO">${partner_individual_national_registration} = 432680751-26</msg>
<status status="PASS" endtime="20210224 15:54:33.708" starttime="20210224 15:54:33.707"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:33.708" level="INFO">${partner_individual_national_registration} = 43268075126</msg>
<status status="PASS" endtime="20210224 15:54:33.708" starttime="20210224 15:54:33.708"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.709" level="INFO">${partner_individual_national_registration} = 43268075126</msg>
<status status="PASS" endtime="20210224 15:54:33.709" starttime="20210224 15:54:33.709"></status>
</kw>
<kw name="Rg" library="FakerLibrary">
<doc>Brazilian RG, return plain numbers.
Check:  https://www.ngmatematica.com/2014/02/como-determinar-o-digito-verificador-do.html</doc>
<assign>
<var>${partner_individual_identity_card}</var>
</assign>
<msg timestamp="20210224 15:54:33.710" level="INFO">${partner_individual_identity_card} = 173460288</msg>
<status status="PASS" endtime="20210224 15:54:33.710" starttime="20210224 15:54:33.709"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_individual_identity_card}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.710" level="INFO">${partner_individual_identity_card} = 173460288</msg>
<status status="PASS" endtime="20210224 15:54:33.710" starttime="20210224 15:54:33.710"></status>
</kw>
<kw name="criar partner individual" library="accreditation_post_partner_individual">
<arguments>
<arg>partner_individual_type=individual</arg>
<arg>partner_individual_name=${partner_individual_name}</arg>
<arg>partner_individual_email=${partner_individual_email}</arg>
<arg>partner_individual_national_registration=${partner_individual_national_registration}</arg>
<arg>partner_individual_revenue=${partner_individual_revenue}</arg>
<arg>partner_individual_birthday=${partner_individual_birthday}</arg>
<arg>partner_individual_mothers_name=${partner_individual_mothers_name}</arg>
<arg>partner_individual_identity_card=${partner_individual_identity_card}</arg>
<arg>partner_individual_pep=false</arg>
<arg>partner_individual_percentage=${partner_individual_percentage}</arg>
<arg>partner_individual_adm=${partner_individual_adm}</arg>
<arg>partner_individual_cbo=${partner_individual_cbo}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:33.712" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:33.712" starttime="20210224 15:54:33.712"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${partner_individual_type}",</arg>
<arg>"name": "${partner_individual_name}",</arg>
<arg>"email": "${partner_individual_email}",</arg>
<arg>"national_registration": "${partner_individual_national_registration}",</arg>
<arg>"revenue": ${partner_individual_revenue},</arg>
<arg>"birthday": "${partner_individual_birthday}",</arg>
<arg>"mothers_name": "${partner_individual_mothers_name}",</arg>
<arg>"identity_card": "${partner_individual_identity_card}",</arg>
<arg>"pep": false,</arg>
<arg>"percentage": ${partner_individual_percentage},</arg>
<arg>"adm": ${partner_individual_adm},</arg>
<arg>"cbo": ${partner_individual_cbo}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:33.713" level="INFO">${body} = { "type": "individual", "name": "Individual Partner de teste", "email": "teste@teste.com.br", "national_registration": "43268075126", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe...</msg>
<status status="PASS" endtime="20210224 15:54:33.713" starttime="20210224 15:54:33.712"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:33.714" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "individual", "name": "Individual Partner de teste", "email": "teste@teste.com.br", "national_registration": "43268075126", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Individual Partner", "identity_card": "173460288", "pep": false, "percentage": 50, "adm": true, "cbo": 821450 } 
json=None</msg>
<msg timestamp="20210224 15:54:33.907" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.907" starttime="20210224 15:54:33.713"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.908" level="INFO">{u'adm': True, u'name': u'Individual Partner de teste', u'mothers_name': u'M\xe3e do Individual Partner', u'revenue': 5500.0, u'cbo': u'821450', u'created_at': u'2021-02-24T15:54:34.883184', u'pep': False, u'updated_at': u'2021-02-24T15:54:34.883186', u'id': u'4095be8f231f4d9283e060fb091e2fc2', u'identity_card': u'173460288', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/documents', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/addresses', u'type': u'GET'}}, u'national_registration': u'43268075126', u'percentage': 50.0, u'main': True, u'type': u'individual', u'email': u'teste@teste.com.br'}</msg>
<status status="PASS" endtime="20210224 15:54:33.908" starttime="20210224 15:54:33.907"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.909" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:33.909" starttime="20210224 15:54:33.909"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${partner_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:33.910" level="INFO">${partner_external_key} = 4095be8f231f4d9283e060fb091e2fc2</msg>
<status status="PASS" endtime="20210224 15:54:33.910" starttime="20210224 15:54:33.909"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:33.910" level="INFO">${partner_external_key} = 4095be8f231f4d9283e060fb091e2fc2</msg>
<status status="PASS" endtime="20210224 15:54:33.910" starttime="20210224 15:54:33.910"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:33.911" starttime="20210224 15:54:33.710"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:33.912" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:34.075" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.075" starttime="20210224 15:54:33.911"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.075" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:33.475625', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:34.076" starttime="20210224 15:54:34.075"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.076" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.076" starttime="20210224 15:54:34.076"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:34.077" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.077" starttime="20210224 15:54:34.077"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.077" starttime="20210224 15:54:33.911"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.080" starttime="20210224 15:54:34.079"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.081" starttime="20210224 15:54:34.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.081" starttime="20210224 15:54:34.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.082" starttime="20210224 15:54:34.081"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.083" starttime="20210224 15:54:34.082"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.084" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.084" starttime="20210224 15:54:34.083"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.085" starttime="20210224 15:54:34.084"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.085" starttime="20210224 15:54:34.085"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.086" starttime="20210224 15:54:34.086"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.088" starttime="20210224 15:54:34.086"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.088" starttime="20210224 15:54:34.078"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.088" starttime="20210224 15:54:34.078"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.088" starttime="20210224 15:54:33.706"></status>
</kw>
<kw name="E realizar o cadastro do telefone do sócio" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar partner phone" library="accreditation_post_partner_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996554785</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:34.089" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:34.089" starttime="20210224 15:54:34.088"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:34.090" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996554785" }</msg>
<status status="PASS" endtime="20210224 15:54:34.090" starttime="20210224 15:54:34.089"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/phones/</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:34.091" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/phones/, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996554785" } 
json=None</msg>
<msg timestamp="20210224 15:54:34.277" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.277" starttime="20210224 15:54:34.090"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.278" level="INFO">{u'area_code': u'21', u'number': u'996554785', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/phones/38e1243982804fcdb58b5c2716984340', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'38e1243982804fcdb58b5c2716984340'}</msg>
<status status="PASS" endtime="20210224 15:54:34.278" starttime="20210224 15:54:34.277"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.279" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.279" starttime="20210224 15:54:34.278"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:34.280" level="INFO">${holder_external_key} = 38e1243982804fcdb58b5c2716984340</msg>
<status status="PASS" endtime="20210224 15:54:34.280" starttime="20210224 15:54:34.279"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.281" level="INFO">${phone_external_key} = 258b882b0a6d438687ede81f87020e80</msg>
<status status="PASS" endtime="20210224 15:54:34.281" starttime="20210224 15:54:34.280"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.281" starttime="20210224 15:54:34.088"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:34.283" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:34.428" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.428" starttime="20210224 15:54:34.283"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.430" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:33.475625', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:34.430" starttime="20210224 15:54:34.429"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.430" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.430" starttime="20210224 15:54:34.430"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:34.431" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.431" starttime="20210224 15:54:34.430"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.431" starttime="20210224 15:54:34.281"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.433" starttime="20210224 15:54:34.432"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.434" starttime="20210224 15:54:34.433"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.434" starttime="20210224 15:54:34.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.435" starttime="20210224 15:54:34.434"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.436" starttime="20210224 15:54:34.435"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.436" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.436" starttime="20210224 15:54:34.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.437" starttime="20210224 15:54:34.436"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.437" starttime="20210224 15:54:34.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.438" starttime="20210224 15:54:34.437"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.438" starttime="20210224 15:54:34.438"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.438" starttime="20210224 15:54:34.432"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.439" starttime="20210224 15:54:34.431"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.439" starttime="20210224 15:54:34.088"></status>
</kw>
<kw name="E realizar o cadastro do endereço do sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
</arguments>
<kw name="criar partner address" library="accreditation_post_partner_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>61</arg>
<arg>apto 201</arg>
<arg>21550478</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:34.440" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:34.440" starttime="20210224 15:54:34.440"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:34.442" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:34.442" starttime="20210224 15:54:34.441"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:34.442" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "21550478" } 
json=None</msg>
<msg timestamp="20210224 15:54:34.642" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.642" starttime="20210224 15:54:34.442"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.643" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 201', u'number': u'61', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550478', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/addresses/1c6a9ba2af634359ac65fdf7d87c6d88', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}}, u'main': True, u'id': u'1c6a9ba2af634359ac65fdf7d87c6d88'}</msg>
<status status="PASS" endtime="20210224 15:54:34.643" starttime="20210224 15:54:34.642"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.644" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.644" starttime="20210224 15:54:34.643"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:34.644" level="INFO">${address_external_key} = 1c6a9ba2af634359ac65fdf7d87c6d88</msg>
<status status="PASS" endtime="20210224 15:54:34.644" starttime="20210224 15:54:34.644"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.645" level="INFO">${address_external_key} = 1c6a9ba2af634359ac65fdf7d87c6d88</msg>
<status status="PASS" endtime="20210224 15:54:34.645" starttime="20210224 15:54:34.645"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.645" starttime="20210224 15:54:34.440"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:34.647" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:34.790" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.790" starttime="20210224 15:54:34.647"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.791" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:35.662716', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:34.791" starttime="20210224 15:54:34.790"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.791" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.791" starttime="20210224 15:54:34.791"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:34.793" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.793" starttime="20210224 15:54:34.792"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.793" starttime="20210224 15:54:34.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.794" starttime="20210224 15:54:34.793"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.794" starttime="20210224 15:54:34.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.795" starttime="20210224 15:54:34.794"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.795" starttime="20210224 15:54:34.795"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.796" starttime="20210224 15:54:34.795"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:34.796" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:34.797" starttime="20210224 15:54:34.796"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.797" starttime="20210224 15:54:34.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.798" starttime="20210224 15:54:34.797"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.798" starttime="20210224 15:54:34.798"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:34.799" starttime="20210224 15:54:34.798"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.799" starttime="20210224 15:54:34.793"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.799" starttime="20210224 15:54:34.793"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:34.799" starttime="20210224 15:54:34.439"></status>
</kw>
<kw name="E realizar o cadastro da Selfie do Sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>SELFIE</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:34.800" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:34.800" starttime="20210224 15:54:34.800"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:34.800" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:34.802" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:34.802" starttime="20210224 15:54:34.800"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:34.803" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/documents?type=SELFIE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:35.031" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.031" starttime="20210224 15:54:34.802"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.032" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'selfie', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/documents/4207309db2704e519da6260a10ab4f45/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/documents/4207309db2704e519da6260a10ab4f45', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}}, u'id': u'4207309db2704e519da6260a10ab4f45'}</msg>
<status status="PASS" endtime="20210224 15:54:35.032" starttime="20210224 15:54:35.031"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.033" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.033" starttime="20210224 15:54:35.033"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:35.035" level="INFO">${document_external_key} = 4207309db2704e519da6260a10ab4f45</msg>
<status status="PASS" endtime="20210224 15:54:35.035" starttime="20210224 15:54:35.033"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.036" level="INFO">${document_external_key} = 4207309db2704e519da6260a10ab4f45</msg>
<status status="PASS" endtime="20210224 15:54:35.036" starttime="20210224 15:54:35.035"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:35.036" starttime="20210224 15:54:34.799"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:35.037" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:35.185" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.185" starttime="20210224 15:54:35.037"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.186" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:35.662716', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:35.186" starttime="20210224 15:54:35.185"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.187" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.187" starttime="20210224 15:54:35.186"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:35.188" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.188" starttime="20210224 15:54:35.187"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:35.188" starttime="20210224 15:54:35.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.192" starttime="20210224 15:54:35.191"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.193" starttime="20210224 15:54:35.192"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.194" starttime="20210224 15:54:35.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.195" starttime="20210224 15:54:35.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.195" starttime="20210224 15:54:35.195"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.196" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.196" starttime="20210224 15:54:35.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.197" starttime="20210224 15:54:35.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.198" starttime="20210224 15:54:35.197"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.199" starttime="20210224 15:54:35.199"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.200" starttime="20210224 15:54:35.200"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:35.200" starttime="20210224 15:54:35.190"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:35.200" starttime="20210224 15:54:35.188"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:35.200" starttime="20210224 15:54:34.799"></status>
</kw>
<kw name="E realizar o cadastro da frente do RG do sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>RG_FRENTE</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:35.202" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:35.202" starttime="20210224 15:54:35.202"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:35.203" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:35.205" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:35.205" starttime="20210224 15:54:35.202"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:35.207" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/documents?type=RG_FRENTE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:35.509" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.509" starttime="20210224 15:54:35.205"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.509" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_frente', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/documents/dab99d8043f9498f8543e26fe7dce759/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/documents/dab99d8043f9498f8543e26fe7dce759', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}}, u'id': u'dab99d8043f9498f8543e26fe7dce759'}</msg>
<status status="PASS" endtime="20210224 15:54:35.509" starttime="20210224 15:54:35.509"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.510" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.510" starttime="20210224 15:54:35.509"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:35.510" level="INFO">${document_external_key} = dab99d8043f9498f8543e26fe7dce759</msg>
<status status="PASS" endtime="20210224 15:54:35.510" starttime="20210224 15:54:35.510"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.511" level="INFO">${document_external_key} = dab99d8043f9498f8543e26fe7dce759</msg>
<status status="PASS" endtime="20210224 15:54:35.511" starttime="20210224 15:54:35.511"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:35.511" starttime="20210224 15:54:35.201"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:35.512" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:35.656" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.656" starttime="20210224 15:54:35.512"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.658" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:35.662716', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:35.658" starttime="20210224 15:54:35.657"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.661" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.661" starttime="20210224 15:54:35.659"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:35.661" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.661" starttime="20210224 15:54:35.661"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:35.661" starttime="20210224 15:54:35.511"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.664" starttime="20210224 15:54:35.663"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.665" starttime="20210224 15:54:35.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.666" starttime="20210224 15:54:35.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.667" starttime="20210224 15:54:35.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.668" starttime="20210224 15:54:35.668"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.670" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.670" starttime="20210224 15:54:35.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.670" starttime="20210224 15:54:35.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.671" starttime="20210224 15:54:35.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.672" starttime="20210224 15:54:35.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:35.673" starttime="20210224 15:54:35.672"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:35.673" starttime="20210224 15:54:35.663"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:35.673" starttime="20210224 15:54:35.661"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:35.674" starttime="20210224 15:54:35.201"></status>
</kw>
<kw name="E realizar o cadastro do verso do RG do sócio" library="steps">
<arguments>
<arg>ready_for_analysis</arg>
<arg>RG_VERSO</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:35.676" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:35.676" starttime="20210224 15:54:35.676"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:35.677" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:35.679" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:35.679" starttime="20210224 15:54:35.676"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:35.681" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/documents?type=RG_VERSO, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:35.905" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.905" starttime="20210224 15:54:35.679"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.905" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_verso', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/documents/20c2edf966e04d40bc702f76edcec582/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/4095be8f231f4d9283e060fb091e2fc2/documents/20c2edf966e04d40bc702f76edcec582', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}}, u'id': u'20c2edf966e04d40bc702f76edcec582'}</msg>
<status status="PASS" endtime="20210224 15:54:35.905" starttime="20210224 15:54:35.905"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.907" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:35.907" starttime="20210224 15:54:35.907"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:35.908" level="INFO">${document_external_key} = 20c2edf966e04d40bc702f76edcec582</msg>
<status status="PASS" endtime="20210224 15:54:35.908" starttime="20210224 15:54:35.907"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:35.909" level="INFO">${document_external_key} = 20c2edf966e04d40bc702f76edcec582</msg>
<status status="PASS" endtime="20210224 15:54:35.909" starttime="20210224 15:54:35.908"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:35.909" starttime="20210224 15:54:35.675"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:35.910" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:36.058" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.058" starttime="20210224 15:54:35.909"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.059" level="INFO">{u'status': u'ready_for_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:36.900459', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:36.059" starttime="20210224 15:54:36.058"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.060" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.060" starttime="20210224 15:54:36.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:36.061" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.061" starttime="20210224 15:54:36.060"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.061" starttime="20210224 15:54:35.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.064" starttime="20210224 15:54:36.063"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.065" starttime="20210224 15:54:36.064"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.066" starttime="20210224 15:54:36.065"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.068" starttime="20210224 15:54:36.066"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.068" starttime="20210224 15:54:36.068"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.068" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.069" starttime="20210224 15:54:36.068"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.069" starttime="20210224 15:54:36.069"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.070" starttime="20210224 15:54:36.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.071" starttime="20210224 15:54:36.070"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.072" starttime="20210224 15:54:36.071"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.072" starttime="20210224 15:54:36.063"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.072" starttime="20210224 15:54:36.061"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.073" starttime="20210224 15:54:35.674"></status>
</kw>
<kw name="E realizar o cadastro de um sócio pessoal jurídica" library="steps">
<arguments>
<arg>waiting_info</arg>
<arg>mei</arg>
<arg>50</arg>
<arg>false</arg>
</arguments>
<kw name="Cnpj" library="FakerLibrary">
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:36.074" level="INFO">${partner_business_national_registration} = 03.965.284/0001-49</msg>
<status status="PASS" endtime="20210224 15:54:36.074" starttime="20210224 15:54:36.074"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:36.075" level="INFO">${partner_business_national_registration} = 03965284/0001-49</msg>
<status status="PASS" endtime="20210224 15:54:36.075" starttime="20210224 15:54:36.075"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:36.077" level="INFO">${partner_business_national_registration} = 03965284/000149</msg>
<status status="PASS" endtime="20210224 15:54:36.077" starttime="20210224 15:54:36.076"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>/</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:36.077" level="INFO">${partner_business_national_registration} = 03965284000149</msg>
<status status="PASS" endtime="20210224 15:54:36.078" starttime="20210224 15:54:36.077"></status>
</kw>
<kw name="criar partner business" library="accreditation_post_partner_business">
<arguments>
<arg>partner_business_type=business</arg>
<arg>partner_holder_name=${partner_holder_name}</arg>
<arg>partner_business_email=${partner_business_email}</arg>
<arg>partner_business_national_registration=${partner_business_national_registration}</arg>
<arg>partner_business_revenue=${partner_business_revenue}</arg>
<arg>partner_business_cnae=${partner_business_cnae}</arg>
<arg>partner_business_legal_name=${partner_business_legal_name}</arg>
<arg>partner_business_adm=${partner_business_adm}</arg>
<arg>partner_business_percentage=${partner_business_percentage}</arg>
<arg>partner_business_establishment_format=${partner_business_establishment_format}</arg>
<arg>partner_business_establishment_date=${partner_business_establishment_date}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:36.080" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:36.080" starttime="20210224 15:54:36.079"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${partner_business_type}",</arg>
<arg>"name": "${partner_holder_name}",</arg>
<arg>"email": "${partner_business_email}",</arg>
<arg>"national_registration": "${partner_business_national_registration}",</arg>
<arg>"revenue": ${partner_business_revenue},</arg>
<arg>"cnae": "${partner_business_cnae}",</arg>
<arg>"legal_name": "${partner_business_legal_name}",</arg>
<arg>"adm": ${partner_business_adm},</arg>
<arg>"percentage": ${partner_business_percentage},</arg>
<arg>"establishment": {</arg>
<arg>"format":"${partner_business_establishment_format}",</arg>
<arg>"date":"${partner_business_establishment_date}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:36.080" level="INFO">${body} = { "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "03965284000149", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Part...</msg>
<status status="PASS" endtime="20210224 15:54:36.080" starttime="20210224 15:54:36.080"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:36.081" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "03965284000149", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Partner Legal Name", "adm": false, "percentage": 50, "establishment": { "format":"mei", "date":"1988-04-23" } } 
json=None</msg>
<msg timestamp="20210224 15:54:36.291" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.291" starttime="20210224 15:54:36.081"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.292" level="INFO">{ "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "03965284000149", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Partner Legal Name", "adm": false, "percentage": 50, "establishment": { "format":"mei", "date":"1988-04-23" } }</msg>
<status status="PASS" endtime="20210224 15:54:36.292" starttime="20210224 15:54:36.291"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.292" level="INFO">{u'legal_name': u'Business Partner Legal Name', u'adm': False, u'name': u'Business Partner de teste', u'cnae': u'0111301', u'revenue': 5500.0, u'establishment': {u'date': u'1988-04-23', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:37.254455', u'updated_at': u'2021-02-24T15:54:37.254457', u'id': u'497df1f291df43aea3a3cf40a719d26d', u'_links': {u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/497df1f291df43aea3a3cf40a719d26d/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/497df1f291df43aea3a3cf40a719d26d/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/497df1f291df43aea3a3cf40a719d26d/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/497df1f291df43aea3a3cf40a719d26d', u'type': u'GET'}, u'adm': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/497df1f291df43aea3a3cf40a719d26d/adm', u'type': u'PUT'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}}, u'national_registration': u'03965284000149', u'percentage': 50.0, u'main': True, u'type': u'business', u'email': u'teste@teste.com.br'}</msg>
<status status="PASS" endtime="20210224 15:54:36.292" starttime="20210224 15:54:36.292"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.293" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.293" starttime="20210224 15:54:36.292"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${partner_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:36.294" level="INFO">${partner_external_key} = 497df1f291df43aea3a3cf40a719d26d</msg>
<status status="PASS" endtime="20210224 15:54:36.294" starttime="20210224 15:54:36.293"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.294" level="INFO">${partner_external_key} = 497df1f291df43aea3a3cf40a719d26d</msg>
<status status="PASS" endtime="20210224 15:54:36.294" starttime="20210224 15:54:36.294"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.294" starttime="20210224 15:54:36.078"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.294" starttime="20210224 15:54:36.073"></status>
</kw>
<kw name="E realizar o cadastro do telefone do sócio" library="steps">
<arguments>
<arg>waiting_info</arg>
</arguments>
<kw name="criar partner phone" library="accreditation_post_partner_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996554785</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:36.296" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:36.296" starttime="20210224 15:54:36.295"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:36.296" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996554785" }</msg>
<status status="PASS" endtime="20210224 15:54:36.296" starttime="20210224 15:54:36.296"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/phones/</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:36.297" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/497df1f291df43aea3a3cf40a719d26d/phones/, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996554785" } 
json=None</msg>
<msg timestamp="20210224 15:54:36.481" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.481" starttime="20210224 15:54:36.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.482" level="INFO">{u'area_code': u'21', u'number': u'996554785', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/497df1f291df43aea3a3cf40a719d26d', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/497df1f291df43aea3a3cf40a719d26d/phones/ef0f2db73a0f4691af1f35d310c4764b', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'ef0f2db73a0f4691af1f35d310c4764b'}</msg>
<status status="PASS" endtime="20210224 15:54:36.482" starttime="20210224 15:54:36.482"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.483" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.483" starttime="20210224 15:54:36.483"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:36.484" level="INFO">${holder_external_key} = ef0f2db73a0f4691af1f35d310c4764b</msg>
<status status="PASS" endtime="20210224 15:54:36.484" starttime="20210224 15:54:36.483"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.484" level="INFO">${phone_external_key} = 258b882b0a6d438687ede81f87020e80</msg>
<status status="PASS" endtime="20210224 15:54:36.484" starttime="20210224 15:54:36.484"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.485" starttime="20210224 15:54:36.295"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:36.485" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:36.630" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.630" starttime="20210224 15:54:36.485"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.631" level="INFO">{u'status': u'waiting_info', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:37.273262', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:36.631" starttime="20210224 15:54:36.630"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.631" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.632" starttime="20210224 15:54:36.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:36.633" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.633" starttime="20210224 15:54:36.633"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.633" starttime="20210224 15:54:36.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.635" starttime="20210224 15:54:36.634"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.635" starttime="20210224 15:54:36.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.636" starttime="20210224 15:54:36.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.637" starttime="20210224 15:54:36.636"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.637" starttime="20210224 15:54:36.637"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.638" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.638" starttime="20210224 15:54:36.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.639" starttime="20210224 15:54:36.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.640" starttime="20210224 15:54:36.639"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.642" starttime="20210224 15:54:36.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.642" starttime="20210224 15:54:36.642"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.642" starttime="20210224 15:54:36.634"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.642" starttime="20210224 15:54:36.633"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.643" starttime="20210224 15:54:36.295"></status>
</kw>
<kw name="E realizar o cadastro do endereço do sócio" library="steps">
<arguments>
<arg>ready_for_analysis</arg>
</arguments>
<kw name="criar partner address" library="accreditation_post_partner_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>61</arg>
<arg>apto 201</arg>
<arg>21550478</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:36.644" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:36.644" starttime="20210224 15:54:36.644"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:36.645" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:36.645" starttime="20210224 15:54:36.644"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:36.646" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/497df1f291df43aea3a3cf40a719d26d/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "21550478" } 
json=None</msg>
<msg timestamp="20210224 15:54:36.827" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.827" starttime="20210224 15:54:36.645"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.828" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 201', u'number': u'61', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550478', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/497df1f291df43aea3a3cf40a719d26d', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners/497df1f291df43aea3a3cf40a719d26d/addresses/f87d83cba06445389ee9ead4f38a8265', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}}, u'main': True, u'id': u'f87d83cba06445389ee9ead4f38a8265'}</msg>
<status status="PASS" endtime="20210224 15:54:36.828" starttime="20210224 15:54:36.827"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.829" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.829" starttime="20210224 15:54:36.828"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:36.830" level="INFO">${address_external_key} = f87d83cba06445389ee9ead4f38a8265</msg>
<status status="PASS" endtime="20210224 15:54:36.830" starttime="20210224 15:54:36.829"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.830" level="INFO">${address_external_key} = f87d83cba06445389ee9ead4f38a8265</msg>
<status status="PASS" endtime="20210224 15:54:36.830" starttime="20210224 15:54:36.830"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.831" starttime="20210224 15:54:36.643"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:36.832" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:36.992" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.992" starttime="20210224 15:54:36.832"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.993" level="INFO">{u'status': u'ready_for_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:37.847049', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:36.993" starttime="20210224 15:54:36.993"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.994" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.994" starttime="20210224 15:54:36.993"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:36.994" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.994" starttime="20210224 15:54:36.994"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:36.994" starttime="20210224 15:54:36.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.997" starttime="20210224 15:54:36.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.997" starttime="20210224 15:54:36.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.997" starttime="20210224 15:54:36.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.998" starttime="20210224 15:54:36.997"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:36.998" starttime="20210224 15:54:36.998"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:36.999" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:36.999" starttime="20210224 15:54:36.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.000" starttime="20210224 15:54:36.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.000" starttime="20210224 15:54:37.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.001" starttime="20210224 15:54:37.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.001" starttime="20210224 15:54:37.001"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.001" starttime="20210224 15:54:36.995"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.001" starttime="20210224 15:54:36.995"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.002" starttime="20210224 15:54:36.643"></status>
</kw>
<kw name="E realizar a solicitação da aprovação do meu cadastro" library="steps">
<arguments>
<arg>waiting_analysis</arg>
</arguments>
<kw name="solicitar aprovação do holder" library="accreditation_request_approval">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:37.003" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:37.003" starttime="20210224 15:54:37.002"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/approval</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:37.003" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:37.214" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.214" starttime="20210224 15:54:37.003"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.215" level="INFO">{u'message': u'Approval request accepted successfully. Processing analysis'}</msg>
<status status="PASS" endtime="20210224 15:54:37.215" starttime="20210224 15:54:37.214"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.215" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.215" starttime="20210224 15:54:37.215"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.215" starttime="20210224 15:54:37.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:37.216" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.216" starttime="20210224 15:54:37.216"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:37.218" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:37.366" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.366" starttime="20210224 15:54:37.218"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.367" level="INFO">{u'status': u'waiting_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:38.178402', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:37.367" starttime="20210224 15:54:37.366"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.367" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.367" starttime="20210224 15:54:37.367"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:37.368" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.368" starttime="20210224 15:54:37.368"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.368" starttime="20210224 15:54:37.216"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.370" starttime="20210224 15:54:37.370"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.371" starttime="20210224 15:54:37.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.372" starttime="20210224 15:54:37.371"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.373" starttime="20210224 15:54:37.372"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.375" starttime="20210224 15:54:37.374"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.375" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.375" starttime="20210224 15:54:37.375"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.376" starttime="20210224 15:54:37.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.377" starttime="20210224 15:54:37.376"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.378" starttime="20210224 15:54:37.377"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.378" starttime="20210224 15:54:37.378"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.379" starttime="20210224 15:54:37.369"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.379" starttime="20210224 15:54:37.369"></status>
</kw>
<kw name="recebendo notificação de aprovação" library="accreditation_risk_notification">
<kw name="Uuid 4" library="FakerLibrary">
<doc>Generates a random UUID4 string.
:param cast_to: Specify what type the UUID should be cast to. Default is `str`
:type cast_to: callable</doc>
<assign>
<var>${assessment_id}</var>
</assign>
<msg timestamp="20210224 15:54:37.380" level="INFO">${assessment_id} = b002d1d1-da66-4793-b5f6-205f7d7fef46</msg>
<status status="PASS" endtime="20210224 15:54:37.380" starttime="20210224 15:54:37.380"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year</arg>
</arguments>
<assign>
<var>${year}</var>
</assign>
<msg timestamp="20210224 15:54:37.380" level="INFO">${year} = 2021</msg>
<status status="PASS" endtime="20210224 15:54:37.380" starttime="20210224 15:54:37.380"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>month</arg>
</arguments>
<assign>
<var>${month}</var>
</assign>
<msg timestamp="20210224 15:54:37.381" level="INFO">${month} = 02</msg>
<status status="PASS" endtime="20210224 15:54:37.381" starttime="20210224 15:54:37.380"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>day</arg>
</arguments>
<assign>
<var>${day}</var>
</assign>
<msg timestamp="20210224 15:54:37.381" level="INFO">${day} = 24</msg>
<status status="PASS" endtime="20210224 15:54:37.381" starttime="20210224 15:54:37.381"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:37.382" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:37.382" starttime="20210224 15:54:37.382"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "risk.assessment.result",</arg>
<arg>"resource": "business.holder",</arg>
<arg>"created_at": "${year}-${month}-${day} 15:28:56.747Z",</arg>
<arg>"marketplace_id": "${marketplace_external_key}",</arg>
<arg>"object": {</arg>
<arg>"result": "APPROVED",</arg>
<arg>"holder_id": "${holder_external_key}",</arg>
<arg>"applicant_id": "${application_external_key}",</arg>
<arg>"assessment_id": "${assessment_id}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:37.383" level="INFO">${body} = { "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "ho...</msg>
<status status="PASS" endtime="20210224 15:54:37.383" starttime="20210224 15:54:37.382"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/admin/internal_operation/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/registration/approval</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:37.384" level="INFO">POST Request using : uri=/admin/internal_operation/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/registration/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "holder_id": "7a359e2275b84c5ca5c7b1ea44e8d41a", "applicant_id": "bcc25a6751c14b52af1340d40dba78c5", "assessment_id": "b002d1d1-da66-4793-b5f6-205f7d7fef46" } } 
json=None</msg>
<msg timestamp="20210224 15:54:37.581" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.581" starttime="20210224 15:54:37.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.581" level="INFO">{u'message': u'Holder approved successfully'}</msg>
<status status="PASS" endtime="20210224 15:54:37.581" starttime="20210224 15:54:37.581"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.582" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.582" starttime="20210224 15:54:37.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:37.583" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.583" starttime="20210224 15:54:37.583"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.583" starttime="20210224 15:54:37.380"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.583" starttime="20210224 15:54:37.002"></status>
</kw>
<kw name="Então o sistema deverá realizar o meu cadastro com sucesso" library="steps">
<arguments>
<arg>active</arg>
</arguments>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:37.586" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:37.730" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.730" starttime="20210224 15:54:37.585"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.731" level="INFO">{u'status': u'active', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ei'}, u'created_at': u'2021-02-24T15:54:33.475624', u'updated_at': u'2021-02-24T15:54:38.55551', u'id': u'7a359e2275b84c5ca5c7b1ea44e8d41a', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/7a359e2275b84c5ca5c7b1ea44e8d41a/associates', u'type': u'GET'}}, u'national_registration': u'71690534000135', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:37.731" starttime="20210224 15:54:37.730"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.732" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.732" starttime="20210224 15:54:37.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:37.732" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.732" starttime="20210224 15:54:37.732"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.732" starttime="20210224 15:54:37.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.734" starttime="20210224 15:54:37.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.735" starttime="20210224 15:54:37.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.736" starttime="20210224 15:54:37.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.737" starttime="20210224 15:54:37.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.737" starttime="20210224 15:54:37.737"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.738" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:37.738" starttime="20210224 15:54:37.737"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.740" starttime="20210224 15:54:37.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.740" starttime="20210224 15:54:37.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.740" starttime="20210224 15:54:37.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:37.742" starttime="20210224 15:54:37.741"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.742" starttime="20210224 15:54:37.734"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.742" starttime="20210224 15:54:37.733"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.742" starttime="20210224 15:54:37.584"></status>
</kw>
<tags>
<tag>regression_test</tag>
<tag>smoke_test</tag>
</tags>
<status status="PASS" endtime="20210224 15:54:37.742" critical="yes" starttime="20210224 15:54:31.830"></status>
</test>
<test id="s1-s1-s1-s1-t3" name="Cenário: Criar Holder Business ME">
<kw name="Dado que eu deseje me cadastrar como holder em Banking" library="steps">
<kw name="conectar accreditation" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accreditation</arg>
<arg>url=${accreditation_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210224 15:54:37.744" level="INFO">Creating Session using : alias=accreditation, url=https://banking-accreditation-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20210224 15:54:37.744" starttime="20210224 15:54:37.743"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.744" starttime="20210224 15:54:37.743"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:37.744" starttime="20210224 15:54:37.743"></status>
</kw>
<kw name="Quando eu preencher todos os dados necessários para o cadastro do holder business" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>me</arg>
</arguments>
<kw name="Cnpj" library="FakerLibrary">
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:37.745" level="INFO">${national_registration} = 13.029.458/0001-15</msg>
<status status="PASS" endtime="20210224 15:54:37.745" starttime="20210224 15:54:37.745"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:37.746" level="INFO">${national_registration} = 13029458/0001-15</msg>
<status status="PASS" endtime="20210224 15:54:37.747" starttime="20210224 15:54:37.745"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:37.747" level="INFO">${national_registration} = 13029458/000115</msg>
<status status="PASS" endtime="20210224 15:54:37.747" starttime="20210224 15:54:37.747"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>/</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:37.747" level="INFO">${national_registration} = 13029458000115</msg>
<status status="PASS" endtime="20210224 15:54:37.747" starttime="20210224 15:54:37.747"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${national_registration}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.747" level="INFO">${national_registration} = 13029458000115</msg>
<status status="PASS" endtime="20210224 15:54:37.747" starttime="20210224 15:54:37.747"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${establishment_format}</arg>
</arguments>
<msg timestamp="20210224 15:54:37.748" level="INFO">${establishment_format} = me</msg>
<status status="PASS" endtime="20210224 15:54:37.748" starttime="20210224 15:54:37.747"></status>
</kw>
<kw name="criar holder business" library="accreditation_post_holder_business">
<arguments>
<arg>holder_type=business</arg>
<arg>holder_name=${holder_name}</arg>
<arg>email_business=${email_business}</arg>
<arg>national_registration=${national_registration}</arg>
<arg>revenue_business=${revenue_business}</arg>
<arg>cnae=${cnae}</arg>
<arg>legal_name=${legal_name}</arg>
<arg>establishment_format=${establishment_format}</arg>
<arg>establishment_date=${establishment_date}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:37.749" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:37.749" starttime="20210224 15:54:37.749"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${holder_type}",</arg>
<arg>"name": "${holder_name}",</arg>
<arg>"email": "${email_business}",</arg>
<arg>"national_registration": "${national_registration}",</arg>
<arg>"revenue": ${revenue_business},</arg>
<arg>"cnae": "${cnae}",</arg>
<arg>"legal_name": "${legal_name}",</arg>
<arg>"establishment": {</arg>
<arg>"format":"${establishment_format}",</arg>
<arg>"date":"${establishment_date}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:37.750" level="INFO">${body} = { "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "13029458000115", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Emp...</msg>
<status status="PASS" endtime="20210224 15:54:37.750" starttime="20210224 15:54:37.749"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:37.751" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "13029458000115", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Empresa", "establishment": { "format":"me", "date":"2012-04-25" } } 
json=None</msg>
<msg timestamp="20210224 15:54:38.441" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:38.442" starttime="20210224 15:54:37.750"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:38.443" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:39.414444', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:38.444" starttime="20210224 15:54:38.442"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210224 15:54:38.444" level="INFO">{ "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "13029458000115", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Empresa", "establishment": { "format":"me", "date":"2012-04-25" } }</msg>
<status status="PASS" endtime="20210224 15:54:38.444" starttime="20210224 15:54:38.444"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:38.444" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:38.444" starttime="20210224 15:54:38.444"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:38.444" level="INFO">${holder_external_key} = baa4a29e4f84437fbd2103d6d93e441f</msg>
<status status="PASS" endtime="20210224 15:54:38.444" starttime="20210224 15:54:38.444"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:38.445" level="INFO">${holder_external_key} = baa4a29e4f84437fbd2103d6d93e441f</msg>
<status status="PASS" endtime="20210224 15:54:38.445" starttime="20210224 15:54:38.445"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:38.445" starttime="20210224 15:54:37.748"></status>
</kw>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.446" starttime="20210224 15:54:38.446"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.447" starttime="20210224 15:54:38.446"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.447" starttime="20210224 15:54:38.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.448" starttime="20210224 15:54:38.447"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.448" starttime="20210224 15:54:38.448"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:38.449" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:38.449" starttime="20210224 15:54:38.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.450" starttime="20210224 15:54:38.449"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.450" starttime="20210224 15:54:38.450"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.451" starttime="20210224 15:54:38.451"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.452" starttime="20210224 15:54:38.451"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:38.452" starttime="20210224 15:54:38.445"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:38.452" starttime="20210224 15:54:37.744"></status>
</kw>
<kw name="E realizar o cadastro do meu telefone" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar holder phone" library="accreditation_post_holder_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996221236</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:38.453" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:38.453" starttime="20210224 15:54:38.453"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:38.454" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996221236" }</msg>
<status status="PASS" endtime="20210224 15:54:38.454" starttime="20210224 15:54:38.453"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/phones</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:38.455" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996221236" } 
json=None</msg>
<msg timestamp="20210224 15:54:38.663" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:38.663" starttime="20210224 15:54:38.454"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:38.664" level="INFO">{u'area_code': u'21', u'number': u'996221236', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones/d2a96c846deb4d06a1d3a451948db13c', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'd2a96c846deb4d06a1d3a451948db13c'}</msg>
<status status="PASS" endtime="20210224 15:54:38.664" starttime="20210224 15:54:38.664"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:38.665" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:38.665" starttime="20210224 15:54:38.664"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${phone_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:38.665" level="INFO">${phone_external_key} = d2a96c846deb4d06a1d3a451948db13c</msg>
<status status="PASS" endtime="20210224 15:54:38.665" starttime="20210224 15:54:38.665"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:38.666" level="INFO">${phone_external_key} = d2a96c846deb4d06a1d3a451948db13c</msg>
<status status="PASS" endtime="20210224 15:54:38.666" starttime="20210224 15:54:38.666"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:38.666" starttime="20210224 15:54:38.452"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:38.667" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:38.816" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:38.816" starttime="20210224 15:54:38.666"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:38.817" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:39.414444', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:38.817" starttime="20210224 15:54:38.816"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:38.818" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:38.818" starttime="20210224 15:54:38.817"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:38.819" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:38.819" starttime="20210224 15:54:38.818"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:38.819" starttime="20210224 15:54:38.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.821" starttime="20210224 15:54:38.821"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.822" starttime="20210224 15:54:38.822"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.824" starttime="20210224 15:54:38.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.825" starttime="20210224 15:54:38.824"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.825" starttime="20210224 15:54:38.825"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:38.826" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:38.826" starttime="20210224 15:54:38.826"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.827" starttime="20210224 15:54:38.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.828" starttime="20210224 15:54:38.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.830" starttime="20210224 15:54:38.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:38.830" starttime="20210224 15:54:38.830"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:38.830" starttime="20210224 15:54:38.820"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:38.830" starttime="20210224 15:54:38.819"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:38.830" starttime="20210224 15:54:38.452"></status>
</kw>
<kw name="E realizar o cadastro do meu endereço" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar holder address" library="accreditation_post_holder_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>90</arg>
<arg>apto 200</arg>
<arg>21550987</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:38.832" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:38.833" starttime="20210224 15:54:38.832"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:38.834" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:38.834" starttime="20210224 15:54:38.833"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:38.835" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "21550987" } 
json=None</msg>
<msg timestamp="20210224 15:54:39.127" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.127" starttime="20210224 15:54:38.834"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.128" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 200', u'number': u'90', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550987', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses/d2db2e016de24ff3949d18c954f70a49', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}}, u'main': True, u'id': u'd2db2e016de24ff3949d18c954f70a49'}</msg>
<status status="PASS" endtime="20210224 15:54:39.128" starttime="20210224 15:54:39.127"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.129" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.129" starttime="20210224 15:54:39.128"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:39.130" level="INFO">${address_external_key} = d2db2e016de24ff3949d18c954f70a49</msg>
<status status="PASS" endtime="20210224 15:54:39.130" starttime="20210224 15:54:39.129"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.130" level="INFO">${address_external_key} = d2db2e016de24ff3949d18c954f70a49</msg>
<status status="PASS" endtime="20210224 15:54:39.130" starttime="20210224 15:54:39.130"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:39.131" starttime="20210224 15:54:38.832"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:39.132" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:39.288" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.288" starttime="20210224 15:54:39.131"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.290" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:39.414444', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:39.290" starttime="20210224 15:54:39.288"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.291" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.291" starttime="20210224 15:54:39.291"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:39.292" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.292" starttime="20210224 15:54:39.292"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:39.292" starttime="20210224 15:54:39.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.295" starttime="20210224 15:54:39.295"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.295" starttime="20210224 15:54:39.295"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.297" starttime="20210224 15:54:39.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.297" starttime="20210224 15:54:39.297"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.298" starttime="20210224 15:54:39.297"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.300" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.300" starttime="20210224 15:54:39.298"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.300" starttime="20210224 15:54:39.300"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.300" starttime="20210224 15:54:39.300"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.301" starttime="20210224 15:54:39.300"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.302" starttime="20210224 15:54:39.301"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:39.302" starttime="20210224 15:54:39.294"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:39.302" starttime="20210224 15:54:39.293"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:39.302" starttime="20210224 15:54:38.832"></status>
</kw>
<kw name="E realizar o cadastro do documento" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>PAGINA_CONTRATO_SOCIAL</arg>
</arguments>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:39.303" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:39.303" starttime="20210224 15:54:39.303"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:39.304" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:39.305" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:39.305" starttime="20210224 15:54:39.303"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:39.307" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents?type=PAGINA_CONTRATO_SOCIAL, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:39.564" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.564" starttime="20210224 15:54:39.306"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.566" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'pagina_contrato_social', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents/498f72074cf443978d0d51dac00b1675/download', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents/498f72074cf443978d0d51dac00b1675', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}}, u'id': u'498f72074cf443978d0d51dac00b1675'}</msg>
<status status="PASS" endtime="20210224 15:54:39.566" starttime="20210224 15:54:39.565"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.566" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.566" starttime="20210224 15:54:39.566"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:39.567" level="INFO">${document_external_key} = 498f72074cf443978d0d51dac00b1675</msg>
<status status="PASS" endtime="20210224 15:54:39.568" starttime="20210224 15:54:39.567"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.568" level="INFO">${document_external_key} = 498f72074cf443978d0d51dac00b1675</msg>
<status status="PASS" endtime="20210224 15:54:39.569" starttime="20210224 15:54:39.568"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:39.570" starttime="20210224 15:54:39.302"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:39.570" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:39.720" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.720" starttime="20210224 15:54:39.570"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.721" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:39.414444', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:39.721" starttime="20210224 15:54:39.720"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.722" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.722" starttime="20210224 15:54:39.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:39.722" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.723" starttime="20210224 15:54:39.722"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:39.723" starttime="20210224 15:54:39.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.726" starttime="20210224 15:54:39.726"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.727" starttime="20210224 15:54:39.726"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.728" starttime="20210224 15:54:39.727"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.728" starttime="20210224 15:54:39.728"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.729" starttime="20210224 15:54:39.728"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.729" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.730" starttime="20210224 15:54:39.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.730" starttime="20210224 15:54:39.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.731" starttime="20210224 15:54:39.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.732" starttime="20210224 15:54:39.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:39.732" starttime="20210224 15:54:39.732"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:39.732" starttime="20210224 15:54:39.725"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:39.732" starttime="20210224 15:54:39.723"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:39.732" starttime="20210224 15:54:39.302"></status>
</kw>
<kw name="E realizar o cadastro de um sócio pessoal física" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>50</arg>
<arg>true</arg>
</arguments>
<kw name="Cpf" library="FakerLibrary">
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:39.733" level="INFO">${partner_individual_national_registration} = 127.835.906-03</msg>
<status status="PASS" endtime="20210224 15:54:39.733" starttime="20210224 15:54:39.733"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:39.734" level="INFO">${partner_individual_national_registration} = 127835906-03</msg>
<status status="PASS" endtime="20210224 15:54:39.734" starttime="20210224 15:54:39.734"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:39.734" level="INFO">${partner_individual_national_registration} = 12783590603</msg>
<status status="PASS" endtime="20210224 15:54:39.735" starttime="20210224 15:54:39.734"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.735" level="INFO">${partner_individual_national_registration} = 12783590603</msg>
<status status="PASS" endtime="20210224 15:54:39.735" starttime="20210224 15:54:39.735"></status>
</kw>
<kw name="Rg" library="FakerLibrary">
<doc>Brazilian RG, return plain numbers.
Check:  https://www.ngmatematica.com/2014/02/como-determinar-o-digito-verificador-do.html</doc>
<assign>
<var>${partner_individual_identity_card}</var>
</assign>
<msg timestamp="20210224 15:54:39.736" level="INFO">${partner_individual_identity_card} = 462708159</msg>
<status status="PASS" endtime="20210224 15:54:39.736" starttime="20210224 15:54:39.735"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_individual_identity_card}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.736" level="INFO">${partner_individual_identity_card} = 462708159</msg>
<status status="PASS" endtime="20210224 15:54:39.736" starttime="20210224 15:54:39.736"></status>
</kw>
<kw name="criar partner individual" library="accreditation_post_partner_individual">
<arguments>
<arg>partner_individual_type=individual</arg>
<arg>partner_individual_name=${partner_individual_name}</arg>
<arg>partner_individual_email=${partner_individual_email}</arg>
<arg>partner_individual_national_registration=${partner_individual_national_registration}</arg>
<arg>partner_individual_revenue=${partner_individual_revenue}</arg>
<arg>partner_individual_birthday=${partner_individual_birthday}</arg>
<arg>partner_individual_mothers_name=${partner_individual_mothers_name}</arg>
<arg>partner_individual_identity_card=${partner_individual_identity_card}</arg>
<arg>partner_individual_pep=false</arg>
<arg>partner_individual_percentage=${partner_individual_percentage}</arg>
<arg>partner_individual_adm=${partner_individual_adm}</arg>
<arg>partner_individual_cbo=${partner_individual_cbo}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:39.738" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:39.738" starttime="20210224 15:54:39.737"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${partner_individual_type}",</arg>
<arg>"name": "${partner_individual_name}",</arg>
<arg>"email": "${partner_individual_email}",</arg>
<arg>"national_registration": "${partner_individual_national_registration}",</arg>
<arg>"revenue": ${partner_individual_revenue},</arg>
<arg>"birthday": "${partner_individual_birthday}",</arg>
<arg>"mothers_name": "${partner_individual_mothers_name}",</arg>
<arg>"identity_card": "${partner_individual_identity_card}",</arg>
<arg>"pep": false,</arg>
<arg>"percentage": ${partner_individual_percentage},</arg>
<arg>"adm": ${partner_individual_adm},</arg>
<arg>"cbo": ${partner_individual_cbo}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:39.740" level="INFO">${body} = { "type": "individual", "name": "Individual Partner de teste", "email": "teste@teste.com.br", "national_registration": "12783590603", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe...</msg>
<status status="PASS" endtime="20210224 15:54:39.740" starttime="20210224 15:54:39.738"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:39.741" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "individual", "name": "Individual Partner de teste", "email": "teste@teste.com.br", "national_registration": "12783590603", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Individual Partner", "identity_card": "462708159", "pep": false, "percentage": 50, "adm": true, "cbo": 821450 } 
json=None</msg>
<msg timestamp="20210224 15:54:39.940" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.940" starttime="20210224 15:54:39.740"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.942" level="INFO">{u'adm': True, u'name': u'Individual Partner de teste', u'mothers_name': u'M\xe3e do Individual Partner', u'revenue': 5500.0, u'cbo': u'821450', u'created_at': u'2021-02-24T15:54:40.920016', u'pep': False, u'updated_at': u'2021-02-24T15:54:40.920017', u'id': u'063f08b8571d4490904916c98f00917c', u'identity_card': u'462708159', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/documents', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/addresses', u'type': u'GET'}}, u'national_registration': u'12783590603', u'percentage': 50.0, u'main': True, u'type': u'individual', u'email': u'teste@teste.com.br'}</msg>
<status status="PASS" endtime="20210224 15:54:39.942" starttime="20210224 15:54:39.941"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.943" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:39.943" starttime="20210224 15:54:39.942"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${partner_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:39.944" level="INFO">${partner_external_key} = 063f08b8571d4490904916c98f00917c</msg>
<status status="PASS" endtime="20210224 15:54:39.944" starttime="20210224 15:54:39.943"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:39.945" level="INFO">${partner_external_key} = 063f08b8571d4490904916c98f00917c</msg>
<status status="PASS" endtime="20210224 15:54:39.945" starttime="20210224 15:54:39.945"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:39.945" starttime="20210224 15:54:39.736"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:39.946" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:40.098" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.098" starttime="20210224 15:54:39.945"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.099" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:39.414444', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:40.099" starttime="20210224 15:54:40.098"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.100" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.100" starttime="20210224 15:54:40.099"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:40.101" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.101" starttime="20210224 15:54:40.101"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.102" starttime="20210224 15:54:39.945"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.104" starttime="20210224 15:54:40.103"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.105" starttime="20210224 15:54:40.104"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.106" starttime="20210224 15:54:40.105"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.107" starttime="20210224 15:54:40.107"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.107" starttime="20210224 15:54:40.107"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.108" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.108" starttime="20210224 15:54:40.108"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.109" starttime="20210224 15:54:40.109"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.110" starttime="20210224 15:54:40.109"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.110" starttime="20210224 15:54:40.110"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.111" starttime="20210224 15:54:40.111"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.111" starttime="20210224 15:54:40.103"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.111" starttime="20210224 15:54:40.102"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.111" starttime="20210224 15:54:39.733"></status>
</kw>
<kw name="E realizar o cadastro do telefone do sócio" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar partner phone" library="accreditation_post_partner_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996554785</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:40.113" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:40.113" starttime="20210224 15:54:40.112"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:40.113" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996554785" }</msg>
<status status="PASS" endtime="20210224 15:54:40.113" starttime="20210224 15:54:40.113"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/phones/</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:40.114" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/phones/, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996554785" } 
json=None</msg>
<msg timestamp="20210224 15:54:40.308" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.308" starttime="20210224 15:54:40.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.309" level="INFO">{u'area_code': u'21', u'number': u'996554785', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/phones/a53534b287de407088ac79fa034abce2', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'a53534b287de407088ac79fa034abce2'}</msg>
<status status="PASS" endtime="20210224 15:54:40.309" starttime="20210224 15:54:40.309"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.310" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.310" starttime="20210224 15:54:40.309"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:40.311" level="INFO">${holder_external_key} = a53534b287de407088ac79fa034abce2</msg>
<status status="PASS" endtime="20210224 15:54:40.311" starttime="20210224 15:54:40.310"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.311" level="INFO">${phone_external_key} = d2a96c846deb4d06a1d3a451948db13c</msg>
<status status="PASS" endtime="20210224 15:54:40.311" starttime="20210224 15:54:40.311"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.311" starttime="20210224 15:54:40.112"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:40.312" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:40.464" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.464" starttime="20210224 15:54:40.312"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.465" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:39.414444', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:40.465" starttime="20210224 15:54:40.465"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.466" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.466" starttime="20210224 15:54:40.466"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:40.467" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.467" starttime="20210224 15:54:40.466"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.467" starttime="20210224 15:54:40.312"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.470" starttime="20210224 15:54:40.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.470" starttime="20210224 15:54:40.470"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.471" starttime="20210224 15:54:40.471"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.473" starttime="20210224 15:54:40.472"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.474" starttime="20210224 15:54:40.473"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.476" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.476" starttime="20210224 15:54:40.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.477" starttime="20210224 15:54:40.477"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.478" starttime="20210224 15:54:40.477"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.479" starttime="20210224 15:54:40.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.479" starttime="20210224 15:54:40.479"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.479" starttime="20210224 15:54:40.468"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.480" starttime="20210224 15:54:40.467"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.480" starttime="20210224 15:54:40.112"></status>
</kw>
<kw name="E realizar o cadastro do endereço do sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
</arguments>
<kw name="criar partner address" library="accreditation_post_partner_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>61</arg>
<arg>apto 201</arg>
<arg>21550478</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:40.481" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:40.481" starttime="20210224 15:54:40.481"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:40.482" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:40.482" starttime="20210224 15:54:40.481"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:40.483" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "21550478" } 
json=None</msg>
<msg timestamp="20210224 15:54:40.675" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.675" starttime="20210224 15:54:40.482"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.676" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 201', u'number': u'61', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550478', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/addresses/7e43edbcce314028b4231df7cd59db26', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}}, u'main': True, u'id': u'7e43edbcce314028b4231df7cd59db26'}</msg>
<status status="PASS" endtime="20210224 15:54:40.676" starttime="20210224 15:54:40.675"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.677" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.677" starttime="20210224 15:54:40.677"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:40.678" level="INFO">${address_external_key} = 7e43edbcce314028b4231df7cd59db26</msg>
<status status="PASS" endtime="20210224 15:54:40.678" starttime="20210224 15:54:40.677"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.679" level="INFO">${address_external_key} = 7e43edbcce314028b4231df7cd59db26</msg>
<status status="PASS" endtime="20210224 15:54:40.679" starttime="20210224 15:54:40.678"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.679" starttime="20210224 15:54:40.480"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:40.682" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:40.832" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.832" starttime="20210224 15:54:40.680"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.833" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:41.690658', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:40.833" starttime="20210224 15:54:40.833"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.834" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.834" starttime="20210224 15:54:40.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:40.834" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.834" starttime="20210224 15:54:40.834"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.834" starttime="20210224 15:54:40.679"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.837" starttime="20210224 15:54:40.836"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.837" starttime="20210224 15:54:40.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.837" starttime="20210224 15:54:40.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.838" starttime="20210224 15:54:40.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.838" starttime="20210224 15:54:40.838"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:40.839" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:40.839" starttime="20210224 15:54:40.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.840" starttime="20210224 15:54:40.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.841" starttime="20210224 15:54:40.840"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.842" starttime="20210224 15:54:40.841"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:40.842" starttime="20210224 15:54:40.842"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.843" starttime="20210224 15:54:40.835"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.843" starttime="20210224 15:54:40.835"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:40.843" starttime="20210224 15:54:40.480"></status>
</kw>
<kw name="E realizar o cadastro da Selfie do Sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>SELFIE</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:40.844" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:40.844" starttime="20210224 15:54:40.843"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:40.844" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:40.845" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:40.845" starttime="20210224 15:54:40.844"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:40.846" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/documents?type=SELFIE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:41.105" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.105" starttime="20210224 15:54:40.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.106" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'selfie', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/documents/00f6a3a80e684ea483c5df67e44963e4/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/documents/00f6a3a80e684ea483c5df67e44963e4', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}}, u'id': u'00f6a3a80e684ea483c5df67e44963e4'}</msg>
<status status="PASS" endtime="20210224 15:54:41.107" starttime="20210224 15:54:41.105"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.108" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.108" starttime="20210224 15:54:41.107"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:41.110" level="INFO">${document_external_key} = 00f6a3a80e684ea483c5df67e44963e4</msg>
<status status="PASS" endtime="20210224 15:54:41.110" starttime="20210224 15:54:41.108"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.110" level="INFO">${document_external_key} = 00f6a3a80e684ea483c5df67e44963e4</msg>
<status status="PASS" endtime="20210224 15:54:41.110" starttime="20210224 15:54:41.110"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:41.110" starttime="20210224 15:54:40.843"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:41.111" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:41.260" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.260" starttime="20210224 15:54:41.111"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.261" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:41.690658', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:41.261" starttime="20210224 15:54:41.261"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.263" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.263" starttime="20210224 15:54:41.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:41.263" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.263" starttime="20210224 15:54:41.263"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:41.263" starttime="20210224 15:54:41.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.266" starttime="20210224 15:54:41.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.267" starttime="20210224 15:54:41.266"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.269" starttime="20210224 15:54:41.267"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.269" starttime="20210224 15:54:41.269"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.270" starttime="20210224 15:54:41.269"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.271" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.271" starttime="20210224 15:54:41.270"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.272" starttime="20210224 15:54:41.271"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.273" starttime="20210224 15:54:41.272"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.276" starttime="20210224 15:54:41.273"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.276" starttime="20210224 15:54:41.276"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:41.276" starttime="20210224 15:54:41.266"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:41.276" starttime="20210224 15:54:41.264"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:41.276" starttime="20210224 15:54:40.843"></status>
</kw>
<kw name="E realizar o cadastro da frente do RG do sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>RG_FRENTE</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:41.279" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:41.279" starttime="20210224 15:54:41.277"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:41.279" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:41.281" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:41.281" starttime="20210224 15:54:41.279"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:41.282" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/documents?type=RG_FRENTE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:41.614" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.614" starttime="20210224 15:54:41.281"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.615" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_frente', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/documents/9af229c1793a4ddaa27f4e56d5b810ed/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/documents/9af229c1793a4ddaa27f4e56d5b810ed', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}}, u'id': u'9af229c1793a4ddaa27f4e56d5b810ed'}</msg>
<status status="PASS" endtime="20210224 15:54:41.615" starttime="20210224 15:54:41.614"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.616" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.616" starttime="20210224 15:54:41.615"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:41.617" level="INFO">${document_external_key} = 9af229c1793a4ddaa27f4e56d5b810ed</msg>
<status status="PASS" endtime="20210224 15:54:41.617" starttime="20210224 15:54:41.616"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.618" level="INFO">${document_external_key} = 9af229c1793a4ddaa27f4e56d5b810ed</msg>
<status status="PASS" endtime="20210224 15:54:41.618" starttime="20210224 15:54:41.617"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:41.618" starttime="20210224 15:54:41.277"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:41.620" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:41.770" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.770" starttime="20210224 15:54:41.619"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.770" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:41.690658', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:41.771" starttime="20210224 15:54:41.770"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.771" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.771" starttime="20210224 15:54:41.771"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:41.772" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.772" starttime="20210224 15:54:41.772"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:41.772" starttime="20210224 15:54:41.618"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.775" starttime="20210224 15:54:41.774"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.775" starttime="20210224 15:54:41.775"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.776" starttime="20210224 15:54:41.776"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.777" starttime="20210224 15:54:41.776"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.777" starttime="20210224 15:54:41.777"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:41.778" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:41.778" starttime="20210224 15:54:41.777"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.778" starttime="20210224 15:54:41.778"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.779" starttime="20210224 15:54:41.779"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.780" starttime="20210224 15:54:41.779"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:41.780" starttime="20210224 15:54:41.780"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:41.780" starttime="20210224 15:54:41.774"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:41.780" starttime="20210224 15:54:41.773"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:41.780" starttime="20210224 15:54:41.276"></status>
</kw>
<kw name="E realizar o cadastro do verso do RG do sócio" library="steps">
<arguments>
<arg>ready_for_analysis</arg>
<arg>RG_VERSO</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:41.782" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:41.782" starttime="20210224 15:54:41.781"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:41.782" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:41.785" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:41.785" starttime="20210224 15:54:41.782"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:41.785" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/documents?type=RG_VERSO, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:42.016" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.016" starttime="20210224 15:54:41.785"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.017" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_verso', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/documents/b2e1a6b4c2e84085ac9c5555a4a9e22c/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/063f08b8571d4490904916c98f00917c/documents/b2e1a6b4c2e84085ac9c5555a4a9e22c', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}}, u'id': u'b2e1a6b4c2e84085ac9c5555a4a9e22c'}</msg>
<status status="PASS" endtime="20210224 15:54:42.017" starttime="20210224 15:54:42.016"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.018" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.018" starttime="20210224 15:54:42.018"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:42.019" level="INFO">${document_external_key} = b2e1a6b4c2e84085ac9c5555a4a9e22c</msg>
<status status="PASS" endtime="20210224 15:54:42.019" starttime="20210224 15:54:42.019"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.020" level="INFO">${document_external_key} = b2e1a6b4c2e84085ac9c5555a4a9e22c</msg>
<status status="PASS" endtime="20210224 15:54:42.020" starttime="20210224 15:54:42.020"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.021" starttime="20210224 15:54:41.781"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:42.023" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:42.184" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.184" starttime="20210224 15:54:42.021"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.185" level="INFO">{u'status': u'ready_for_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:43.010171', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:42.185" starttime="20210224 15:54:42.184"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.185" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.186" starttime="20210224 15:54:42.185"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:42.187" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.187" starttime="20210224 15:54:42.187"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.187" starttime="20210224 15:54:42.021"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.188" starttime="20210224 15:54:42.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.190" starttime="20210224 15:54:42.188"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.190" starttime="20210224 15:54:42.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.192" starttime="20210224 15:54:42.190"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.192" starttime="20210224 15:54:42.192"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.194" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.194" starttime="20210224 15:54:42.193"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.194" starttime="20210224 15:54:42.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.194" starttime="20210224 15:54:42.194"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.196" starttime="20210224 15:54:42.196"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.196" starttime="20210224 15:54:42.196"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.196" starttime="20210224 15:54:42.187"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.196" starttime="20210224 15:54:42.187"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.196" starttime="20210224 15:54:41.781"></status>
</kw>
<kw name="E realizar o cadastro de um sócio pessoal jurídica" library="steps">
<arguments>
<arg>waiting_info</arg>
<arg>mei</arg>
<arg>50</arg>
<arg>false</arg>
</arguments>
<kw name="Cnpj" library="FakerLibrary">
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:42.197" level="INFO">${partner_business_national_registration} = 97.682.301/0001-84</msg>
<status status="PASS" endtime="20210224 15:54:42.197" starttime="20210224 15:54:42.197"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:42.198" level="INFO">${partner_business_national_registration} = 97682301/0001-84</msg>
<status status="PASS" endtime="20210224 15:54:42.198" starttime="20210224 15:54:42.197"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:42.198" level="INFO">${partner_business_national_registration} = 97682301/000184</msg>
<status status="PASS" endtime="20210224 15:54:42.198" starttime="20210224 15:54:42.198"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>/</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:42.199" level="INFO">${partner_business_national_registration} = 97682301000184</msg>
<status status="PASS" endtime="20210224 15:54:42.199" starttime="20210224 15:54:42.199"></status>
</kw>
<kw name="criar partner business" library="accreditation_post_partner_business">
<arguments>
<arg>partner_business_type=business</arg>
<arg>partner_holder_name=${partner_holder_name}</arg>
<arg>partner_business_email=${partner_business_email}</arg>
<arg>partner_business_national_registration=${partner_business_national_registration}</arg>
<arg>partner_business_revenue=${partner_business_revenue}</arg>
<arg>partner_business_cnae=${partner_business_cnae}</arg>
<arg>partner_business_legal_name=${partner_business_legal_name}</arg>
<arg>partner_business_adm=${partner_business_adm}</arg>
<arg>partner_business_percentage=${partner_business_percentage}</arg>
<arg>partner_business_establishment_format=${partner_business_establishment_format}</arg>
<arg>partner_business_establishment_date=${partner_business_establishment_date}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:42.202" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:42.202" starttime="20210224 15:54:42.200"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${partner_business_type}",</arg>
<arg>"name": "${partner_holder_name}",</arg>
<arg>"email": "${partner_business_email}",</arg>
<arg>"national_registration": "${partner_business_national_registration}",</arg>
<arg>"revenue": ${partner_business_revenue},</arg>
<arg>"cnae": "${partner_business_cnae}",</arg>
<arg>"legal_name": "${partner_business_legal_name}",</arg>
<arg>"adm": ${partner_business_adm},</arg>
<arg>"percentage": ${partner_business_percentage},</arg>
<arg>"establishment": {</arg>
<arg>"format":"${partner_business_establishment_format}",</arg>
<arg>"date":"${partner_business_establishment_date}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:42.202" level="INFO">${body} = { "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "97682301000184", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Part...</msg>
<status status="PASS" endtime="20210224 15:54:42.202" starttime="20210224 15:54:42.202"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:42.204" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "97682301000184", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Partner Legal Name", "adm": false, "percentage": 50, "establishment": { "format":"mei", "date":"1988-04-23" } } 
json=None</msg>
<msg timestamp="20210224 15:54:42.397" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.397" starttime="20210224 15:54:42.202"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.399" level="INFO">{ "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "97682301000184", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Partner Legal Name", "adm": false, "percentage": 50, "establishment": { "format":"mei", "date":"1988-04-23" } }</msg>
<status status="PASS" endtime="20210224 15:54:42.399" starttime="20210224 15:54:42.399"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.399" level="INFO">{u'legal_name': u'Business Partner Legal Name', u'adm': False, u'name': u'Business Partner de teste', u'cnae': u'0111301', u'revenue': 5500.0, u'establishment': {u'date': u'1988-04-23', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:43.375741', u'updated_at': u'2021-02-24T15:54:43.375742', u'id': u'03c4417c5a644ed7934ba6af8de2f9d7', u'_links': {u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/03c4417c5a644ed7934ba6af8de2f9d7/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/03c4417c5a644ed7934ba6af8de2f9d7/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/03c4417c5a644ed7934ba6af8de2f9d7/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/03c4417c5a644ed7934ba6af8de2f9d7', u'type': u'GET'}, u'adm': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/03c4417c5a644ed7934ba6af8de2f9d7/adm', u'type': u'PUT'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}}, u'national_registration': u'97682301000184', u'percentage': 50.0, u'main': True, u'type': u'business', u'email': u'teste@teste.com.br'}</msg>
<status status="PASS" endtime="20210224 15:54:42.399" starttime="20210224 15:54:42.399"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.399" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.399" starttime="20210224 15:54:42.399"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${partner_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:42.400" level="INFO">${partner_external_key} = 03c4417c5a644ed7934ba6af8de2f9d7</msg>
<status status="PASS" endtime="20210224 15:54:42.400" starttime="20210224 15:54:42.399"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.400" level="INFO">${partner_external_key} = 03c4417c5a644ed7934ba6af8de2f9d7</msg>
<status status="PASS" endtime="20210224 15:54:42.400" starttime="20210224 15:54:42.400"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.400" starttime="20210224 15:54:42.199"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.401" starttime="20210224 15:54:42.196"></status>
</kw>
<kw name="E realizar o cadastro do telefone do sócio" library="steps">
<arguments>
<arg>waiting_info</arg>
</arguments>
<kw name="criar partner phone" library="accreditation_post_partner_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996554785</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:42.402" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:42.402" starttime="20210224 15:54:42.401"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:42.402" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996554785" }</msg>
<status status="PASS" endtime="20210224 15:54:42.402" starttime="20210224 15:54:42.402"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/phones/</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:42.403" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/03c4417c5a644ed7934ba6af8de2f9d7/phones/, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996554785" } 
json=None</msg>
<msg timestamp="20210224 15:54:42.588" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.588" starttime="20210224 15:54:42.402"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.590" level="INFO">{u'area_code': u'21', u'number': u'996554785', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/03c4417c5a644ed7934ba6af8de2f9d7', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/03c4417c5a644ed7934ba6af8de2f9d7/phones/6253c9167dc44d84a32920470501caf5', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'6253c9167dc44d84a32920470501caf5'}</msg>
<status status="PASS" endtime="20210224 15:54:42.590" starttime="20210224 15:54:42.589"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.591" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.591" starttime="20210224 15:54:42.590"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:42.593" level="INFO">${holder_external_key} = 6253c9167dc44d84a32920470501caf5</msg>
<status status="PASS" endtime="20210224 15:54:42.593" starttime="20210224 15:54:42.591"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.593" level="INFO">${phone_external_key} = d2a96c846deb4d06a1d3a451948db13c</msg>
<status status="PASS" endtime="20210224 15:54:42.593" starttime="20210224 15:54:42.593"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.593" starttime="20210224 15:54:42.401"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:42.594" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:42.742" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.742" starttime="20210224 15:54:42.594"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.743" level="INFO">{u'status': u'waiting_info', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:43.393216', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:42.743" starttime="20210224 15:54:42.743"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.744" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.744" starttime="20210224 15:54:42.744"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:42.745" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.745" starttime="20210224 15:54:42.744"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.745" starttime="20210224 15:54:42.593"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.747" starttime="20210224 15:54:42.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.748" starttime="20210224 15:54:42.747"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.749" starttime="20210224 15:54:42.748"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.750" starttime="20210224 15:54:42.749"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.751" starttime="20210224 15:54:42.750"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.751" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.751" starttime="20210224 15:54:42.751"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.752" starttime="20210224 15:54:42.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.753" starttime="20210224 15:54:42.752"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.754" starttime="20210224 15:54:42.753"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:42.754" starttime="20210224 15:54:42.754"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.755" starttime="20210224 15:54:42.746"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.756" starttime="20210224 15:54:42.745"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.756" starttime="20210224 15:54:42.401"></status>
</kw>
<kw name="E realizar o cadastro do endereço do sócio" library="steps">
<arguments>
<arg>ready_for_analysis</arg>
</arguments>
<kw name="criar partner address" library="accreditation_post_partner_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>61</arg>
<arg>apto 201</arg>
<arg>21550478</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:42.757" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:42.757" starttime="20210224 15:54:42.757"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:42.758" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:42.758" starttime="20210224 15:54:42.757"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:42.759" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/03c4417c5a644ed7934ba6af8de2f9d7/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "21550478" } 
json=None</msg>
<msg timestamp="20210224 15:54:42.946" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.946" starttime="20210224 15:54:42.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.947" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 201', u'number': u'61', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550478', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/03c4417c5a644ed7934ba6af8de2f9d7', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners/03c4417c5a644ed7934ba6af8de2f9d7/addresses/f834761cfbf24e0b85543c49811180bc', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}}, u'main': True, u'id': u'f834761cfbf24e0b85543c49811180bc'}</msg>
<status status="PASS" endtime="20210224 15:54:42.947" starttime="20210224 15:54:42.946"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.948" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:42.948" starttime="20210224 15:54:42.947"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:42.948" level="INFO">${address_external_key} = f834761cfbf24e0b85543c49811180bc</msg>
<status status="PASS" endtime="20210224 15:54:42.948" starttime="20210224 15:54:42.948"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:42.949" level="INFO">${address_external_key} = f834761cfbf24e0b85543c49811180bc</msg>
<status status="PASS" endtime="20210224 15:54:42.949" starttime="20210224 15:54:42.949"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:42.949" starttime="20210224 15:54:42.756"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:42.950" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:43.108" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.108" starttime="20210224 15:54:42.950"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.109" level="INFO">{u'status': u'ready_for_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:43.962411', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:43.109" starttime="20210224 15:54:43.108"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.109" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.109" starttime="20210224 15:54:43.109"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:43.110" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.110" starttime="20210224 15:54:43.109"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.110" starttime="20210224 15:54:42.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.112" starttime="20210224 15:54:43.111"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.113" starttime="20210224 15:54:43.112"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.113" starttime="20210224 15:54:43.113"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.114" starttime="20210224 15:54:43.114"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.115" starttime="20210224 15:54:43.114"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.115" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.115" starttime="20210224 15:54:43.115"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.116" starttime="20210224 15:54:43.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.117" starttime="20210224 15:54:43.116"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.117" starttime="20210224 15:54:43.117"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.118" starttime="20210224 15:54:43.117"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.118" starttime="20210224 15:54:43.111"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.118" starttime="20210224 15:54:43.110"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.118" starttime="20210224 15:54:42.756"></status>
</kw>
<kw name="E realizar a solicitação da aprovação do meu cadastro" library="steps">
<arguments>
<arg>waiting_analysis</arg>
</arguments>
<kw name="solicitar aprovação do holder" library="accreditation_request_approval">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:43.119" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:43.119" starttime="20210224 15:54:43.119"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/approval</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:43.120" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:43.332" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.332" starttime="20210224 15:54:43.119"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.333" level="INFO">{u'message': u'Approval request accepted successfully. Processing analysis'}</msg>
<status status="PASS" endtime="20210224 15:54:43.333" starttime="20210224 15:54:43.332"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.334" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.334" starttime="20210224 15:54:43.333"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.334" starttime="20210224 15:54:43.119"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:43.335" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.335" starttime="20210224 15:54:43.334"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:43.337" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:43.491" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.491" starttime="20210224 15:54:43.336"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.492" level="INFO">{u'status': u'waiting_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:44.301379', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:43.492" starttime="20210224 15:54:43.491"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.492" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.493" starttime="20210224 15:54:43.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:43.493" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.493" starttime="20210224 15:54:43.493"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.493" starttime="20210224 15:54:43.335"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.496" starttime="20210224 15:54:43.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.497" starttime="20210224 15:54:43.496"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.498" starttime="20210224 15:54:43.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.498" starttime="20210224 15:54:43.498"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.499" starttime="20210224 15:54:43.498"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.499" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.500" starttime="20210224 15:54:43.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.500" starttime="20210224 15:54:43.500"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.501" starttime="20210224 15:54:43.500"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.502" starttime="20210224 15:54:43.501"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.502" starttime="20210224 15:54:43.502"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.502" starttime="20210224 15:54:43.495"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.502" starttime="20210224 15:54:43.494"></status>
</kw>
<kw name="recebendo notificação de aprovação" library="accreditation_risk_notification">
<kw name="Uuid 4" library="FakerLibrary">
<doc>Generates a random UUID4 string.
:param cast_to: Specify what type the UUID should be cast to. Default is `str`
:type cast_to: callable</doc>
<assign>
<var>${assessment_id}</var>
</assign>
<msg timestamp="20210224 15:54:43.504" level="INFO">${assessment_id} = bb7f2713-9d3b-4a58-a20d-25373950692c</msg>
<status status="PASS" endtime="20210224 15:54:43.504" starttime="20210224 15:54:43.504"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year</arg>
</arguments>
<assign>
<var>${year}</var>
</assign>
<msg timestamp="20210224 15:54:43.504" level="INFO">${year} = 2021</msg>
<status status="PASS" endtime="20210224 15:54:43.504" starttime="20210224 15:54:43.504"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>month</arg>
</arguments>
<assign>
<var>${month}</var>
</assign>
<msg timestamp="20210224 15:54:43.504" level="INFO">${month} = 02</msg>
<status status="PASS" endtime="20210224 15:54:43.504" starttime="20210224 15:54:43.504"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>day</arg>
</arguments>
<assign>
<var>${day}</var>
</assign>
<msg timestamp="20210224 15:54:43.505" level="INFO">${day} = 24</msg>
<status status="PASS" endtime="20210224 15:54:43.505" starttime="20210224 15:54:43.504"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:43.505" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:43.505" starttime="20210224 15:54:43.505"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "risk.assessment.result",</arg>
<arg>"resource": "business.holder",</arg>
<arg>"created_at": "${year}-${month}-${day} 15:28:56.747Z",</arg>
<arg>"marketplace_id": "${marketplace_external_key}",</arg>
<arg>"object": {</arg>
<arg>"result": "APPROVED",</arg>
<arg>"holder_id": "${holder_external_key}",</arg>
<arg>"applicant_id": "${application_external_key}",</arg>
<arg>"assessment_id": "${assessment_id}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:43.507" level="INFO">${body} = { "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "ho...</msg>
<status status="PASS" endtime="20210224 15:54:43.507" starttime="20210224 15:54:43.506"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/admin/internal_operation/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/registration/approval</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:43.508" level="INFO">POST Request using : uri=/admin/internal_operation/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/registration/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "holder_id": "baa4a29e4f84437fbd2103d6d93e441f", "applicant_id": "bcc25a6751c14b52af1340d40dba78c5", "assessment_id": "bb7f2713-9d3b-4a58-a20d-25373950692c" } } 
json=None</msg>
<msg timestamp="20210224 15:54:43.721" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.721" starttime="20210224 15:54:43.507"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.723" level="INFO">{u'message': u'Holder approved successfully'}</msg>
<status status="PASS" endtime="20210224 15:54:43.724" starttime="20210224 15:54:43.722"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.724" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.724" starttime="20210224 15:54:43.724"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:43.725" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.725" starttime="20210224 15:54:43.724"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.725" starttime="20210224 15:54:43.503"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.725" starttime="20210224 15:54:43.118"></status>
</kw>
<kw name="Então o sistema deverá realizar o meu cadastro com sucesso" library="steps">
<arguments>
<arg>active</arg>
</arguments>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:43.727" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:43.877" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.877" starttime="20210224 15:54:43.727"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.878" level="INFO">{u'status': u'active', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'me'}, u'created_at': u'2021-02-24T15:54:39.414441', u'updated_at': u'2021-02-24T15:54:44.679617', u'id': u'baa4a29e4f84437fbd2103d6d93e441f', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/baa4a29e4f84437fbd2103d6d93e441f/associates', u'type': u'GET'}}, u'national_registration': u'13029458000115', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:43.878" starttime="20210224 15:54:43.877"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.879" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.879" starttime="20210224 15:54:43.878"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:43.879" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.879" starttime="20210224 15:54:43.879"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.879" starttime="20210224 15:54:43.726"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.881" starttime="20210224 15:54:43.881"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.882" starttime="20210224 15:54:43.881"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.882" starttime="20210224 15:54:43.882"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.883" starttime="20210224 15:54:43.882"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.883" starttime="20210224 15:54:43.883"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.884" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:43.884" starttime="20210224 15:54:43.883"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.885" starttime="20210224 15:54:43.884"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.885" starttime="20210224 15:54:43.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.886" starttime="20210224 15:54:43.885"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:43.886" starttime="20210224 15:54:43.886"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.887" starttime="20210224 15:54:43.881"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.887" starttime="20210224 15:54:43.879"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.887" starttime="20210224 15:54:43.726"></status>
</kw>
<tags>
<tag>regression_test</tag>
<tag>smoke_test</tag>
</tags>
<status status="PASS" endtime="20210224 15:54:43.887" critical="yes" starttime="20210224 15:54:37.742"></status>
</test>
<test id="s1-s1-s1-s1-t4" name="Cenário: Criar Holder Business EIRELI">
<kw name="Dado que eu deseje me cadastrar como holder em Banking" library="steps">
<kw name="conectar accreditation" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accreditation</arg>
<arg>url=${accreditation_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210224 15:54:43.888" level="INFO">Creating Session using : alias=accreditation, url=https://banking-accreditation-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20210224 15:54:43.889" starttime="20210224 15:54:43.888"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.889" starttime="20210224 15:54:43.888"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:43.889" starttime="20210224 15:54:43.888"></status>
</kw>
<kw name="Quando eu preencher todos os dados necessários para o cadastro do holder business" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>eireli</arg>
</arguments>
<kw name="Cnpj" library="FakerLibrary">
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:43.890" level="INFO">${national_registration} = 71.386.495/0001-87</msg>
<status status="PASS" endtime="20210224 15:54:43.890" starttime="20210224 15:54:43.890"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:43.891" level="INFO">${national_registration} = 71386495/0001-87</msg>
<status status="PASS" endtime="20210224 15:54:43.891" starttime="20210224 15:54:43.890"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:43.891" level="INFO">${national_registration} = 71386495/000187</msg>
<status status="PASS" endtime="20210224 15:54:43.891" starttime="20210224 15:54:43.891"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>/</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:43.892" level="INFO">${national_registration} = 71386495000187</msg>
<status status="PASS" endtime="20210224 15:54:43.892" starttime="20210224 15:54:43.891"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${national_registration}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.892" level="INFO">${national_registration} = 71386495000187</msg>
<status status="PASS" endtime="20210224 15:54:43.892" starttime="20210224 15:54:43.892"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${establishment_format}</arg>
</arguments>
<msg timestamp="20210224 15:54:43.893" level="INFO">${establishment_format} = eireli</msg>
<status status="PASS" endtime="20210224 15:54:43.893" starttime="20210224 15:54:43.892"></status>
</kw>
<kw name="criar holder business" library="accreditation_post_holder_business">
<arguments>
<arg>holder_type=business</arg>
<arg>holder_name=${holder_name}</arg>
<arg>email_business=${email_business}</arg>
<arg>national_registration=${national_registration}</arg>
<arg>revenue_business=${revenue_business}</arg>
<arg>cnae=${cnae}</arg>
<arg>legal_name=${legal_name}</arg>
<arg>establishment_format=${establishment_format}</arg>
<arg>establishment_date=${establishment_date}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:43.894" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:43.894" starttime="20210224 15:54:43.893"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${holder_type}",</arg>
<arg>"name": "${holder_name}",</arg>
<arg>"email": "${email_business}",</arg>
<arg>"national_registration": "${national_registration}",</arg>
<arg>"revenue": ${revenue_business},</arg>
<arg>"cnae": "${cnae}",</arg>
<arg>"legal_name": "${legal_name}",</arg>
<arg>"establishment": {</arg>
<arg>"format":"${establishment_format}",</arg>
<arg>"date":"${establishment_date}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:43.895" level="INFO">${body} = { "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "71386495000187", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Emp...</msg>
<status status="PASS" endtime="20210224 15:54:43.895" starttime="20210224 15:54:43.894"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:43.895" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "71386495000187", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Empresa", "establishment": { "format":"eireli", "date":"2012-04-25" } } 
json=None</msg>
<msg timestamp="20210224 15:54:44.535" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:44.535" starttime="20210224 15:54:43.895"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:44.535" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:45.525836', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:44.536" starttime="20210224 15:54:44.535"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210224 15:54:44.536" level="INFO">{ "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "71386495000187", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Empresa", "establishment": { "format":"eireli", "date":"2012-04-25" } }</msg>
<status status="PASS" endtime="20210224 15:54:44.536" starttime="20210224 15:54:44.536"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:44.537" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:44.537" starttime="20210224 15:54:44.536"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:44.537" level="INFO">${holder_external_key} = 2c50aef350054e2f87a9c72ad681a0ea</msg>
<status status="PASS" endtime="20210224 15:54:44.537" starttime="20210224 15:54:44.537"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:44.538" level="INFO">${holder_external_key} = 2c50aef350054e2f87a9c72ad681a0ea</msg>
<status status="PASS" endtime="20210224 15:54:44.538" starttime="20210224 15:54:44.538"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:44.538" starttime="20210224 15:54:43.893"></status>
</kw>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.539" starttime="20210224 15:54:44.539"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.541" starttime="20210224 15:54:44.540"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.541" starttime="20210224 15:54:44.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.542" starttime="20210224 15:54:44.541"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.542" starttime="20210224 15:54:44.542"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:44.543" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:44.543" starttime="20210224 15:54:44.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.544" starttime="20210224 15:54:44.543"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.545" starttime="20210224 15:54:44.544"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.545" starttime="20210224 15:54:44.545"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.546" starttime="20210224 15:54:44.546"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:44.546" starttime="20210224 15:54:44.538"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:44.546" starttime="20210224 15:54:43.889"></status>
</kw>
<kw name="E realizar o cadastro do meu telefone" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar holder phone" library="accreditation_post_holder_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996221236</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:44.548" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:44.548" starttime="20210224 15:54:44.548"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:44.548" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996221236" }</msg>
<status status="PASS" endtime="20210224 15:54:44.548" starttime="20210224 15:54:44.548"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/phones</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:44.549" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996221236" } 
json=None</msg>
<msg timestamp="20210224 15:54:44.726" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:44.726" starttime="20210224 15:54:44.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:44.727" level="INFO">{u'area_code': u'21', u'number': u'996221236', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones/33034a0a086a4f4cbe7d3b9fc4750f97', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'33034a0a086a4f4cbe7d3b9fc4750f97'}</msg>
<status status="PASS" endtime="20210224 15:54:44.727" starttime="20210224 15:54:44.726"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:44.728" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:44.728" starttime="20210224 15:54:44.727"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${phone_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:44.728" level="INFO">${phone_external_key} = 33034a0a086a4f4cbe7d3b9fc4750f97</msg>
<status status="PASS" endtime="20210224 15:54:44.729" starttime="20210224 15:54:44.728"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:44.729" level="INFO">${phone_external_key} = 33034a0a086a4f4cbe7d3b9fc4750f97</msg>
<status status="PASS" endtime="20210224 15:54:44.729" starttime="20210224 15:54:44.729"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:44.729" starttime="20210224 15:54:44.548"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:44.731" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:44.881" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:44.881" starttime="20210224 15:54:44.731"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:44.882" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:45.525836', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:44.882" starttime="20210224 15:54:44.882"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:44.883" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:44.883" starttime="20210224 15:54:44.883"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:44.884" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:44.884" starttime="20210224 15:54:44.884"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:44.884" starttime="20210224 15:54:44.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.886" starttime="20210224 15:54:44.886"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.887" starttime="20210224 15:54:44.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.888" starttime="20210224 15:54:44.887"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.888" starttime="20210224 15:54:44.888"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.890" starttime="20210224 15:54:44.889"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:44.891" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:44.892" starttime="20210224 15:54:44.890"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.892" starttime="20210224 15:54:44.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.893" starttime="20210224 15:54:44.892"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.894" starttime="20210224 15:54:44.893"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:44.894" starttime="20210224 15:54:44.894"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:44.894" starttime="20210224 15:54:44.885"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:44.895" starttime="20210224 15:54:44.884"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:44.895" starttime="20210224 15:54:44.546"></status>
</kw>
<kw name="E realizar o cadastro do meu endereço" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar holder address" library="accreditation_post_holder_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>90</arg>
<arg>apto 200</arg>
<arg>21550987</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:44.896" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:44.896" starttime="20210224 15:54:44.896"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:44.898" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:44.898" starttime="20210224 15:54:44.897"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:44.899" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "21550987" } 
json=None</msg>
<msg timestamp="20210224 15:54:45.125" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.125" starttime="20210224 15:54:44.898"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.126" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 200', u'number': u'90', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550987', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses/c00c51ccbbc44638b8bda83bf88642f4', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}}, u'main': True, u'id': u'c00c51ccbbc44638b8bda83bf88642f4'}</msg>
<status status="PASS" endtime="20210224 15:54:45.126" starttime="20210224 15:54:45.125"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.126" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.127" starttime="20210224 15:54:45.126"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:45.127" level="INFO">${address_external_key} = c00c51ccbbc44638b8bda83bf88642f4</msg>
<status status="PASS" endtime="20210224 15:54:45.127" starttime="20210224 15:54:45.127"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.128" level="INFO">${address_external_key} = c00c51ccbbc44638b8bda83bf88642f4</msg>
<status status="PASS" endtime="20210224 15:54:45.128" starttime="20210224 15:54:45.128"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:45.128" starttime="20210224 15:54:44.895"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:45.129" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:45.276" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.276" starttime="20210224 15:54:45.129"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.277" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:45.525836', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:45.277" starttime="20210224 15:54:45.276"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.277" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.277" starttime="20210224 15:54:45.277"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:45.278" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.278" starttime="20210224 15:54:45.278"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:45.278" starttime="20210224 15:54:45.129"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.280" starttime="20210224 15:54:45.279"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.280" starttime="20210224 15:54:45.280"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.281" starttime="20210224 15:54:45.280"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.282" starttime="20210224 15:54:45.281"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.282" starttime="20210224 15:54:45.282"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.283" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.283" starttime="20210224 15:54:45.282"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.283" starttime="20210224 15:54:45.283"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.285" starttime="20210224 15:54:45.284"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.285" starttime="20210224 15:54:45.285"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.286" starttime="20210224 15:54:45.285"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:45.286" starttime="20210224 15:54:45.279"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:45.286" starttime="20210224 15:54:45.278"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:45.286" starttime="20210224 15:54:44.895"></status>
</kw>
<kw name="E realizar o cadastro do documento" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>PAGINA_CONTRATO_SOCIAL</arg>
</arguments>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:45.287" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:45.287" starttime="20210224 15:54:45.287"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:45.288" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:45.290" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:45.290" starttime="20210224 15:54:45.287"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:45.291" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents?type=PAGINA_CONTRATO_SOCIAL, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:45.541" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.541" starttime="20210224 15:54:45.290"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.542" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'pagina_contrato_social', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents/5a71e03a2444433180c1753ba69d02e3/download', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents/5a71e03a2444433180c1753ba69d02e3', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}}, u'id': u'5a71e03a2444433180c1753ba69d02e3'}</msg>
<status status="PASS" endtime="20210224 15:54:45.542" starttime="20210224 15:54:45.541"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.542" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.542" starttime="20210224 15:54:45.542"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:45.543" level="INFO">${document_external_key} = 5a71e03a2444433180c1753ba69d02e3</msg>
<status status="PASS" endtime="20210224 15:54:45.543" starttime="20210224 15:54:45.543"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.544" level="INFO">${document_external_key} = 5a71e03a2444433180c1753ba69d02e3</msg>
<status status="PASS" endtime="20210224 15:54:45.544" starttime="20210224 15:54:45.543"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:45.544" starttime="20210224 15:54:45.287"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:45.545" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:45.692" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.692" starttime="20210224 15:54:45.544"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.694" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:45.525836', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:45.694" starttime="20210224 15:54:45.692"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.694" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.695" starttime="20210224 15:54:45.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:45.696" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.696" starttime="20210224 15:54:45.695"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:45.696" starttime="20210224 15:54:45.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.699" starttime="20210224 15:54:45.699"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.700" starttime="20210224 15:54:45.700"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.701" starttime="20210224 15:54:45.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.702" starttime="20210224 15:54:45.701"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.702" starttime="20210224 15:54:45.702"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.703" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.703" starttime="20210224 15:54:45.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.703" starttime="20210224 15:54:45.703"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.704" starttime="20210224 15:54:45.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.704" starttime="20210224 15:54:45.704"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:45.705" starttime="20210224 15:54:45.704"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:45.705" starttime="20210224 15:54:45.698"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:45.705" starttime="20210224 15:54:45.696"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:45.705" starttime="20210224 15:54:45.286"></status>
</kw>
<kw name="E realizar o cadastro de um sócio pessoal física" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>50</arg>
<arg>true</arg>
</arguments>
<kw name="Cpf" library="FakerLibrary">
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:45.706" level="INFO">${partner_individual_national_registration} = 472.698.150-11</msg>
<status status="PASS" endtime="20210224 15:54:45.706" starttime="20210224 15:54:45.705"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:45.706" level="INFO">${partner_individual_national_registration} = 472698150-11</msg>
<status status="PASS" endtime="20210224 15:54:45.706" starttime="20210224 15:54:45.706"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:45.707" level="INFO">${partner_individual_national_registration} = 47269815011</msg>
<status status="PASS" endtime="20210224 15:54:45.707" starttime="20210224 15:54:45.707"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.708" level="INFO">${partner_individual_national_registration} = 47269815011</msg>
<status status="PASS" endtime="20210224 15:54:45.708" starttime="20210224 15:54:45.708"></status>
</kw>
<kw name="Rg" library="FakerLibrary">
<doc>Brazilian RG, return plain numbers.
Check:  https://www.ngmatematica.com/2014/02/como-determinar-o-digito-verificador-do.html</doc>
<assign>
<var>${partner_individual_identity_card}</var>
</assign>
<msg timestamp="20210224 15:54:45.708" level="INFO">${partner_individual_identity_card} = 351746821</msg>
<status status="PASS" endtime="20210224 15:54:45.708" starttime="20210224 15:54:45.708"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_individual_identity_card}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.709" level="INFO">${partner_individual_identity_card} = 351746821</msg>
<status status="PASS" endtime="20210224 15:54:45.709" starttime="20210224 15:54:45.708"></status>
</kw>
<kw name="criar partner individual" library="accreditation_post_partner_individual">
<arguments>
<arg>partner_individual_type=individual</arg>
<arg>partner_individual_name=${partner_individual_name}</arg>
<arg>partner_individual_email=${partner_individual_email}</arg>
<arg>partner_individual_national_registration=${partner_individual_national_registration}</arg>
<arg>partner_individual_revenue=${partner_individual_revenue}</arg>
<arg>partner_individual_birthday=${partner_individual_birthday}</arg>
<arg>partner_individual_mothers_name=${partner_individual_mothers_name}</arg>
<arg>partner_individual_identity_card=${partner_individual_identity_card}</arg>
<arg>partner_individual_pep=false</arg>
<arg>partner_individual_percentage=${partner_individual_percentage}</arg>
<arg>partner_individual_adm=${partner_individual_adm}</arg>
<arg>partner_individual_cbo=${partner_individual_cbo}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:45.710" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:45.710" starttime="20210224 15:54:45.710"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${partner_individual_type}",</arg>
<arg>"name": "${partner_individual_name}",</arg>
<arg>"email": "${partner_individual_email}",</arg>
<arg>"national_registration": "${partner_individual_national_registration}",</arg>
<arg>"revenue": ${partner_individual_revenue},</arg>
<arg>"birthday": "${partner_individual_birthday}",</arg>
<arg>"mothers_name": "${partner_individual_mothers_name}",</arg>
<arg>"identity_card": "${partner_individual_identity_card}",</arg>
<arg>"pep": false,</arg>
<arg>"percentage": ${partner_individual_percentage},</arg>
<arg>"adm": ${partner_individual_adm},</arg>
<arg>"cbo": ${partner_individual_cbo}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:45.711" level="INFO">${body} = { "type": "individual", "name": "Individual Partner de teste", "email": "teste@teste.com.br", "national_registration": "47269815011", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe...</msg>
<status status="PASS" endtime="20210224 15:54:45.711" starttime="20210224 15:54:45.710"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:45.711" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "individual", "name": "Individual Partner de teste", "email": "teste@teste.com.br", "national_registration": "47269815011", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Individual Partner", "identity_card": "351746821", "pep": false, "percentage": 50, "adm": true, "cbo": 821450 } 
json=None</msg>
<msg timestamp="20210224 15:54:45.900" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.900" starttime="20210224 15:54:45.711"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.901" level="INFO">{u'adm': True, u'name': u'Individual Partner de teste', u'mothers_name': u'M\xe3e do Individual Partner', u'revenue': 5500.0, u'cbo': u'821450', u'created_at': u'2021-02-24T15:54:46.87957', u'pep': False, u'updated_at': u'2021-02-24T15:54:46.879572', u'id': u'830b8b90c53c45f68a39cf35b2282c9f', u'identity_card': u'351746821', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/documents', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/addresses', u'type': u'GET'}}, u'national_registration': u'47269815011', u'percentage': 50.0, u'main': True, u'type': u'individual', u'email': u'teste@teste.com.br'}</msg>
<status status="PASS" endtime="20210224 15:54:45.901" starttime="20210224 15:54:45.901"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.901" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:45.902" starttime="20210224 15:54:45.901"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${partner_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:45.902" level="INFO">${partner_external_key} = 830b8b90c53c45f68a39cf35b2282c9f</msg>
<status status="PASS" endtime="20210224 15:54:45.902" starttime="20210224 15:54:45.902"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:45.903" level="INFO">${partner_external_key} = 830b8b90c53c45f68a39cf35b2282c9f</msg>
<status status="PASS" endtime="20210224 15:54:45.903" starttime="20210224 15:54:45.903"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:45.903" starttime="20210224 15:54:45.709"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:45.905" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:46.052" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.052" starttime="20210224 15:54:45.905"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.053" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:45.525836', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:46.053" starttime="20210224 15:54:46.053"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.055" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.055" starttime="20210224 15:54:46.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:46.055" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.055" starttime="20210224 15:54:46.055"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.055" starttime="20210224 15:54:45.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.057" starttime="20210224 15:54:46.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.057" starttime="20210224 15:54:46.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.058" starttime="20210224 15:54:46.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.059" starttime="20210224 15:54:46.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.059" starttime="20210224 15:54:46.059"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.060" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.060" starttime="20210224 15:54:46.059"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.060" starttime="20210224 15:54:46.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.061" starttime="20210224 15:54:46.060"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.061" starttime="20210224 15:54:46.061"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.062" starttime="20210224 15:54:46.062"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.062" starttime="20210224 15:54:46.055"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.062" starttime="20210224 15:54:46.055"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.062" starttime="20210224 15:54:45.705"></status>
</kw>
<kw name="E realizar o cadastro do telefone do sócio" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar partner phone" library="accreditation_post_partner_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996554785</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:46.063" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:46.063" starttime="20210224 15:54:46.063"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:46.064" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996554785" }</msg>
<status status="PASS" endtime="20210224 15:54:46.064" starttime="20210224 15:54:46.063"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/phones/</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:46.064" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/phones/, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996554785" } 
json=None</msg>
<msg timestamp="20210224 15:54:46.324" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.324" starttime="20210224 15:54:46.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.325" level="INFO">{u'area_code': u'21', u'number': u'996554785', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/phones/f3141bff647a45b79a5003729996b17e', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'f3141bff647a45b79a5003729996b17e'}</msg>
<status status="PASS" endtime="20210224 15:54:46.325" starttime="20210224 15:54:46.325"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.326" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.326" starttime="20210224 15:54:46.325"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:46.327" level="INFO">${holder_external_key} = f3141bff647a45b79a5003729996b17e</msg>
<status status="PASS" endtime="20210224 15:54:46.327" starttime="20210224 15:54:46.326"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.327" level="INFO">${phone_external_key} = 33034a0a086a4f4cbe7d3b9fc4750f97</msg>
<status status="PASS" endtime="20210224 15:54:46.327" starttime="20210224 15:54:46.327"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.327" starttime="20210224 15:54:46.063"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:46.328" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:46.474" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.474" starttime="20210224 15:54:46.328"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.475" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:45.525836', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:46.475" starttime="20210224 15:54:46.474"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.476" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.476" starttime="20210224 15:54:46.475"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:46.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.477" starttime="20210224 15:54:46.476"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.477" starttime="20210224 15:54:46.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.479" starttime="20210224 15:54:46.478"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.479" starttime="20210224 15:54:46.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.481" starttime="20210224 15:54:46.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.481" starttime="20210224 15:54:46.481"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.481" starttime="20210224 15:54:46.481"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.482" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.482" starttime="20210224 15:54:46.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.483" starttime="20210224 15:54:46.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.484" starttime="20210224 15:54:46.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.485" starttime="20210224 15:54:46.485"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.485" starttime="20210224 15:54:46.485"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.485" starttime="20210224 15:54:46.478"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.485" starttime="20210224 15:54:46.477"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.485" starttime="20210224 15:54:46.062"></status>
</kw>
<kw name="E realizar o cadastro do endereço do sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
</arguments>
<kw name="criar partner address" library="accreditation_post_partner_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>61</arg>
<arg>apto 201</arg>
<arg>21550478</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:46.487" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:46.487" starttime="20210224 15:54:46.487"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:46.488" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:46.488" starttime="20210224 15:54:46.487"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:46.488" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "21550478" } 
json=None</msg>
<msg timestamp="20210224 15:54:46.671" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.671" starttime="20210224 15:54:46.488"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.671" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 201', u'number': u'61', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550478', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/addresses/377a85b7abaa4a039f688a797781c372', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}}, u'main': True, u'id': u'377a85b7abaa4a039f688a797781c372'}</msg>
<status status="PASS" endtime="20210224 15:54:46.671" starttime="20210224 15:54:46.671"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.672" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.672" starttime="20210224 15:54:46.672"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:46.673" level="INFO">${address_external_key} = 377a85b7abaa4a039f688a797781c372</msg>
<status status="PASS" endtime="20210224 15:54:46.673" starttime="20210224 15:54:46.672"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.674" level="INFO">${address_external_key} = 377a85b7abaa4a039f688a797781c372</msg>
<status status="PASS" endtime="20210224 15:54:46.674" starttime="20210224 15:54:46.673"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.674" starttime="20210224 15:54:46.487"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:46.675" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:46.821" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.821" starttime="20210224 15:54:46.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.823" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:47.691429', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:46.823" starttime="20210224 15:54:46.822"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.825" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.825" starttime="20210224 15:54:46.823"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:46.825" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.825" starttime="20210224 15:54:46.825"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.825" starttime="20210224 15:54:46.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.828" starttime="20210224 15:54:46.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.828" starttime="20210224 15:54:46.828"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.829" starttime="20210224 15:54:46.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.830" starttime="20210224 15:54:46.829"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.831" starttime="20210224 15:54:46.830"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:46.831" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:46.831" starttime="20210224 15:54:46.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.832" starttime="20210224 15:54:46.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.833" starttime="20210224 15:54:46.832"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.834" starttime="20210224 15:54:46.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:46.834" starttime="20210224 15:54:46.834"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.834" starttime="20210224 15:54:46.827"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.835" starttime="20210224 15:54:46.826"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:46.835" starttime="20210224 15:54:46.485"></status>
</kw>
<kw name="E realizar o cadastro da Selfie do Sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>SELFIE</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:46.836" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:46.836" starttime="20210224 15:54:46.836"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:46.837" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:46.839" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:46.839" starttime="20210224 15:54:46.836"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:46.840" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/documents?type=SELFIE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:47.075" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.075" starttime="20210224 15:54:46.840"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.076" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'selfie', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/documents/67f97fb5e27148c98209a78105d5570b/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/documents/67f97fb5e27148c98209a78105d5570b', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}}, u'id': u'67f97fb5e27148c98209a78105d5570b'}</msg>
<status status="PASS" endtime="20210224 15:54:47.076" starttime="20210224 15:54:47.076"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.077" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.077" starttime="20210224 15:54:47.077"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:47.078" level="INFO">${document_external_key} = 67f97fb5e27148c98209a78105d5570b</msg>
<status status="PASS" endtime="20210224 15:54:47.078" starttime="20210224 15:54:47.078"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.079" level="INFO">${document_external_key} = 67f97fb5e27148c98209a78105d5570b</msg>
<status status="PASS" endtime="20210224 15:54:47.079" starttime="20210224 15:54:47.079"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:47.079" starttime="20210224 15:54:46.835"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:47.081" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:47.224" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.224" starttime="20210224 15:54:47.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.225" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:47.691429', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:47.225" starttime="20210224 15:54:47.225"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.226" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.226" starttime="20210224 15:54:47.226"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:47.227" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.227" starttime="20210224 15:54:47.226"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:47.227" starttime="20210224 15:54:47.080"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.229" starttime="20210224 15:54:47.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.230" starttime="20210224 15:54:47.229"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.230" starttime="20210224 15:54:47.230"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.231" starttime="20210224 15:54:47.231"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.233" starttime="20210224 15:54:47.231"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.233" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.233" starttime="20210224 15:54:47.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.233" starttime="20210224 15:54:47.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.234" starttime="20210224 15:54:47.233"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.235" starttime="20210224 15:54:47.234"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.235" starttime="20210224 15:54:47.235"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:47.235" starttime="20210224 15:54:47.228"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:47.235" starttime="20210224 15:54:47.227"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:47.236" starttime="20210224 15:54:46.835"></status>
</kw>
<kw name="E realizar o cadastro da frente do RG do sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>RG_FRENTE</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:47.237" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:47.237" starttime="20210224 15:54:47.237"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:47.237" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:47.240" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:47.240" starttime="20210224 15:54:47.237"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:47.240" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/documents?type=RG_FRENTE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:47.506" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.507" starttime="20210224 15:54:47.240"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.508" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_frente', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/documents/0880206fb0f14c53a930b1fb3b3c9224/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/documents/0880206fb0f14c53a930b1fb3b3c9224', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}}, u'id': u'0880206fb0f14c53a930b1fb3b3c9224'}</msg>
<status status="PASS" endtime="20210224 15:54:47.508" starttime="20210224 15:54:47.507"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.509" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.509" starttime="20210224 15:54:47.508"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:47.510" level="INFO">${document_external_key} = 0880206fb0f14c53a930b1fb3b3c9224</msg>
<status status="PASS" endtime="20210224 15:54:47.510" starttime="20210224 15:54:47.509"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.510" level="INFO">${document_external_key} = 0880206fb0f14c53a930b1fb3b3c9224</msg>
<status status="PASS" endtime="20210224 15:54:47.510" starttime="20210224 15:54:47.510"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:47.510" starttime="20210224 15:54:47.236"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:47.511" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:47.660" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.660" starttime="20210224 15:54:47.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.661" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:47.691429', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:47.661" starttime="20210224 15:54:47.660"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.662" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.662" starttime="20210224 15:54:47.661"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:47.663" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.663" starttime="20210224 15:54:47.662"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:47.663" starttime="20210224 15:54:47.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.665" starttime="20210224 15:54:47.664"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.666" starttime="20210224 15:54:47.665"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.666" starttime="20210224 15:54:47.666"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.667" starttime="20210224 15:54:47.667"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.668" starttime="20210224 15:54:47.667"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.669" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.669" starttime="20210224 15:54:47.668"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.669" starttime="20210224 15:54:47.669"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.671" starttime="20210224 15:54:47.670"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.671" starttime="20210224 15:54:47.671"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:47.672" starttime="20210224 15:54:47.671"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:47.672" starttime="20210224 15:54:47.664"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:47.672" starttime="20210224 15:54:47.663"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:47.672" starttime="20210224 15:54:47.236"></status>
</kw>
<kw name="E realizar o cadastro do verso do RG do sócio" library="steps">
<arguments>
<arg>ready_for_analysis</arg>
<arg>RG_VERSO</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:47.674" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:47.674" starttime="20210224 15:54:47.673"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:47.674" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:47.676" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:47.676" starttime="20210224 15:54:47.674"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:47.677" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/documents?type=RG_VERSO, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:47.894" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.894" starttime="20210224 15:54:47.677"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.894" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_verso', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/documents/3a930a119470417ebad17b9372384360/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/830b8b90c53c45f68a39cf35b2282c9f/documents/3a930a119470417ebad17b9372384360', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}}, u'id': u'3a930a119470417ebad17b9372384360'}</msg>
<status status="PASS" endtime="20210224 15:54:47.894" starttime="20210224 15:54:47.894"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.895" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:47.895" starttime="20210224 15:54:47.895"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:47.896" level="INFO">${document_external_key} = 3a930a119470417ebad17b9372384360</msg>
<status status="PASS" endtime="20210224 15:54:47.897" starttime="20210224 15:54:47.895"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:47.897" level="INFO">${document_external_key} = 3a930a119470417ebad17b9372384360</msg>
<status status="PASS" endtime="20210224 15:54:47.897" starttime="20210224 15:54:47.897"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:47.897" starttime="20210224 15:54:47.673"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:47.897" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:48.043" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.044" starttime="20210224 15:54:47.897"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.045" level="INFO">{u'status': u'ready_for_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:48.89351', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:48.045" starttime="20210224 15:54:48.044"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.046" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.046" starttime="20210224 15:54:48.045"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:48.047" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.047" starttime="20210224 15:54:48.046"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.047" starttime="20210224 15:54:47.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.050" starttime="20210224 15:54:48.049"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.051" starttime="20210224 15:54:48.050"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.053" starttime="20210224 15:54:48.051"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.053" starttime="20210224 15:54:48.053"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.054" starttime="20210224 15:54:48.053"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.056" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.056" starttime="20210224 15:54:48.054"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.057" starttime="20210224 15:54:48.056"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.058" starttime="20210224 15:54:48.057"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.059" starttime="20210224 15:54:48.058"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.060" starttime="20210224 15:54:48.059"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.060" starttime="20210224 15:54:48.048"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.060" starttime="20210224 15:54:48.047"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.060" starttime="20210224 15:54:47.672"></status>
</kw>
<kw name="E realizar o cadastro de um sócio pessoal jurídica" library="steps">
<arguments>
<arg>waiting_info</arg>
<arg>mei</arg>
<arg>50</arg>
<arg>false</arg>
</arguments>
<kw name="Cnpj" library="FakerLibrary">
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:48.061" level="INFO">${partner_business_national_registration} = 79.634.081/0001-31</msg>
<status status="PASS" endtime="20210224 15:54:48.062" starttime="20210224 15:54:48.061"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:48.062" level="INFO">${partner_business_national_registration} = 79634081/0001-31</msg>
<status status="PASS" endtime="20210224 15:54:48.062" starttime="20210224 15:54:48.062"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:48.063" level="INFO">${partner_business_national_registration} = 79634081/000131</msg>
<status status="PASS" endtime="20210224 15:54:48.063" starttime="20210224 15:54:48.063"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>/</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:48.064" level="INFO">${partner_business_national_registration} = 79634081000131</msg>
<status status="PASS" endtime="20210224 15:54:48.064" starttime="20210224 15:54:48.063"></status>
</kw>
<kw name="criar partner business" library="accreditation_post_partner_business">
<arguments>
<arg>partner_business_type=business</arg>
<arg>partner_holder_name=${partner_holder_name}</arg>
<arg>partner_business_email=${partner_business_email}</arg>
<arg>partner_business_national_registration=${partner_business_national_registration}</arg>
<arg>partner_business_revenue=${partner_business_revenue}</arg>
<arg>partner_business_cnae=${partner_business_cnae}</arg>
<arg>partner_business_legal_name=${partner_business_legal_name}</arg>
<arg>partner_business_adm=${partner_business_adm}</arg>
<arg>partner_business_percentage=${partner_business_percentage}</arg>
<arg>partner_business_establishment_format=${partner_business_establishment_format}</arg>
<arg>partner_business_establishment_date=${partner_business_establishment_date}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:48.066" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:48.066" starttime="20210224 15:54:48.066"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${partner_business_type}",</arg>
<arg>"name": "${partner_holder_name}",</arg>
<arg>"email": "${partner_business_email}",</arg>
<arg>"national_registration": "${partner_business_national_registration}",</arg>
<arg>"revenue": ${partner_business_revenue},</arg>
<arg>"cnae": "${partner_business_cnae}",</arg>
<arg>"legal_name": "${partner_business_legal_name}",</arg>
<arg>"adm": ${partner_business_adm},</arg>
<arg>"percentage": ${partner_business_percentage},</arg>
<arg>"establishment": {</arg>
<arg>"format":"${partner_business_establishment_format}",</arg>
<arg>"date":"${partner_business_establishment_date}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:48.068" level="INFO">${body} = { "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "79634081000131", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Part...</msg>
<status status="PASS" endtime="20210224 15:54:48.068" starttime="20210224 15:54:48.066"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:48.069" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "79634081000131", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Partner Legal Name", "adm": false, "percentage": 50, "establishment": { "format":"mei", "date":"1988-04-23" } } 
json=None</msg>
<msg timestamp="20210224 15:54:48.265" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.265" starttime="20210224 15:54:48.068"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.266" level="INFO">{ "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "79634081000131", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Partner Legal Name", "adm": false, "percentage": 50, "establishment": { "format":"mei", "date":"1988-04-23" } }</msg>
<status status="PASS" endtime="20210224 15:54:48.266" starttime="20210224 15:54:48.265"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.266" level="INFO">{u'legal_name': u'Business Partner Legal Name', u'adm': False, u'name': u'Business Partner de teste', u'cnae': u'0111301', u'revenue': 5500.0, u'establishment': {u'date': u'1988-04-23', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:49.239136', u'updated_at': u'2021-02-24T15:54:49.239137', u'id': u'ea8a9316026a4b4c8fbcbe8c82e287f5', u'_links': {u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/ea8a9316026a4b4c8fbcbe8c82e287f5/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/ea8a9316026a4b4c8fbcbe8c82e287f5/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/ea8a9316026a4b4c8fbcbe8c82e287f5/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/ea8a9316026a4b4c8fbcbe8c82e287f5', u'type': u'GET'}, u'adm': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/ea8a9316026a4b4c8fbcbe8c82e287f5/adm', u'type': u'PUT'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}}, u'national_registration': u'79634081000131', u'percentage': 50.0, u'main': True, u'type': u'business', u'email': u'teste@teste.com.br'}</msg>
<status status="PASS" endtime="20210224 15:54:48.266" starttime="20210224 15:54:48.266"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.268" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.268" starttime="20210224 15:54:48.268"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${partner_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:48.268" level="INFO">${partner_external_key} = ea8a9316026a4b4c8fbcbe8c82e287f5</msg>
<status status="PASS" endtime="20210224 15:54:48.268" starttime="20210224 15:54:48.268"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.269" level="INFO">${partner_external_key} = ea8a9316026a4b4c8fbcbe8c82e287f5</msg>
<status status="PASS" endtime="20210224 15:54:48.270" starttime="20210224 15:54:48.268"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.270" starttime="20210224 15:54:48.064"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.270" starttime="20210224 15:54:48.061"></status>
</kw>
<kw name="E realizar o cadastro do telefone do sócio" library="steps">
<arguments>
<arg>waiting_info</arg>
</arguments>
<kw name="criar partner phone" library="accreditation_post_partner_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996554785</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:48.270" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:48.270" starttime="20210224 15:54:48.270"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:48.272" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996554785" }</msg>
<status status="PASS" endtime="20210224 15:54:48.272" starttime="20210224 15:54:48.271"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/phones/</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:48.272" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/ea8a9316026a4b4c8fbcbe8c82e287f5/phones/, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996554785" } 
json=None</msg>
<msg timestamp="20210224 15:54:48.456" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.456" starttime="20210224 15:54:48.272"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.458" level="INFO">{u'area_code': u'21', u'number': u'996554785', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/ea8a9316026a4b4c8fbcbe8c82e287f5', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/ea8a9316026a4b4c8fbcbe8c82e287f5/phones/5d3894dbc3b94acfbbdfb0bb8081c525', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'5d3894dbc3b94acfbbdfb0bb8081c525'}</msg>
<status status="PASS" endtime="20210224 15:54:48.458" starttime="20210224 15:54:48.456"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.458" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.458" starttime="20210224 15:54:48.458"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:48.459" level="INFO">${holder_external_key} = 5d3894dbc3b94acfbbdfb0bb8081c525</msg>
<status status="PASS" endtime="20210224 15:54:48.459" starttime="20210224 15:54:48.458"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.459" level="INFO">${phone_external_key} = 33034a0a086a4f4cbe7d3b9fc4750f97</msg>
<status status="PASS" endtime="20210224 15:54:48.459" starttime="20210224 15:54:48.459"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.460" starttime="20210224 15:54:48.270"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:48.461" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:48.607" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.607" starttime="20210224 15:54:48.461"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.608" level="INFO">{u'status': u'waiting_info', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:49.258772', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:48.608" starttime="20210224 15:54:48.608"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.609" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.609" starttime="20210224 15:54:48.609"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:48.609" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.609" starttime="20210224 15:54:48.609"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.610" starttime="20210224 15:54:48.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.611" starttime="20210224 15:54:48.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.612" starttime="20210224 15:54:48.611"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.613" starttime="20210224 15:54:48.612"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.613" starttime="20210224 15:54:48.613"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.614" starttime="20210224 15:54:48.614"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.615" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.615" starttime="20210224 15:54:48.614"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.616" starttime="20210224 15:54:48.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.616" starttime="20210224 15:54:48.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.617" starttime="20210224 15:54:48.616"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.618" starttime="20210224 15:54:48.618"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.618" starttime="20210224 15:54:48.610"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.618" starttime="20210224 15:54:48.610"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.618" starttime="20210224 15:54:48.270"></status>
</kw>
<kw name="E realizar o cadastro do endereço do sócio" library="steps">
<arguments>
<arg>ready_for_analysis</arg>
</arguments>
<kw name="criar partner address" library="accreditation_post_partner_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>61</arg>
<arg>apto 201</arg>
<arg>21550478</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:48.619" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:48.619" starttime="20210224 15:54:48.619"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:48.620" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:48.620" starttime="20210224 15:54:48.619"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:48.621" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/ea8a9316026a4b4c8fbcbe8c82e287f5/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "21550478" } 
json=None</msg>
<msg timestamp="20210224 15:54:48.800" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.800" starttime="20210224 15:54:48.620"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.801" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 201', u'number': u'61', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550478', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/ea8a9316026a4b4c8fbcbe8c82e287f5', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners/ea8a9316026a4b4c8fbcbe8c82e287f5/addresses/6110808367a64eaab585522588c0244e', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}}, u'main': True, u'id': u'6110808367a64eaab585522588c0244e'}</msg>
<status status="PASS" endtime="20210224 15:54:48.801" starttime="20210224 15:54:48.800"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.801" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.801" starttime="20210224 15:54:48.801"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:48.802" level="INFO">${address_external_key} = 6110808367a64eaab585522588c0244e</msg>
<status status="PASS" endtime="20210224 15:54:48.802" starttime="20210224 15:54:48.802"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.803" level="INFO">${address_external_key} = 6110808367a64eaab585522588c0244e</msg>
<status status="PASS" endtime="20210224 15:54:48.803" starttime="20210224 15:54:48.802"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.803" starttime="20210224 15:54:48.618"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:48.804" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:48.949" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.949" starttime="20210224 15:54:48.804"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.951" level="INFO">{u'status': u'ready_for_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:49.818964', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:48.951" starttime="20210224 15:54:48.949"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.951" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.951" starttime="20210224 15:54:48.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:48.951" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.951" starttime="20210224 15:54:48.951"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.951" starttime="20210224 15:54:48.803"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.953" starttime="20210224 15:54:48.952"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.955" starttime="20210224 15:54:48.953"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.955" starttime="20210224 15:54:48.955"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.955" starttime="20210224 15:54:48.955"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.957" starttime="20210224 15:54:48.955"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:48.957" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:48.957" starttime="20210224 15:54:48.957"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.958" starttime="20210224 15:54:48.957"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.959" starttime="20210224 15:54:48.958"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.959" starttime="20210224 15:54:48.959"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:48.960" starttime="20210224 15:54:48.960"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.960" starttime="20210224 15:54:48.952"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.960" starttime="20210224 15:54:48.951"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:48.960" starttime="20210224 15:54:48.618"></status>
</kw>
<kw name="E realizar a solicitação da aprovação do meu cadastro" library="steps">
<arguments>
<arg>waiting_analysis</arg>
</arguments>
<kw name="solicitar aprovação do holder" library="accreditation_request_approval">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:48.962" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:48.962" starttime="20210224 15:54:48.961"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/approval</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:48.962" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:49.166" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.166" starttime="20210224 15:54:48.962"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.168" level="INFO">{u'message': u'Approval request accepted successfully. Processing analysis'}</msg>
<status status="PASS" endtime="20210224 15:54:49.168" starttime="20210224 15:54:49.168"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.169" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.169" starttime="20210224 15:54:49.169"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.170" starttime="20210224 15:54:48.961"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:49.170" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.170" starttime="20210224 15:54:49.170"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:49.171" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:49.314" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.314" starttime="20210224 15:54:49.170"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.314" level="INFO">{u'status': u'waiting_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:50.136979', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:49.315" starttime="20210224 15:54:49.314"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.315" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.315" starttime="20210224 15:54:49.315"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:49.315" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.316" starttime="20210224 15:54:49.315"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.316" starttime="20210224 15:54:49.170"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.318" starttime="20210224 15:54:49.317"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.318" starttime="20210224 15:54:49.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.318" starttime="20210224 15:54:49.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.319" starttime="20210224 15:54:49.318"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.319" starttime="20210224 15:54:49.319"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.320" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.320" starttime="20210224 15:54:49.319"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.320" starttime="20210224 15:54:49.320"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.321" starttime="20210224 15:54:49.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.321" starttime="20210224 15:54:49.321"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.322" starttime="20210224 15:54:49.322"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.322" starttime="20210224 15:54:49.317"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.322" starttime="20210224 15:54:49.316"></status>
</kw>
<kw name="recebendo notificação de aprovação" library="accreditation_risk_notification">
<kw name="Uuid 4" library="FakerLibrary">
<doc>Generates a random UUID4 string.
:param cast_to: Specify what type the UUID should be cast to. Default is `str`
:type cast_to: callable</doc>
<assign>
<var>${assessment_id}</var>
</assign>
<msg timestamp="20210224 15:54:49.323" level="INFO">${assessment_id} = 1fa8329e-9c1d-43cd-bdd8-d359be98ccd2</msg>
<status status="PASS" endtime="20210224 15:54:49.323" starttime="20210224 15:54:49.323"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year</arg>
</arguments>
<assign>
<var>${year}</var>
</assign>
<msg timestamp="20210224 15:54:49.324" level="INFO">${year} = 2021</msg>
<status status="PASS" endtime="20210224 15:54:49.324" starttime="20210224 15:54:49.323"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>month</arg>
</arguments>
<assign>
<var>${month}</var>
</assign>
<msg timestamp="20210224 15:54:49.324" level="INFO">${month} = 02</msg>
<status status="PASS" endtime="20210224 15:54:49.325" starttime="20210224 15:54:49.324"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>day</arg>
</arguments>
<assign>
<var>${day}</var>
</assign>
<msg timestamp="20210224 15:54:49.325" level="INFO">${day} = 24</msg>
<status status="PASS" endtime="20210224 15:54:49.325" starttime="20210224 15:54:49.325"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:49.326" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:49.326" starttime="20210224 15:54:49.325"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "risk.assessment.result",</arg>
<arg>"resource": "business.holder",</arg>
<arg>"created_at": "${year}-${month}-${day} 15:28:56.747Z",</arg>
<arg>"marketplace_id": "${marketplace_external_key}",</arg>
<arg>"object": {</arg>
<arg>"result": "APPROVED",</arg>
<arg>"holder_id": "${holder_external_key}",</arg>
<arg>"applicant_id": "${application_external_key}",</arg>
<arg>"assessment_id": "${assessment_id}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:49.326" level="INFO">${body} = { "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "ho...</msg>
<status status="PASS" endtime="20210224 15:54:49.327" starttime="20210224 15:54:49.326"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/admin/internal_operation/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/registration/approval</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:49.327" level="INFO">POST Request using : uri=/admin/internal_operation/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/registration/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "holder_id": "2c50aef350054e2f87a9c72ad681a0ea", "applicant_id": "bcc25a6751c14b52af1340d40dba78c5", "assessment_id": "1fa8329e-9c1d-43cd-bdd8-d359be98ccd2" } } 
json=None</msg>
<msg timestamp="20210224 15:54:49.520" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.520" starttime="20210224 15:54:49.327"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.521" level="INFO">{u'message': u'Holder approved successfully'}</msg>
<status status="PASS" endtime="20210224 15:54:49.521" starttime="20210224 15:54:49.520"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.521" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.521" starttime="20210224 15:54:49.521"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:49.522" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.522" starttime="20210224 15:54:49.522"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.522" starttime="20210224 15:54:49.322"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.522" starttime="20210224 15:54:48.961"></status>
</kw>
<kw name="Então o sistema deverá realizar o meu cadastro com sucesso" library="steps">
<arguments>
<arg>active</arg>
</arguments>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:49.524" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:49.670" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.670" starttime="20210224 15:54:49.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.671" level="INFO">{u'status': u'active', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'eireli'}, u'created_at': u'2021-02-24T15:54:45.525834', u'updated_at': u'2021-02-24T15:54:50.500015', u'id': u'2c50aef350054e2f87a9c72ad681a0ea', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/2c50aef350054e2f87a9c72ad681a0ea/associates', u'type': u'GET'}}, u'national_registration': u'71386495000187', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:49.671" starttime="20210224 15:54:49.671"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.672" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.672" starttime="20210224 15:54:49.672"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:49.674" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.674" starttime="20210224 15:54:49.673"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.674" starttime="20210224 15:54:49.523"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.677" starttime="20210224 15:54:49.676"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.677" starttime="20210224 15:54:49.677"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.678" starttime="20210224 15:54:49.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.679" starttime="20210224 15:54:49.678"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.680" starttime="20210224 15:54:49.679"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.682" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:49.682" starttime="20210224 15:54:49.680"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.682" starttime="20210224 15:54:49.682"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.682" starttime="20210224 15:54:49.682"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.684" starttime="20210224 15:54:49.684"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:49.684" starttime="20210224 15:54:49.684"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.684" starttime="20210224 15:54:49.676"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.684" starttime="20210224 15:54:49.675"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.684" starttime="20210224 15:54:49.522"></status>
</kw>
<tags>
<tag>regression_test</tag>
<tag>smoke_test</tag>
</tags>
<status status="PASS" endtime="20210224 15:54:49.685" critical="yes" starttime="20210224 15:54:43.887"></status>
</test>
<test id="s1-s1-s1-s1-t5" name="Cenário: Criar Holder Business LTDA">
<kw name="Dado que eu deseje me cadastrar como holder em Banking" library="steps">
<kw name="conectar accreditation" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accreditation</arg>
<arg>url=${accreditation_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210224 15:54:49.687" level="INFO">Creating Session using : alias=accreditation, url=https://banking-accreditation-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20210224 15:54:49.687" starttime="20210224 15:54:49.686"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.687" starttime="20210224 15:54:49.686"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:49.687" starttime="20210224 15:54:49.686"></status>
</kw>
<kw name="Quando eu preencher todos os dados necessários para o cadastro do holder business" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>ltda</arg>
</arguments>
<kw name="Cnpj" library="FakerLibrary">
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:49.688" level="INFO">${national_registration} = 61.894.052/0001-43</msg>
<status status="PASS" endtime="20210224 15:54:49.688" starttime="20210224 15:54:49.688"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:49.689" level="INFO">${national_registration} = 61894052/0001-43</msg>
<status status="PASS" endtime="20210224 15:54:49.689" starttime="20210224 15:54:49.688"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:49.690" level="INFO">${national_registration} = 61894052/000143</msg>
<status status="PASS" endtime="20210224 15:54:49.690" starttime="20210224 15:54:49.689"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>/</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:49.691" level="INFO">${national_registration} = 61894052000143</msg>
<status status="PASS" endtime="20210224 15:54:49.691" starttime="20210224 15:54:49.690"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${national_registration}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.691" level="INFO">${national_registration} = 61894052000143</msg>
<status status="PASS" endtime="20210224 15:54:49.691" starttime="20210224 15:54:49.691"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${establishment_format}</arg>
</arguments>
<msg timestamp="20210224 15:54:49.692" level="INFO">${establishment_format} = ltda</msg>
<status status="PASS" endtime="20210224 15:54:49.692" starttime="20210224 15:54:49.692"></status>
</kw>
<kw name="criar holder business" library="accreditation_post_holder_business">
<arguments>
<arg>holder_type=business</arg>
<arg>holder_name=${holder_name}</arg>
<arg>email_business=${email_business}</arg>
<arg>national_registration=${national_registration}</arg>
<arg>revenue_business=${revenue_business}</arg>
<arg>cnae=${cnae}</arg>
<arg>legal_name=${legal_name}</arg>
<arg>establishment_format=${establishment_format}</arg>
<arg>establishment_date=${establishment_date}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:49.694" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:49.694" starttime="20210224 15:54:49.693"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${holder_type}",</arg>
<arg>"name": "${holder_name}",</arg>
<arg>"email": "${email_business}",</arg>
<arg>"national_registration": "${national_registration}",</arg>
<arg>"revenue": ${revenue_business},</arg>
<arg>"cnae": "${cnae}",</arg>
<arg>"legal_name": "${legal_name}",</arg>
<arg>"establishment": {</arg>
<arg>"format":"${establishment_format}",</arg>
<arg>"date":"${establishment_date}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:49.695" level="INFO">${body} = { "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "61894052000143", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Emp...</msg>
<status status="PASS" endtime="20210224 15:54:49.695" starttime="20210224 15:54:49.694"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:49.696" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "61894052000143", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Empresa", "establishment": { "format":"ltda", "date":"2012-04-25" } } 
json=None</msg>
<msg timestamp="20210224 15:54:50.335" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:50.336" starttime="20210224 15:54:49.695"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.336" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:51.323957', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:50.337" starttime="20210224 15:54:50.336"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.337" level="INFO">{ "type": "business", "name": "Empresa do Teste", "email": "contato@teste.com.br", "national_registration": "61894052000143", "revenue": 1005500.00, "cnae": "0111301", "legal_name": "Nome Legal da Empresa", "establishment": { "format":"ltda", "date":"2012-04-25" } }</msg>
<status status="PASS" endtime="20210224 15:54:50.337" starttime="20210224 15:54:50.337"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.338" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:50.338" starttime="20210224 15:54:50.337"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:50.339" level="INFO">${holder_external_key} = 8832ef3e253249aebb5d4821c0713452</msg>
<status status="PASS" endtime="20210224 15:54:50.339" starttime="20210224 15:54:50.338"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.340" level="INFO">${holder_external_key} = 8832ef3e253249aebb5d4821c0713452</msg>
<status status="PASS" endtime="20210224 15:54:50.340" starttime="20210224 15:54:50.340"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:50.340" starttime="20210224 15:54:49.692"></status>
</kw>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.342" starttime="20210224 15:54:50.341"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.343" starttime="20210224 15:54:50.342"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.344" starttime="20210224 15:54:50.343"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.344" starttime="20210224 15:54:50.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.345" starttime="20210224 15:54:50.345"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.346" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:50.346" starttime="20210224 15:54:50.345"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.346" starttime="20210224 15:54:50.346"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.347" starttime="20210224 15:54:50.347"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.349" starttime="20210224 15:54:50.348"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.349" starttime="20210224 15:54:50.349"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:50.349" starttime="20210224 15:54:50.341"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:50.349" starttime="20210224 15:54:49.688"></status>
</kw>
<kw name="E realizar o cadastro do meu telefone" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar holder phone" library="accreditation_post_holder_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996221236</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:50.351" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:50.351" starttime="20210224 15:54:50.350"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:50.351" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996221236" }</msg>
<status status="PASS" endtime="20210224 15:54:50.351" starttime="20210224 15:54:50.351"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/phones</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:50.352" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996221236" } 
json=None</msg>
<msg timestamp="20210224 15:54:50.531" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:50.531" starttime="20210224 15:54:50.351"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.531" level="INFO">{u'area_code': u'21', u'number': u'996221236', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones/06a7ab303521418ca6e8d001c180c6b3', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'06a7ab303521418ca6e8d001c180c6b3'}</msg>
<status status="PASS" endtime="20210224 15:54:50.531" starttime="20210224 15:54:50.531"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.532" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:50.532" starttime="20210224 15:54:50.532"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${phone_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:50.533" level="INFO">${phone_external_key} = 06a7ab303521418ca6e8d001c180c6b3</msg>
<status status="PASS" endtime="20210224 15:54:50.533" starttime="20210224 15:54:50.532"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.533" level="INFO">${phone_external_key} = 06a7ab303521418ca6e8d001c180c6b3</msg>
<status status="PASS" endtime="20210224 15:54:50.533" starttime="20210224 15:54:50.533"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:50.533" starttime="20210224 15:54:50.349"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:50.534" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:50.684" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:50.684" starttime="20210224 15:54:50.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.685" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:51.323957', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:50.686" starttime="20210224 15:54:50.685"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.686" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:50.686" starttime="20210224 15:54:50.686"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:50.687" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:50.687" starttime="20210224 15:54:50.687"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:50.687" starttime="20210224 15:54:50.534"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.690" starttime="20210224 15:54:50.689"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.691" starttime="20210224 15:54:50.690"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.692" starttime="20210224 15:54:50.691"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.692" starttime="20210224 15:54:50.692"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.693" starttime="20210224 15:54:50.693"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.694" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:50.694" starttime="20210224 15:54:50.693"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.695" starttime="20210224 15:54:50.694"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.695" starttime="20210224 15:54:50.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.696" starttime="20210224 15:54:50.695"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:50.697" starttime="20210224 15:54:50.696"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:50.697" starttime="20210224 15:54:50.688"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:50.697" starttime="20210224 15:54:50.688"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:50.697" starttime="20210224 15:54:50.349"></status>
</kw>
<kw name="E realizar o cadastro do meu endereço" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar holder address" library="accreditation_post_holder_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>90</arg>
<arg>apto 200</arg>
<arg>21550987</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:50.698" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:50.698" starttime="20210224 15:54:50.698"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:50.699" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:50.699" starttime="20210224 15:54:50.698"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:50.700" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "21550987" } 
json=None</msg>
<msg timestamp="20210224 15:54:50.882" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:50.882" starttime="20210224 15:54:50.699"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.883" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 200', u'number': u'90', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550987', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses/9f94d410686c4d0aa0f0911b3fc68953', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}}, u'main': True, u'id': u'9f94d410686c4d0aa0f0911b3fc68953'}</msg>
<status status="PASS" endtime="20210224 15:54:50.883" starttime="20210224 15:54:50.882"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.883" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:50.883" starttime="20210224 15:54:50.883"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:50.884" level="INFO">${address_external_key} = 9f94d410686c4d0aa0f0911b3fc68953</msg>
<status status="PASS" endtime="20210224 15:54:50.884" starttime="20210224 15:54:50.884"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:50.885" level="INFO">${address_external_key} = 9f94d410686c4d0aa0f0911b3fc68953</msg>
<status status="PASS" endtime="20210224 15:54:50.885" starttime="20210224 15:54:50.884"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:50.885" starttime="20210224 15:54:50.697"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:50.886" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:51.032" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.032" starttime="20210224 15:54:50.886"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.033" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:51.323957', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:51.033" starttime="20210224 15:54:51.032"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.033" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.034" starttime="20210224 15:54:51.033"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:51.034" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.034" starttime="20210224 15:54:51.034"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:51.034" starttime="20210224 15:54:50.885"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.037" starttime="20210224 15:54:51.036"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.039" starttime="20210224 15:54:51.037"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.040" starttime="20210224 15:54:51.039"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.040" starttime="20210224 15:54:51.040"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.041" starttime="20210224 15:54:51.041"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.042" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.042" starttime="20210224 15:54:51.041"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.044" starttime="20210224 15:54:51.042"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.044" starttime="20210224 15:54:51.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.044" starttime="20210224 15:54:51.044"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.045" starttime="20210224 15:54:51.045"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:51.045" starttime="20210224 15:54:51.036"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:51.045" starttime="20210224 15:54:51.035"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:51.045" starttime="20210224 15:54:50.697"></status>
</kw>
<kw name="E realizar o cadastro do documento" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>PAGINA_CONTRATO_SOCIAL</arg>
</arguments>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:51.047" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:51.047" starttime="20210224 15:54:51.046"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:51.048" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:51.050" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:51.050" starttime="20210224 15:54:51.047"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:51.051" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents?type=PAGINA_CONTRATO_SOCIAL, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:51.478" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.478" starttime="20210224 15:54:51.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.478" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'pagina_contrato_social', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents/9e31d4b127934642bb662032ac1fcae3/download', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents/9e31d4b127934642bb662032ac1fcae3', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}}, u'id': u'9e31d4b127934642bb662032ac1fcae3'}</msg>
<status status="PASS" endtime="20210224 15:54:51.479" starttime="20210224 15:54:51.478"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.479" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.479" starttime="20210224 15:54:51.479"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:51.480" level="INFO">${document_external_key} = 9e31d4b127934642bb662032ac1fcae3</msg>
<status status="PASS" endtime="20210224 15:54:51.480" starttime="20210224 15:54:51.479"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.481" level="INFO">${document_external_key} = 9e31d4b127934642bb662032ac1fcae3</msg>
<status status="PASS" endtime="20210224 15:54:51.481" starttime="20210224 15:54:51.480"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:51.481" starttime="20210224 15:54:51.046"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:51.482" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:51.628" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.629" starttime="20210224 15:54:51.481"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.631" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:51.323957', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:51.631" starttime="20210224 15:54:51.629"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.631" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.631" starttime="20210224 15:54:51.631"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:51.632" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.632" starttime="20210224 15:54:51.632"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:51.632" starttime="20210224 15:54:51.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.636" starttime="20210224 15:54:51.635"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.638" starttime="20210224 15:54:51.637"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.638" starttime="20210224 15:54:51.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.640" starttime="20210224 15:54:51.638"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.641" starttime="20210224 15:54:51.640"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.642" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.642" starttime="20210224 15:54:51.641"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.643" starttime="20210224 15:54:51.642"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.644" starttime="20210224 15:54:51.643"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.646" starttime="20210224 15:54:51.644"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.646" starttime="20210224 15:54:51.646"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:51.646" starttime="20210224 15:54:51.634"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:51.646" starttime="20210224 15:54:51.633"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:51.646" starttime="20210224 15:54:51.046"></status>
</kw>
<kw name="E realizar o cadastro de um sócio pessoal física" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
<arg>50</arg>
<arg>true</arg>
</arguments>
<kw name="Cpf" library="FakerLibrary">
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:51.648" level="INFO">${partner_individual_national_registration} = 570.692.314-07</msg>
<status status="PASS" endtime="20210224 15:54:51.648" starttime="20210224 15:54:51.648"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:51.648" level="INFO">${partner_individual_national_registration} = 570692314-07</msg>
<status status="PASS" endtime="20210224 15:54:51.648" starttime="20210224 15:54:51.648"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_individual_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:51.649" level="INFO">${partner_individual_national_registration} = 57069231407</msg>
<status status="PASS" endtime="20210224 15:54:51.649" starttime="20210224 15:54:51.648"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_individual_national_registration}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.651" level="INFO">${partner_individual_national_registration} = 57069231407</msg>
<status status="PASS" endtime="20210224 15:54:51.651" starttime="20210224 15:54:51.649"></status>
</kw>
<kw name="Rg" library="FakerLibrary">
<doc>Brazilian RG, return plain numbers.
Check:  https://www.ngmatematica.com/2014/02/como-determinar-o-digito-verificador-do.html</doc>
<assign>
<var>${partner_individual_identity_card}</var>
</assign>
<msg timestamp="20210224 15:54:51.651" level="INFO">${partner_individual_identity_card} = 632154706</msg>
<status status="PASS" endtime="20210224 15:54:51.651" starttime="20210224 15:54:51.651"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_individual_identity_card}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.651" level="INFO">${partner_individual_identity_card} = 632154706</msg>
<status status="PASS" endtime="20210224 15:54:51.651" starttime="20210224 15:54:51.651"></status>
</kw>
<kw name="criar partner individual" library="accreditation_post_partner_individual">
<arguments>
<arg>partner_individual_type=individual</arg>
<arg>partner_individual_name=${partner_individual_name}</arg>
<arg>partner_individual_email=${partner_individual_email}</arg>
<arg>partner_individual_national_registration=${partner_individual_national_registration}</arg>
<arg>partner_individual_revenue=${partner_individual_revenue}</arg>
<arg>partner_individual_birthday=${partner_individual_birthday}</arg>
<arg>partner_individual_mothers_name=${partner_individual_mothers_name}</arg>
<arg>partner_individual_identity_card=${partner_individual_identity_card}</arg>
<arg>partner_individual_pep=false</arg>
<arg>partner_individual_percentage=${partner_individual_percentage}</arg>
<arg>partner_individual_adm=${partner_individual_adm}</arg>
<arg>partner_individual_cbo=${partner_individual_cbo}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:51.653" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:51.653" starttime="20210224 15:54:51.653"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${partner_individual_type}",</arg>
<arg>"name": "${partner_individual_name}",</arg>
<arg>"email": "${partner_individual_email}",</arg>
<arg>"national_registration": "${partner_individual_national_registration}",</arg>
<arg>"revenue": ${partner_individual_revenue},</arg>
<arg>"birthday": "${partner_individual_birthday}",</arg>
<arg>"mothers_name": "${partner_individual_mothers_name}",</arg>
<arg>"identity_card": "${partner_individual_identity_card}",</arg>
<arg>"pep": false,</arg>
<arg>"percentage": ${partner_individual_percentage},</arg>
<arg>"adm": ${partner_individual_adm},</arg>
<arg>"cbo": ${partner_individual_cbo}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:51.655" level="INFO">${body} = { "type": "individual", "name": "Individual Partner de teste", "email": "teste@teste.com.br", "national_registration": "57069231407", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe...</msg>
<status status="PASS" endtime="20210224 15:54:51.655" starttime="20210224 15:54:51.653"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:51.655" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "individual", "name": "Individual Partner de teste", "email": "teste@teste.com.br", "national_registration": "57069231407", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Individual Partner", "identity_card": "632154706", "pep": false, "percentage": 50, "adm": true, "cbo": 821450 } 
json=None</msg>
<msg timestamp="20210224 15:54:51.841" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.841" starttime="20210224 15:54:51.655"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.842" level="INFO">{u'adm': True, u'name': u'Individual Partner de teste', u'mothers_name': u'M\xe3e do Individual Partner', u'revenue': 5500.0, u'cbo': u'821450', u'created_at': u'2021-02-24T15:54:52.825582', u'pep': False, u'updated_at': u'2021-02-24T15:54:52.825583', u'id': u'b792f8578410489c971d7b3723fe46a8', u'identity_card': u'632154706', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/documents', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/addresses', u'type': u'GET'}}, u'national_registration': u'57069231407', u'percentage': 50.0, u'main': True, u'type': u'individual', u'email': u'teste@teste.com.br'}</msg>
<status status="PASS" endtime="20210224 15:54:51.842" starttime="20210224 15:54:51.842"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.843" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.843" starttime="20210224 15:54:51.843"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${partner_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:51.844" level="INFO">${partner_external_key} = b792f8578410489c971d7b3723fe46a8</msg>
<status status="PASS" endtime="20210224 15:54:51.844" starttime="20210224 15:54:51.844"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.845" level="INFO">${partner_external_key} = b792f8578410489c971d7b3723fe46a8</msg>
<status status="PASS" endtime="20210224 15:54:51.845" starttime="20210224 15:54:51.845"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:51.845" starttime="20210224 15:54:51.651"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:51.846" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:51.994" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.994" starttime="20210224 15:54:51.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.995" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:51.323957', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:51.995" starttime="20210224 15:54:51.994"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:51.995" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.995" starttime="20210224 15:54:51.995"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:51.997" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:51.997" starttime="20210224 15:54:51.997"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:51.997" starttime="20210224 15:54:51.845"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.999" starttime="20210224 15:54:51.998"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:51.999" starttime="20210224 15:54:51.999"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.000" starttime="20210224 15:54:52.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.001" starttime="20210224 15:54:52.000"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.002" starttime="20210224 15:54:52.001"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.002" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.002" starttime="20210224 15:54:52.002"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.003" starttime="20210224 15:54:52.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.005" starttime="20210224 15:54:52.003"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.005" starttime="20210224 15:54:52.005"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.005" starttime="20210224 15:54:52.005"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.005" starttime="20210224 15:54:51.998"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.006" starttime="20210224 15:54:51.997"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.007" starttime="20210224 15:54:51.648"></status>
</kw>
<kw name="E realizar o cadastro do telefone do sócio" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar partner phone" library="accreditation_post_partner_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996554785</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:52.008" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:52.008" starttime="20210224 15:54:52.007"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:52.008" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996554785" }</msg>
<status status="PASS" endtime="20210224 15:54:52.008" starttime="20210224 15:54:52.008"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/phones/</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:52.009" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/phones/, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996554785" } 
json=None</msg>
<msg timestamp="20210224 15:54:52.195" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.195" starttime="20210224 15:54:52.009"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.196" level="INFO">{u'area_code': u'21', u'number': u'996554785', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/phones/3814a7d286664b818dad4a968594c7aa', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'3814a7d286664b818dad4a968594c7aa'}</msg>
<status status="PASS" endtime="20210224 15:54:52.196" starttime="20210224 15:54:52.195"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.197" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.197" starttime="20210224 15:54:52.196"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:52.198" level="INFO">${holder_external_key} = 3814a7d286664b818dad4a968594c7aa</msg>
<status status="PASS" endtime="20210224 15:54:52.198" starttime="20210224 15:54:52.197"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.198" level="INFO">${phone_external_key} = 06a7ab303521418ca6e8d001c180c6b3</msg>
<status status="PASS" endtime="20210224 15:54:52.198" starttime="20210224 15:54:52.198"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.198" starttime="20210224 15:54:52.007"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:52.199" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:52.346" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.347" starttime="20210224 15:54:52.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.348" level="INFO">{u'status': u'waiting_info_and_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:51.323957', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:52.348" starttime="20210224 15:54:52.348"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.349" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.349" starttime="20210224 15:54:52.348"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:52.349" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.349" starttime="20210224 15:54:52.349"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.350" starttime="20210224 15:54:52.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.352" starttime="20210224 15:54:52.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.353" starttime="20210224 15:54:52.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.354" starttime="20210224 15:54:52.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.355" starttime="20210224 15:54:52.354"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.356" starttime="20210224 15:54:52.355"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.357" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.357" starttime="20210224 15:54:52.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.358" starttime="20210224 15:54:52.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.359" starttime="20210224 15:54:52.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.360" starttime="20210224 15:54:52.360"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.361" starttime="20210224 15:54:52.360"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.361" starttime="20210224 15:54:52.351"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.361" starttime="20210224 15:54:52.350"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.362" starttime="20210224 15:54:52.007"></status>
</kw>
<kw name="E realizar o cadastro do endereço do sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
</arguments>
<kw name="criar partner address" library="accreditation_post_partner_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>61</arg>
<arg>apto 201</arg>
<arg>21550478</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:52.363" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:52.363" starttime="20210224 15:54:52.363"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:52.364" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:52.364" starttime="20210224 15:54:52.363"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:52.365" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "21550478" } 
json=None</msg>
<msg timestamp="20210224 15:54:52.555" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.555" starttime="20210224 15:54:52.364"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.555" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 201', u'number': u'61', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550478', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/addresses/1fc655a5ba694907a00184dd58786de6', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}}, u'main': True, u'id': u'1fc655a5ba694907a00184dd58786de6'}</msg>
<status status="PASS" endtime="20210224 15:54:52.555" starttime="20210224 15:54:52.555"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.557" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.557" starttime="20210224 15:54:52.556"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:52.558" level="INFO">${address_external_key} = 1fc655a5ba694907a00184dd58786de6</msg>
<status status="PASS" endtime="20210224 15:54:52.558" starttime="20210224 15:54:52.557"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.559" level="INFO">${address_external_key} = 1fc655a5ba694907a00184dd58786de6</msg>
<status status="PASS" endtime="20210224 15:54:52.559" starttime="20210224 15:54:52.559"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.559" starttime="20210224 15:54:52.362"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:52.560" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:52.708" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.708" starttime="20210224 15:54:52.560"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.709" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:53.573798', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:52.709" starttime="20210224 15:54:52.708"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.710" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.710" starttime="20210224 15:54:52.709"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:52.711" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.711" starttime="20210224 15:54:52.710"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.711" starttime="20210224 15:54:52.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.714" starttime="20210224 15:54:52.713"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.715" starttime="20210224 15:54:52.714"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.716" starttime="20210224 15:54:52.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.717" starttime="20210224 15:54:52.716"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.718" starttime="20210224 15:54:52.717"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.719" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.719" starttime="20210224 15:54:52.718"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.720" starttime="20210224 15:54:52.719"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.720" starttime="20210224 15:54:52.720"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.721" starttime="20210224 15:54:52.721"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:52.722" starttime="20210224 15:54:52.721"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.722" starttime="20210224 15:54:52.713"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.722" starttime="20210224 15:54:52.712"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.722" starttime="20210224 15:54:52.362"></status>
</kw>
<kw name="E realizar o cadastro da Selfie do Sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>SELFIE</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:52.725" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:52.725" starttime="20210224 15:54:52.724"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:52.726" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:52.727" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:52.728" starttime="20210224 15:54:52.725"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:52.729" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/documents?type=SELFIE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:52.962" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.962" starttime="20210224 15:54:52.728"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.963" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'selfie', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/documents/838813618fdd4fd097f95fa23c87777b/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/documents/838813618fdd4fd097f95fa23c87777b', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}}, u'id': u'838813618fdd4fd097f95fa23c87777b'}</msg>
<status status="PASS" endtime="20210224 15:54:52.963" starttime="20210224 15:54:52.962"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.963" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:52.964" starttime="20210224 15:54:52.963"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:52.964" level="INFO">${document_external_key} = 838813618fdd4fd097f95fa23c87777b</msg>
<status status="PASS" endtime="20210224 15:54:52.964" starttime="20210224 15:54:52.964"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:52.965" level="INFO">${document_external_key} = 838813618fdd4fd097f95fa23c87777b</msg>
<status status="PASS" endtime="20210224 15:54:52.965" starttime="20210224 15:54:52.965"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:52.965" starttime="20210224 15:54:52.724"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:52.966" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:53.123" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.123" starttime="20210224 15:54:52.966"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.124" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:53.573798', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:53.125" starttime="20210224 15:54:53.124"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.126" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.126" starttime="20210224 15:54:53.125"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:53.126" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.127" starttime="20210224 15:54:53.126"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.127" starttime="20210224 15:54:52.965"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.130" starttime="20210224 15:54:53.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.131" starttime="20210224 15:54:53.130"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.132" starttime="20210224 15:54:53.131"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.133" starttime="20210224 15:54:53.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.134" starttime="20210224 15:54:53.133"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.135" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.135" starttime="20210224 15:54:53.134"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.136" starttime="20210224 15:54:53.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.137" starttime="20210224 15:54:53.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.138" starttime="20210224 15:54:53.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.140" starttime="20210224 15:54:53.139"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.140" starttime="20210224 15:54:53.128"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.140" starttime="20210224 15:54:53.127"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.140" starttime="20210224 15:54:52.724"></status>
</kw>
<kw name="E realizar o cadastro da frente do RG do sócio" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>RG_FRENTE</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:53.143" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:53.143" starttime="20210224 15:54:53.142"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:53.143" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:53.145" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:53.146" starttime="20210224 15:54:53.143"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:53.148" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/documents?type=RG_FRENTE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:53.361" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.362" starttime="20210224 15:54:53.146"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.362" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_frente', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/documents/78b90583305c4c82bf2b6e35e06b9ec3/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/documents/78b90583305c4c82bf2b6e35e06b9ec3', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}}, u'id': u'78b90583305c4c82bf2b6e35e06b9ec3'}</msg>
<status status="PASS" endtime="20210224 15:54:53.363" starttime="20210224 15:54:53.362"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.364" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.364" starttime="20210224 15:54:53.363"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:53.366" level="INFO">${document_external_key} = 78b90583305c4c82bf2b6e35e06b9ec3</msg>
<status status="PASS" endtime="20210224 15:54:53.366" starttime="20210224 15:54:53.364"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.366" level="INFO">${document_external_key} = 78b90583305c4c82bf2b6e35e06b9ec3</msg>
<status status="PASS" endtime="20210224 15:54:53.366" starttime="20210224 15:54:53.366"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.366" starttime="20210224 15:54:53.141"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:53.367" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:53.514" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.514" starttime="20210224 15:54:53.367"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.515" level="INFO">{u'status': u'waiting_documents', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:53.573798', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:53.515" starttime="20210224 15:54:53.514"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.516" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.516" starttime="20210224 15:54:53.515"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:53.516" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.516" starttime="20210224 15:54:53.516"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.516" starttime="20210224 15:54:53.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.518" starttime="20210224 15:54:53.518"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.519" starttime="20210224 15:54:53.518"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.519" starttime="20210224 15:54:53.519"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.520" starttime="20210224 15:54:53.520"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.521" starttime="20210224 15:54:53.520"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.521" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.521" starttime="20210224 15:54:53.521"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.522" starttime="20210224 15:54:53.521"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.522" starttime="20210224 15:54:53.522"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.523" starttime="20210224 15:54:53.522"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.524" starttime="20210224 15:54:53.523"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.524" starttime="20210224 15:54:53.517"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.524" starttime="20210224 15:54:53.517"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.524" starttime="20210224 15:54:53.140"></status>
</kw>
<kw name="E realizar o cadastro do verso do RG do sócio" library="steps">
<arguments>
<arg>ready_for_analysis</arg>
<arg>RG_VERSO</arg>
</arguments>
<kw name="criar partner document" library="accreditation_post_partner_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:53.525" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:53.525" starttime="20210224 15:54:53.525"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:53.526" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:53.527" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:53.527" starttime="20210224 15:54:53.525"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_externaL_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:53.529" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/documents?type=RG_VERSO, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:53.769" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.769" starttime="20210224 15:54:53.527"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.770" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_verso', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/documents/e0abd2889b2a4734a0b70c9197c7e913/download', u'type': u'GET'}, u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/b792f8578410489c971d7b3723fe46a8/documents/e0abd2889b2a4734a0b70c9197c7e913', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}}, u'id': u'e0abd2889b2a4734a0b70c9197c7e913'}</msg>
<status status="PASS" endtime="20210224 15:54:53.770" starttime="20210224 15:54:53.769"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.771" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.771" starttime="20210224 15:54:53.770"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:53.772" level="INFO">${document_external_key} = e0abd2889b2a4734a0b70c9197c7e913</msg>
<status status="PASS" endtime="20210224 15:54:53.772" starttime="20210224 15:54:53.771"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.773" level="INFO">${document_external_key} = e0abd2889b2a4734a0b70c9197c7e913</msg>
<status status="PASS" endtime="20210224 15:54:53.773" starttime="20210224 15:54:53.772"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.773" starttime="20210224 15:54:53.525"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:53.775" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:53.921" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.921" starttime="20210224 15:54:53.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.922" level="INFO">{u'status': u'ready_for_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:54.769063', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:53.922" starttime="20210224 15:54:53.921"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.923" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.923" starttime="20210224 15:54:53.922"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:53.924" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.924" starttime="20210224 15:54:53.924"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.925" starttime="20210224 15:54:53.774"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.927" starttime="20210224 15:54:53.926"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.927" starttime="20210224 15:54:53.927"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.929" starttime="20210224 15:54:53.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.929" starttime="20210224 15:54:53.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.929" starttime="20210224 15:54:53.929"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:53.930" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:53.930" starttime="20210224 15:54:53.929"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.930" starttime="20210224 15:54:53.930"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.931" starttime="20210224 15:54:53.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.932" starttime="20210224 15:54:53.931"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:53.932" starttime="20210224 15:54:53.932"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.932" starttime="20210224 15:54:53.926"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.932" starttime="20210224 15:54:53.925"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:53.932" starttime="20210224 15:54:53.524"></status>
</kw>
<kw name="E realizar o cadastro de um sócio pessoal jurídica" library="steps">
<arguments>
<arg>waiting_info</arg>
<arg>mei</arg>
<arg>50</arg>
<arg>false</arg>
</arguments>
<kw name="Cnpj" library="FakerLibrary">
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:53.933" level="INFO">${partner_business_national_registration} = 54.639.817/0001-33</msg>
<status status="PASS" endtime="20210224 15:54:53.933" starttime="20210224 15:54:53.933"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:53.934" level="INFO">${partner_business_national_registration} = 54639817/0001-33</msg>
<status status="PASS" endtime="20210224 15:54:53.934" starttime="20210224 15:54:53.933"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:53.934" level="INFO">${partner_business_national_registration} = 54639817/000133</msg>
<status status="PASS" endtime="20210224 15:54:53.934" starttime="20210224 15:54:53.934"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${partner_business_national_registration}</arg>
<arg>/</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${partner_business_national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:53.935" level="INFO">${partner_business_national_registration} = 54639817000133</msg>
<status status="PASS" endtime="20210224 15:54:53.935" starttime="20210224 15:54:53.934"></status>
</kw>
<kw name="criar partner business" library="accreditation_post_partner_business">
<arguments>
<arg>partner_business_type=business</arg>
<arg>partner_holder_name=${partner_holder_name}</arg>
<arg>partner_business_email=${partner_business_email}</arg>
<arg>partner_business_national_registration=${partner_business_national_registration}</arg>
<arg>partner_business_revenue=${partner_business_revenue}</arg>
<arg>partner_business_cnae=${partner_business_cnae}</arg>
<arg>partner_business_legal_name=${partner_business_legal_name}</arg>
<arg>partner_business_adm=${partner_business_adm}</arg>
<arg>partner_business_percentage=${partner_business_percentage}</arg>
<arg>partner_business_establishment_format=${partner_business_establishment_format}</arg>
<arg>partner_business_establishment_date=${partner_business_establishment_date}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:53.936" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:53.936" starttime="20210224 15:54:53.936"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${partner_business_type}",</arg>
<arg>"name": "${partner_holder_name}",</arg>
<arg>"email": "${partner_business_email}",</arg>
<arg>"national_registration": "${partner_business_national_registration}",</arg>
<arg>"revenue": ${partner_business_revenue},</arg>
<arg>"cnae": "${partner_business_cnae}",</arg>
<arg>"legal_name": "${partner_business_legal_name}",</arg>
<arg>"adm": ${partner_business_adm},</arg>
<arg>"percentage": ${partner_business_percentage},</arg>
<arg>"establishment": {</arg>
<arg>"format":"${partner_business_establishment_format}",</arg>
<arg>"date":"${partner_business_establishment_date}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:53.937" level="INFO">${body} = { "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "54639817000133", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Part...</msg>
<status status="PASS" endtime="20210224 15:54:53.937" starttime="20210224 15:54:53.936"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:53.937" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "54639817000133", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Partner Legal Name", "adm": false, "percentage": 50, "establishment": { "format":"mei", "date":"1988-04-23" } } 
json=None</msg>
<msg timestamp="20210224 15:54:54.125" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.126" starttime="20210224 15:54:53.937"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.126" level="INFO">{ "type": "business", "name": "Business Partner de teste", "email": "teste@teste.com.br", "national_registration": "54639817000133", "revenue": 5500.00, "cnae": "0111301", "legal_name": "Business Partner Legal Name", "adm": false, "percentage": 50, "establishment": { "format":"mei", "date":"1988-04-23" } }</msg>
<status status="PASS" endtime="20210224 15:54:54.126" starttime="20210224 15:54:54.126"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.127" level="INFO">{u'legal_name': u'Business Partner Legal Name', u'adm': False, u'name': u'Business Partner de teste', u'cnae': u'0111301', u'revenue': 5500.0, u'establishment': {u'date': u'1988-04-23', u'format': u'mei'}, u'created_at': u'2021-02-24T15:54:55.107563', u'updated_at': u'2021-02-24T15:54:55.107575', u'id': u'83e19a7f3f1a43a98cfee4f6aa777dd3', u'_links': {u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/83e19a7f3f1a43a98cfee4f6aa777dd3/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/83e19a7f3f1a43a98cfee4f6aa777dd3/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/83e19a7f3f1a43a98cfee4f6aa777dd3/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/83e19a7f3f1a43a98cfee4f6aa777dd3', u'type': u'GET'}, u'adm': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/83e19a7f3f1a43a98cfee4f6aa777dd3/adm', u'type': u'PUT'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}}, u'national_registration': u'54639817000133', u'percentage': 50.0, u'main': True, u'type': u'business', u'email': u'teste@teste.com.br'}</msg>
<status status="PASS" endtime="20210224 15:54:54.127" starttime="20210224 15:54:54.127"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.128" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.128" starttime="20210224 15:54:54.127"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${partner_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:54.129" level="INFO">${partner_external_key} = 83e19a7f3f1a43a98cfee4f6aa777dd3</msg>
<status status="PASS" endtime="20210224 15:54:54.129" starttime="20210224 15:54:54.128"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${partner_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.130" level="INFO">${partner_external_key} = 83e19a7f3f1a43a98cfee4f6aa777dd3</msg>
<status status="PASS" endtime="20210224 15:54:54.130" starttime="20210224 15:54:54.129"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.130" starttime="20210224 15:54:53.935"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.130" starttime="20210224 15:54:53.933"></status>
</kw>
<kw name="E realizar o cadastro do telefone do sócio" library="steps">
<arguments>
<arg>waiting_info</arg>
</arguments>
<kw name="criar partner phone" library="accreditation_post_partner_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996554785</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:54.132" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:54.132" starttime="20210224 15:54:54.131"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:54.132" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996554785" }</msg>
<status status="PASS" endtime="20210224 15:54:54.132" starttime="20210224 15:54:54.132"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/phones/</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:54.133" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/83e19a7f3f1a43a98cfee4f6aa777dd3/phones/, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996554785" } 
json=None</msg>
<msg timestamp="20210224 15:54:54.323" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.324" starttime="20210224 15:54:54.133"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.325" level="INFO">{u'area_code': u'21', u'number': u'996554785', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/83e19a7f3f1a43a98cfee4f6aa777dd3', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/83e19a7f3f1a43a98cfee4f6aa777dd3/phones/f07c1b7037d040a5b5f89576e8225ecd', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'f07c1b7037d040a5b5f89576e8225ecd'}</msg>
<status status="PASS" endtime="20210224 15:54:54.325" starttime="20210224 15:54:54.325"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.325" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.325" starttime="20210224 15:54:54.325"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:54.326" level="INFO">${holder_external_key} = f07c1b7037d040a5b5f89576e8225ecd</msg>
<status status="PASS" endtime="20210224 15:54:54.326" starttime="20210224 15:54:54.326"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.327" level="INFO">${phone_external_key} = 06a7ab303521418ca6e8d001c180c6b3</msg>
<status status="PASS" endtime="20210224 15:54:54.327" starttime="20210224 15:54:54.326"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.327" starttime="20210224 15:54:54.131"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:54.328" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:54.476" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.476" starttime="20210224 15:54:54.328"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.476" level="INFO">{u'status': u'waiting_info', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:55.123621', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:54.476" starttime="20210224 15:54:54.476"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.476" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.476" starttime="20210224 15:54:54.476"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:54.477" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.477" starttime="20210224 15:54:54.477"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.477" starttime="20210224 15:54:54.327"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.479" starttime="20210224 15:54:54.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.480" starttime="20210224 15:54:54.479"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.480" starttime="20210224 15:54:54.480"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.481" starttime="20210224 15:54:54.481"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.482" starttime="20210224 15:54:54.481"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.482" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.482" starttime="20210224 15:54:54.482"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.483" starttime="20210224 15:54:54.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.484" starttime="20210224 15:54:54.483"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.484" starttime="20210224 15:54:54.484"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.485" starttime="20210224 15:54:54.484"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.485" starttime="20210224 15:54:54.478"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.485" starttime="20210224 15:54:54.477"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.485" starttime="20210224 15:54:54.130"></status>
</kw>
<kw name="E realizar o cadastro do endereço do sócio" library="steps">
<arguments>
<arg>ready_for_analysis</arg>
</arguments>
<kw name="criar partner address" library="accreditation_post_partner_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>61</arg>
<arg>apto 201</arg>
<arg>21550478</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:54.486" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:54.486" starttime="20210224 15:54:54.486"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:54.487" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:54.487" starttime="20210224 15:54:54.487"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/partners/${partner_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:54.488" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/83e19a7f3f1a43a98cfee4f6aa777dd3/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "61", "complement": "apto 201", "postal_code": "21550478" } 
json=None</msg>
<msg timestamp="20210224 15:54:54.669" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.669" starttime="20210224 15:54:54.487"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.670" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 201', u'number': u'61', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550478', u'_links': {u'partner': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/83e19a7f3f1a43a98cfee4f6aa777dd3', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners/83e19a7f3f1a43a98cfee4f6aa777dd3/addresses/6858b24f25a0413d803729e324178526', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}}, u'main': True, u'id': u'6858b24f25a0413d803729e324178526'}</msg>
<status status="PASS" endtime="20210224 15:54:54.670" starttime="20210224 15:54:54.669"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.671" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.671" starttime="20210224 15:54:54.670"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:54.672" level="INFO">${address_external_key} = 6858b24f25a0413d803729e324178526</msg>
<status status="PASS" endtime="20210224 15:54:54.672" starttime="20210224 15:54:54.671"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.674" level="INFO">${address_external_key} = 6858b24f25a0413d803729e324178526</msg>
<status status="PASS" endtime="20210224 15:54:54.674" starttime="20210224 15:54:54.672"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.674" starttime="20210224 15:54:54.486"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:54.675" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:54.824" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.824" starttime="20210224 15:54:54.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.825" level="INFO">{u'status': u'ready_for_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:55.686391', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:54.825" starttime="20210224 15:54:54.825"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.827" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.827" starttime="20210224 15:54:54.827"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:54.828" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.828" starttime="20210224 15:54:54.827"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.828" starttime="20210224 15:54:54.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.831" starttime="20210224 15:54:54.830"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.832" starttime="20210224 15:54:54.831"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.833" starttime="20210224 15:54:54.833"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.834" starttime="20210224 15:54:54.834"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.835" starttime="20210224 15:54:54.835"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:54.836" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:54.836" starttime="20210224 15:54:54.836"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.837" starttime="20210224 15:54:54.837"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.838" starttime="20210224 15:54:54.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.840" starttime="20210224 15:54:54.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:54.841" starttime="20210224 15:54:54.840"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.841" starttime="20210224 15:54:54.829"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.841" starttime="20210224 15:54:54.828"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:54.841" starttime="20210224 15:54:54.485"></status>
</kw>
<kw name="E realizar a solicitação da aprovação do meu cadastro" library="steps">
<arguments>
<arg>waiting_analysis</arg>
</arguments>
<kw name="solicitar aprovação do holder" library="accreditation_request_approval">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:54.843" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:54.843" starttime="20210224 15:54:54.842"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/approval</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:54.844" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:55.066" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.066" starttime="20210224 15:54:54.843"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.067" level="INFO">{u'message': u'Approval request accepted successfully. Processing analysis'}</msg>
<status status="PASS" endtime="20210224 15:54:55.068" starttime="20210224 15:54:55.066"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.068" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.068" starttime="20210224 15:54:55.068"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.068" starttime="20210224 15:54:54.842"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:55.068" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.068" starttime="20210224 15:54:55.068"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:55.071" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:55.216" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.216" starttime="20210224 15:54:55.069"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.217" level="INFO">{u'status': u'waiting_analysis', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:56.027034', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:55.217" starttime="20210224 15:54:55.217"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.218" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.218" starttime="20210224 15:54:55.218"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:55.220" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.220" starttime="20210224 15:54:55.218"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.220" starttime="20210224 15:54:55.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.222" starttime="20210224 15:54:55.221"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.223" starttime="20210224 15:54:55.222"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.224" starttime="20210224 15:54:55.223"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.225" starttime="20210224 15:54:55.224"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.225" starttime="20210224 15:54:55.225"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.226" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.226" starttime="20210224 15:54:55.226"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.227" starttime="20210224 15:54:55.226"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.228" starttime="20210224 15:54:55.227"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.229" starttime="20210224 15:54:55.228"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.229" starttime="20210224 15:54:55.229"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.229" starttime="20210224 15:54:55.220"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.230" starttime="20210224 15:54:55.220"></status>
</kw>
<kw name="recebendo notificação de aprovação" library="accreditation_risk_notification">
<kw name="Uuid 4" library="FakerLibrary">
<doc>Generates a random UUID4 string.
:param cast_to: Specify what type the UUID should be cast to. Default is `str`
:type cast_to: callable</doc>
<assign>
<var>${assessment_id}</var>
</assign>
<msg timestamp="20210224 15:54:55.230" level="INFO">${assessment_id} = a57aa7c0-2dcf-4909-8d15-7c26c9b443c3</msg>
<status status="PASS" endtime="20210224 15:54:55.230" starttime="20210224 15:54:55.230"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year</arg>
</arguments>
<assign>
<var>${year}</var>
</assign>
<msg timestamp="20210224 15:54:55.231" level="INFO">${year} = 2021</msg>
<status status="PASS" endtime="20210224 15:54:55.231" starttime="20210224 15:54:55.231"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>month</arg>
</arguments>
<assign>
<var>${month}</var>
</assign>
<msg timestamp="20210224 15:54:55.232" level="INFO">${month} = 02</msg>
<status status="PASS" endtime="20210224 15:54:55.232" starttime="20210224 15:54:55.231"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>day</arg>
</arguments>
<assign>
<var>${day}</var>
</assign>
<msg timestamp="20210224 15:54:55.232" level="INFO">${day} = 24</msg>
<status status="PASS" endtime="20210224 15:54:55.232" starttime="20210224 15:54:55.232"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:55.233" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:55.233" starttime="20210224 15:54:55.233"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "risk.assessment.result",</arg>
<arg>"resource": "business.holder",</arg>
<arg>"created_at": "${year}-${month}-${day} 15:28:56.747Z",</arg>
<arg>"marketplace_id": "${marketplace_external_key}",</arg>
<arg>"object": {</arg>
<arg>"result": "APPROVED",</arg>
<arg>"holder_id": "${holder_external_key}",</arg>
<arg>"applicant_id": "${application_external_key}",</arg>
<arg>"assessment_id": "${assessment_id}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:55.234" level="INFO">${body} = { "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "ho...</msg>
<status status="PASS" endtime="20210224 15:54:55.234" starttime="20210224 15:54:55.233"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/admin/internal_operation/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/registration/approval</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:55.235" level="INFO">POST Request using : uri=/admin/internal_operation/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/registration/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "holder_id": "8832ef3e253249aebb5d4821c0713452", "applicant_id": "bcc25a6751c14b52af1340d40dba78c5", "assessment_id": "a57aa7c0-2dcf-4909-8d15-7c26c9b443c3" } } 
json=None</msg>
<msg timestamp="20210224 15:54:55.426" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.426" starttime="20210224 15:54:55.234"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.426" level="INFO">{u'message': u'Holder approved successfully'}</msg>
<status status="PASS" endtime="20210224 15:54:55.426" starttime="20210224 15:54:55.426"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.427" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.427" starttime="20210224 15:54:55.427"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:55.427" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.428" starttime="20210224 15:54:55.427"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.429" starttime="20210224 15:54:55.230"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.429" starttime="20210224 15:54:54.841"></status>
</kw>
<kw name="Então o sistema deverá realizar o meu cadastro com sucesso" library="steps">
<arguments>
<arg>active</arg>
</arguments>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:55.429" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:55.575" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.575" starttime="20210224 15:54:55.429"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.576" level="INFO">{u'status': u'active', u'legal_name': u'Nome Legal da Empresa', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'cnae': u'0111301', u'revenue': 1005500.0, u'marketplace_name': u'Marketplace de Teste', u'establishment': {u'date': u'2012-04-25', u'format': u'ltda'}, u'created_at': u'2021-02-24T15:54:51.323955', u'updated_at': u'2021-02-24T15:54:56.405269', u'id': u'8832ef3e253249aebb5d4821c0713452', u'_links': {u'partners': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/partners', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/addresses', u'type': u'GET'}, u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452', u'type': u'GET'}, u'associates': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/8832ef3e253249aebb5d4821c0713452/associates', u'type': u'GET'}}, u'national_registration': u'61894052000143', u'type': u'business', u'email': u'contato@teste.com.br', u'name': u'Empresa do Teste'}</msg>
<status status="PASS" endtime="20210224 15:54:55.577" starttime="20210224 15:54:55.576"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.577" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.577" starttime="20210224 15:54:55.577"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:55.578" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.578" starttime="20210224 15:54:55.578"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.578" starttime="20210224 15:54:55.429"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder business" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>business</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.580" starttime="20210224 15:54:55.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.581" starttime="20210224 15:54:55.580"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.582" starttime="20210224 15:54:55.581"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email_business}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.582" starttime="20210224 15:54:55.582"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.583" starttime="20210224 15:54:55.583"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue_business}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.585" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:55.585" starttime="20210224 15:54:55.583"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["legal_name"]}</arg>
<arg>${legal_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.585" starttime="20210224 15:54:55.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["format"]}</arg>
<arg>${establishment_format}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.586" starttime="20210224 15:54:55.585"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["establishment"]["date"]}</arg>
<arg>${establishment_date}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.587" starttime="20210224 15:54:55.586"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cnae"]}</arg>
<arg>${cnae}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:55.587" starttime="20210224 15:54:55.587"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.587" starttime="20210224 15:54:55.579"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.587" starttime="20210224 15:54:55.578"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.587" starttime="20210224 15:54:55.429"></status>
</kw>
<tags>
<tag>regression_test</tag>
<tag>smoke_test</tag>
</tags>
<status status="PASS" endtime="20210224 15:54:55.588" critical="yes" starttime="20210224 15:54:49.685"></status>
</test>
<doc>Funcionalidade: Criar Holder Business
Eu, como potencial cliente pessoa jurídica de Banking
Desejo me cadastrar como Holder Business</doc>
<status status="PASS" endtime="20210224 15:54:55.588" starttime="20210224 15:54:24.233"></status>
</suite>
<suite source="C:\Users\vinicius.trindade\Desktop\Banking_Robot\tests\accreditation\holders\Fluxo Básico\Criar Holder Individual.robot" id="s1-s1-s1-s2" name="Criar Holder Individual">
<test id="s1-s1-s1-s2-t1" name="Cenário: Criar Holder Individual">
<kw name="Dado que eu deseje me cadastrar como holder em Banking" library="steps">
<kw name="conectar accreditation" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accreditation</arg>
<arg>url=${accreditation_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210224 15:54:55.625" level="INFO">Creating Session using : alias=accreditation, url=https://banking-accreditation-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" endtime="20210224 15:54:55.626" starttime="20210224 15:54:55.625"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.626" starttime="20210224 15:54:55.624"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:55.626" starttime="20210224 15:54:55.624"></status>
</kw>
<kw name="Quando eu preencher todos os dados necessários para o cadastro do holder individual" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="Cpf" library="FakerLibrary">
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:55.626" level="INFO">${national_registration} = 397.860.125-77</msg>
<status status="PASS" endtime="20210224 15:54:55.627" starttime="20210224 15:54:55.626"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:55.627" level="INFO">${national_registration} = 397860125-77</msg>
<status status="PASS" endtime="20210224 15:54:55.627" starttime="20210224 15:54:55.627"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210224 15:54:55.629" level="INFO">${national_registration} = 39786012577</msg>
<status status="PASS" endtime="20210224 15:54:55.629" starttime="20210224 15:54:55.627"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${national_registration}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.629" level="INFO">${national_registration} = 39786012577</msg>
<status status="PASS" endtime="20210224 15:54:55.629" starttime="20210224 15:54:55.629"></status>
</kw>
<kw name="Rg" library="FakerLibrary">
<doc>Brazilian RG, return plain numbers.
Check:  https://www.ngmatematica.com/2014/02/como-determinar-o-digito-verificador-do.html</doc>
<assign>
<var>${identity_card}</var>
</assign>
<msg timestamp="20210224 15:54:55.629" level="INFO">${identity_card} = 478260532</msg>
<status status="PASS" endtime="20210224 15:54:55.629" starttime="20210224 15:54:55.629"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${identity_card}</arg>
</arguments>
<msg timestamp="20210224 15:54:55.629" level="INFO">${identity_card} = 478260532</msg>
<status status="PASS" endtime="20210224 15:54:55.629" starttime="20210224 15:54:55.629"></status>
</kw>
<kw name="criar holder individual" library="accreditation_post_holder_individual">
<arguments>
<arg>holder_type=individual</arg>
<arg>holder_name=${holder_name}</arg>
<arg>email=${email}</arg>
<arg>national_registration=${national_registration}</arg>
<arg>revenue=${revenue}</arg>
<arg>birthday=${birthday}</arg>
<arg>mothers_name=${mothers_name}</arg>
<arg>identity_card=${identity_card}</arg>
<arg>pep=false</arg>
<arg>cbo=${cbo}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:55.631" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:55.631" starttime="20210224 15:54:55.631"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${holder_type}",</arg>
<arg>"name": "${holder_name}",</arg>
<arg>"email": "${email}",</arg>
<arg>"national_registration": "${national_registration}",</arg>
<arg>"revenue": ${revenue},</arg>
<arg>"birthday": "${birthday}",</arg>
<arg>"mothers_name": "${mothers_name}",</arg>
<arg>"identity_card": "${identity_card}",</arg>
<arg>"pep": false,</arg>
<arg>"cbo": ${cbo}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:55.632" level="INFO">${body} = { "type": "individual", "name": "Holder de teste", "email": "teste@teste.com.br", "national_registration": "39786012577", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Holder",...</msg>
<status status="PASS" endtime="20210224 15:54:55.632" starttime="20210224 15:54:55.631"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:55.633" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "individual", "name": "Holder de teste", "email": "teste@teste.com.br", "national_registration": "39786012577", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Holder", "identity_card": "478260532", "pep": false, "cbo": 821450 } 
json=None</msg>
<msg timestamp="20210224 15:54:56.254" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.255" starttime="20210224 15:54:55.632"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.255" level="INFO">{u'status': u'waiting_info_and_documents', u'cbo': u'821450', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'mothers_name': u'M\xe3e do Holder', u'revenue': 5500.0, u'marketplace_name': u'Marketplace de Teste', u'created_at': u'2021-02-24T15:54:57.247011', u'pep': False, u'updated_at': u'2021-02-24T15:54:57.247013', u'id': u'3d45c4c1f11842c592caa8192ccd6953', u'identity_card': u'478260532', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/addresses', u'type': u'GET'}}, u'national_registration': u'39786012577', u'type': u'individual', u'email': u'teste@teste.com.br', u'name': u'Holder de teste'}</msg>
<status status="PASS" endtime="20210224 15:54:56.255" starttime="20210224 15:54:56.255"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.255" level="INFO">{ "type": "individual", "name": "Holder de teste", "email": "teste@teste.com.br", "national_registration": "39786012577", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Holder", "identity_card": "478260532", "pep": false, "cbo": 821450 }</msg>
<status status="PASS" endtime="20210224 15:54:56.255" starttime="20210224 15:54:56.255"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.257" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.257" starttime="20210224 15:54:56.256"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:56.257" level="INFO">${holder_external_key} = 3d45c4c1f11842c592caa8192ccd6953</msg>
<status status="PASS" endtime="20210224 15:54:56.257" starttime="20210224 15:54:56.257"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.258" level="INFO">${holder_external_key} = 3d45c4c1f11842c592caa8192ccd6953</msg>
<status status="PASS" endtime="20210224 15:54:56.258" starttime="20210224 15:54:56.258"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.258" starttime="20210224 15:54:55.630"></status>
</kw>
<kw name="validar holder individual" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>individual</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.259" starttime="20210224 15:54:56.259"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.260" starttime="20210224 15:54:56.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.261" starttime="20210224 15:54:56.260"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.261" starttime="20210224 15:54:56.261"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.263" starttime="20210224 15:54:56.263"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.263" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.263" starttime="20210224 15:54:56.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["birthday"]}</arg>
<arg>${birthday}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.263" starttime="20210224 15:54:56.263"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["mothers_name"]}</arg>
<arg>${mothers_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.265" starttime="20210224 15:54:56.264"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["identity_card"]}</arg>
<arg>${identity_card}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.265" starttime="20210224 15:54:56.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["pep"]}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20210224 15:54:56.265" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.265" starttime="20210224 15:54:56.265"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cbo"]}</arg>
<arg>${cbo}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.266" starttime="20210224 15:54:56.265"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.266" starttime="20210224 15:54:56.258"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.266" starttime="20210224 15:54:55.626"></status>
</kw>
<kw name="E realizar o cadastro do meu telefone" library="steps">
<arguments>
<arg>waiting_info_and_documents</arg>
</arguments>
<kw name="criar holder phone" library="accreditation_post_holder_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996221236</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:56.268" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:56.268" starttime="20210224 15:54:56.268"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:56.268" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996221236" }</msg>
<status status="PASS" endtime="20210224 15:54:56.268" starttime="20210224 15:54:56.268"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/phones</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:56.268" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/phones, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "area_code": "21", "country_code": "51", "number": "996221236" } 
json=None</msg>
<msg timestamp="20210224 15:54:56.449" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.449" starttime="20210224 15:54:56.268"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.450" level="INFO">{u'area_code': u'21', u'number': u'996221236', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/phones/53826027a8e8486da49293a7a8400be3', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}}, u'country_code': u'51', u'main': True, u'id': u'53826027a8e8486da49293a7a8400be3'}</msg>
<status status="PASS" endtime="20210224 15:54:56.450" starttime="20210224 15:54:56.450"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.452" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.452" starttime="20210224 15:54:56.450"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${phone_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:56.452" level="INFO">${phone_external_key} = 53826027a8e8486da49293a7a8400be3</msg>
<status status="PASS" endtime="20210224 15:54:56.452" starttime="20210224 15:54:56.452"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.452" level="INFO">${phone_external_key} = 53826027a8e8486da49293a7a8400be3</msg>
<status status="PASS" endtime="20210224 15:54:56.452" starttime="20210224 15:54:56.452"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.452" starttime="20210224 15:54:56.266"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:56.454" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:56.595" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.595" starttime="20210224 15:54:56.454"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.596" level="INFO">{u'status': u'waiting_info_and_documents', u'cbo': u'821450', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'mothers_name': u'M\xe3e do Holder', u'revenue': 5500.0, u'marketplace_name': u'Marketplace de Teste', u'created_at': u'2021-02-24T15:54:57.247011', u'pep': False, u'updated_at': u'2021-02-24T15:54:57.247013', u'id': u'3d45c4c1f11842c592caa8192ccd6953', u'identity_card': u'478260532', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/addresses', u'type': u'GET'}}, u'national_registration': u'39786012577', u'type': u'individual', u'email': u'teste@teste.com.br', u'name': u'Holder de teste'}</msg>
<status status="PASS" endtime="20210224 15:54:56.597" starttime="20210224 15:54:56.595"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.597" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.597" starttime="20210224 15:54:56.597"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:56.599" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.599" starttime="20210224 15:54:56.598"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.599" starttime="20210224 15:54:56.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder individual" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>individual</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.601" starttime="20210224 15:54:56.600"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.602" starttime="20210224 15:54:56.601"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.603" starttime="20210224 15:54:56.602"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.603" starttime="20210224 15:54:56.603"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.604" starttime="20210224 15:54:56.603"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.605" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.605" starttime="20210224 15:54:56.604"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["birthday"]}</arg>
<arg>${birthday}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.605" starttime="20210224 15:54:56.605"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["mothers_name"]}</arg>
<arg>${mothers_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.607" starttime="20210224 15:54:56.607"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["identity_card"]}</arg>
<arg>${identity_card}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.608" starttime="20210224 15:54:56.607"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["pep"]}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20210224 15:54:56.608" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.608" starttime="20210224 15:54:56.608"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cbo"]}</arg>
<arg>${cbo}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.609" starttime="20210224 15:54:56.608"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.609" starttime="20210224 15:54:56.599"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.609" starttime="20210224 15:54:56.599"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.609" starttime="20210224 15:54:56.266"></status>
</kw>
<kw name="E realizar o cadastro do meu endereço" library="steps">
<arguments>
<arg>waiting_documents</arg>
</arguments>
<kw name="criar holder address" library="accreditation_post_holder_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>90</arg>
<arg>apto 200</arg>
<arg>21550987</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:56.611" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:56.611" starttime="20210224 15:54:56.610"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:56.611" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "215...</msg>
<status status="PASS" endtime="20210224 15:54:56.611" starttime="20210224 15:54:56.611"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:56.612" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/addresses, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "21550987" } 
json=None</msg>
<msg timestamp="20210224 15:54:56.785" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.785" starttime="20210224 15:54:56.612"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.787" level="INFO">{u'city': u'Rio de Janeiro', u'neighborhood': u'Bairro de Testes', u'country': u'Brasil', u'complement': u'apto 200', u'number': u'90', u'state': u'Rio de Janeiro', u'street': u'Rua de Testes', u'postal_code': u'21550987', u'_links': {u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/addresses/adacb9567ad24a2cad81464ecd685dda', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}}, u'main': True, u'id': u'adacb9567ad24a2cad81464ecd685dda'}</msg>
<status status="PASS" endtime="20210224 15:54:56.787" starttime="20210224 15:54:56.785"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.787" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.787" starttime="20210224 15:54:56.787"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:56.788" level="INFO">${address_external_key} = adacb9567ad24a2cad81464ecd685dda</msg>
<status status="PASS" endtime="20210224 15:54:56.788" starttime="20210224 15:54:56.787"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.789" level="INFO">${address_external_key} = adacb9567ad24a2cad81464ecd685dda</msg>
<status status="PASS" endtime="20210224 15:54:56.789" starttime="20210224 15:54:56.788"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.789" starttime="20210224 15:54:56.610"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:56.791" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:56.937" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.937" starttime="20210224 15:54:56.791"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.939" level="INFO">{u'status': u'waiting_documents', u'cbo': u'821450', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'mothers_name': u'M\xe3e do Holder', u'revenue': 5500.0, u'marketplace_name': u'Marketplace de Teste', u'created_at': u'2021-02-24T15:54:57.247011', u'pep': False, u'updated_at': u'2021-02-24T15:54:57.80446', u'id': u'3d45c4c1f11842c592caa8192ccd6953', u'identity_card': u'478260532', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/addresses', u'type': u'GET'}}, u'national_registration': u'39786012577', u'type': u'individual', u'email': u'teste@teste.com.br', u'name': u'Holder de teste'}</msg>
<status status="PASS" endtime="20210224 15:54:56.939" starttime="20210224 15:54:56.937"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.939" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.939" starttime="20210224 15:54:56.939"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:56.941" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.942" starttime="20210224 15:54:56.940"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.942" starttime="20210224 15:54:56.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder individual" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>individual</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.944" starttime="20210224 15:54:56.944"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.946" starttime="20210224 15:54:56.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.946" starttime="20210224 15:54:56.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.948" starttime="20210224 15:54:56.946"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.948" starttime="20210224 15:54:56.948"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue}</arg>
</arguments>
<msg timestamp="20210224 15:54:56.948" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.948" starttime="20210224 15:54:56.948"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["birthday"]}</arg>
<arg>${birthday}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.950" starttime="20210224 15:54:56.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["mothers_name"]}</arg>
<arg>${mothers_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.950" starttime="20210224 15:54:56.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["identity_card"]}</arg>
<arg>${identity_card}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.951" starttime="20210224 15:54:56.950"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["pep"]}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20210224 15:54:56.951" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:56.951" starttime="20210224 15:54:56.951"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cbo"]}</arg>
<arg>${cbo}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:56.952" starttime="20210224 15:54:56.952"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.952" starttime="20210224 15:54:56.943"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.952" starttime="20210224 15:54:56.942"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:56.952" starttime="20210224 15:54:56.609"></status>
</kw>
<kw name="E realizar o cadastro da minha Selfie" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>SELFIE</arg>
</arguments>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:56.954" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:56.954" starttime="20210224 15:54:56.953"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:56.954" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:56.957" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:56.957" starttime="20210224 15:54:56.954"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:56.958" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents?type=SELFIE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:57.194" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.194" starttime="20210224 15:54:56.957"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.195" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'selfie', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents/498563f3ac0b4ef5ba515833596e72cf/download', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents/498563f3ac0b4ef5ba515833596e72cf', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}}, u'id': u'498563f3ac0b4ef5ba515833596e72cf'}</msg>
<status status="PASS" endtime="20210224 15:54:57.195" starttime="20210224 15:54:57.195"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.196" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.196" starttime="20210224 15:54:57.196"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:57.197" level="INFO">${document_external_key} = 498563f3ac0b4ef5ba515833596e72cf</msg>
<status status="PASS" endtime="20210224 15:54:57.197" starttime="20210224 15:54:57.197"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.198" level="INFO">${document_external_key} = 498563f3ac0b4ef5ba515833596e72cf</msg>
<status status="PASS" endtime="20210224 15:54:57.198" starttime="20210224 15:54:57.198"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:57.198" starttime="20210224 15:54:56.953"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:57.201" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:57.342" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.342" starttime="20210224 15:54:57.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.343" level="INFO">{u'status': u'waiting_documents', u'cbo': u'821450', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'mothers_name': u'M\xe3e do Holder', u'revenue': 5500.0, u'marketplace_name': u'Marketplace de Teste', u'created_at': u'2021-02-24T15:54:57.247011', u'pep': False, u'updated_at': u'2021-02-24T15:54:57.80446', u'id': u'3d45c4c1f11842c592caa8192ccd6953', u'identity_card': u'478260532', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/addresses', u'type': u'GET'}}, u'national_registration': u'39786012577', u'type': u'individual', u'email': u'teste@teste.com.br', u'name': u'Holder de teste'}</msg>
<status status="PASS" endtime="20210224 15:54:57.343" starttime="20210224 15:54:57.342"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.345" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.345" starttime="20210224 15:54:57.344"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:57.346" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.346" starttime="20210224 15:54:57.345"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:57.346" starttime="20210224 15:54:57.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder individual" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>individual</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.351" starttime="20210224 15:54:57.349"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.351" starttime="20210224 15:54:57.351"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.353" starttime="20210224 15:54:57.352"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.354" starttime="20210224 15:54:57.353"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.355" starttime="20210224 15:54:57.354"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.356" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.356" starttime="20210224 15:54:57.355"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["birthday"]}</arg>
<arg>${birthday}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.358" starttime="20210224 15:54:57.357"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["mothers_name"]}</arg>
<arg>${mothers_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.359" starttime="20210224 15:54:57.358"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["identity_card"]}</arg>
<arg>${identity_card}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.360" starttime="20210224 15:54:57.359"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["pep"]}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20210224 15:54:57.361" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.361" starttime="20210224 15:54:57.360"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cbo"]}</arg>
<arg>${cbo}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.362" starttime="20210224 15:54:57.361"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:57.362" starttime="20210224 15:54:57.348"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:57.362" starttime="20210224 15:54:57.348"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:57.362" starttime="20210224 15:54:56.953"></status>
</kw>
<kw name="E realizar o cadastro da frente do meu RG" library="steps">
<arguments>
<arg>waiting_documents</arg>
<arg>RG_FRENTE</arg>
</arguments>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:57.364" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:57.364" starttime="20210224 15:54:57.364"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:57.365" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:57.367" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:57.367" starttime="20210224 15:54:57.364"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:57.369" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents?type=RG_FRENTE, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:57.577" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.577" starttime="20210224 15:54:57.367"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.578" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_frente', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents/8d92d1d9113d4f239bf08a13445073f3/download', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents/8d92d1d9113d4f239bf08a13445073f3', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}}, u'id': u'8d92d1d9113d4f239bf08a13445073f3'}</msg>
<status status="PASS" endtime="20210224 15:54:57.578" starttime="20210224 15:54:57.578"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.579" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.579" starttime="20210224 15:54:57.578"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:57.580" level="INFO">${document_external_key} = 8d92d1d9113d4f239bf08a13445073f3</msg>
<status status="PASS" endtime="20210224 15:54:57.580" starttime="20210224 15:54:57.579"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.580" level="INFO">${document_external_key} = 8d92d1d9113d4f239bf08a13445073f3</msg>
<status status="PASS" endtime="20210224 15:54:57.580" starttime="20210224 15:54:57.580"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:57.581" starttime="20210224 15:54:57.363"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:57.582" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:57.725" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.725" starttime="20210224 15:54:57.581"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.726" level="INFO">{u'status': u'waiting_documents', u'cbo': u'821450', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'mothers_name': u'M\xe3e do Holder', u'revenue': 5500.0, u'marketplace_name': u'Marketplace de Teste', u'created_at': u'2021-02-24T15:54:57.247011', u'pep': False, u'updated_at': u'2021-02-24T15:54:57.80446', u'id': u'3d45c4c1f11842c592caa8192ccd6953', u'identity_card': u'478260532', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/addresses', u'type': u'GET'}}, u'national_registration': u'39786012577', u'type': u'individual', u'email': u'teste@teste.com.br', u'name': u'Holder de teste'}</msg>
<status status="PASS" endtime="20210224 15:54:57.726" starttime="20210224 15:54:57.725"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.727" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.727" starttime="20210224 15:54:57.726"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:57.727" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.727" starttime="20210224 15:54:57.727"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:57.728" starttime="20210224 15:54:57.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder individual" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>individual</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.730" starttime="20210224 15:54:57.729"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.731" starttime="20210224 15:54:57.730"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.732" starttime="20210224 15:54:57.731"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.732" starttime="20210224 15:54:57.732"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.734" starttime="20210224 15:54:57.734"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.734" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.734" starttime="20210224 15:54:57.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["birthday"]}</arg>
<arg>${birthday}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.735" starttime="20210224 15:54:57.734"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["mothers_name"]}</arg>
<arg>${mothers_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.736" starttime="20210224 15:54:57.735"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["identity_card"]}</arg>
<arg>${identity_card}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.736" starttime="20210224 15:54:57.736"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["pep"]}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20210224 15:54:57.738" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.738" starttime="20210224 15:54:57.737"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cbo"]}</arg>
<arg>${cbo}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:57.738" starttime="20210224 15:54:57.738"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:57.738" starttime="20210224 15:54:57.729"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:57.738" starttime="20210224 15:54:57.728"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:57.738" starttime="20210224 15:54:57.363"></status>
</kw>
<kw name="E realizar o cadastro do verso do meu RG" library="steps">
<arguments>
<arg>ready_for_analysis</arg>
<arg>RG_VERSO</arg>
</arguments>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>${document_type}</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:57.740" level="INFO">${header} = {u'Content-Type': u'image/jpeg'}</msg>
<status status="PASS" endtime="20210224 15:54:57.740" starttime="20210224 15:54:57.740"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>./../../images/accreditation/image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210224 15:54:57.741" html="yes" level="INFO">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\Desktop\Banking_Robot\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210224 15:54:57.743" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" endtime="20210224 15:54:57.743" starttime="20210224 15:54:57.740"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:57.744" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents?type=RG_VERSO, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'image/jpeg', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210224 15:54:57.973" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.973" starttime="20210224 15:54:57.743"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.975" level="INFO">{u'media_type': u'image_jpeg', u'length': 3135, u'document_type': u'rg_verso', u'_links': {u'download': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents/816b1922b04246c9ade0e03ee027cd9c/download', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents/816b1922b04246c9ade0e03ee027cd9c', u'type': u'GET'}, u'holder': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}}, u'id': u'816b1922b04246c9ade0e03ee027cd9c'}</msg>
<status status="PASS" endtime="20210224 15:54:57.975" starttime="20210224 15:54:57.973"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.975" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:57.975" starttime="20210224 15:54:57.975"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210224 15:54:57.976" level="INFO">${document_external_key} = 816b1922b04246c9ade0e03ee027cd9c</msg>
<status status="PASS" endtime="20210224 15:54:57.976" starttime="20210224 15:54:57.975"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210224 15:54:57.976" level="INFO">${document_external_key} = 816b1922b04246c9ade0e03ee027cd9c</msg>
<status status="PASS" endtime="20210224 15:54:57.976" starttime="20210224 15:54:57.976"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:57.977" starttime="20210224 15:54:57.739"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:57.978" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:58.126" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.126" starttime="20210224 15:54:57.977"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.127" level="INFO">{u'status': u'ready_for_analysis', u'cbo': u'821450', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'mothers_name': u'M\xe3e do Holder', u'revenue': 5500.0, u'marketplace_name': u'Marketplace de Teste', u'created_at': u'2021-02-24T15:54:57.247011', u'pep': False, u'updated_at': u'2021-02-24T15:54:58.97387', u'id': u'3d45c4c1f11842c592caa8192ccd6953', u'identity_card': u'478260532', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/addresses', u'type': u'GET'}}, u'national_registration': u'39786012577', u'type': u'individual', u'email': u'teste@teste.com.br', u'name': u'Holder de teste'}</msg>
<status status="PASS" endtime="20210224 15:54:58.128" starttime="20210224 15:54:58.127"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.129" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.129" starttime="20210224 15:54:58.129"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:58.129" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.129" starttime="20210224 15:54:58.129"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.129" starttime="20210224 15:54:57.977"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder individual" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>individual</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.132" starttime="20210224 15:54:58.131"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.132" starttime="20210224 15:54:58.132"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.134" starttime="20210224 15:54:58.133"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.134" starttime="20210224 15:54:58.134"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.135" starttime="20210224 15:54:58.134"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.135" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.136" starttime="20210224 15:54:58.135"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["birthday"]}</arg>
<arg>${birthday}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.136" starttime="20210224 15:54:58.136"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["mothers_name"]}</arg>
<arg>${mothers_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.137" starttime="20210224 15:54:58.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["identity_card"]}</arg>
<arg>${identity_card}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.138" starttime="20210224 15:54:58.137"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["pep"]}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20210224 15:54:58.138" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.138" starttime="20210224 15:54:58.138"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cbo"]}</arg>
<arg>${cbo}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.139" starttime="20210224 15:54:58.138"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.139" starttime="20210224 15:54:58.131"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.139" starttime="20210224 15:54:58.130"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.139" starttime="20210224 15:54:57.738"></status>
</kw>
<kw name="E realizar a solicitação da aprovação do meu cadastro" library="steps">
<arguments>
<arg>waiting_analysis</arg>
</arguments>
<kw name="solicitar aprovação do holder" library="accreditation_request_approval">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:58.141" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:58.141" starttime="20210224 15:54:58.141"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/approval</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:58.142" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:58.343" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.343" starttime="20210224 15:54:58.141"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.344" level="INFO">{u'message': u'Approval request accepted successfully. Processing analysis'}</msg>
<status status="PASS" endtime="20210224 15:54:58.344" starttime="20210224 15:54:58.343"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.345" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.345" starttime="20210224 15:54:58.344"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.345" starttime="20210224 15:54:58.140"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:58.345" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.345" starttime="20210224 15:54:58.345"></status>
</kw>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:58.347" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:58.488" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.488" starttime="20210224 15:54:58.347"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.489" level="INFO">{u'status': u'waiting_analysis', u'cbo': u'821450', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'mothers_name': u'M\xe3e do Holder', u'revenue': 5500.0, u'marketplace_name': u'Marketplace de Teste', u'created_at': u'2021-02-24T15:54:57.247011', u'pep': False, u'updated_at': u'2021-02-24T15:54:59.314827', u'id': u'3d45c4c1f11842c592caa8192ccd6953', u'identity_card': u'478260532', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/addresses', u'type': u'GET'}}, u'national_registration': u'39786012577', u'type': u'individual', u'email': u'teste@teste.com.br', u'name': u'Holder de teste'}</msg>
<status status="PASS" endtime="20210224 15:54:58.489" starttime="20210224 15:54:58.488"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.490" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.490" starttime="20210224 15:54:58.490"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:58.491" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.491" starttime="20210224 15:54:58.490"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.491" starttime="20210224 15:54:58.346"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder individual" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>individual</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.493" starttime="20210224 15:54:58.492"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.493" starttime="20210224 15:54:58.493"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.494" starttime="20210224 15:54:58.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.495" starttime="20210224 15:54:58.494"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.495" starttime="20210224 15:54:58.495"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.497" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.497" starttime="20210224 15:54:58.495"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["birthday"]}</arg>
<arg>${birthday}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.497" starttime="20210224 15:54:58.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["mothers_name"]}</arg>
<arg>${mothers_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.497" starttime="20210224 15:54:58.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["identity_card"]}</arg>
<arg>${identity_card}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.499" starttime="20210224 15:54:58.497"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["pep"]}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20210224 15:54:58.499" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.499" starttime="20210224 15:54:58.499"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cbo"]}</arg>
<arg>${cbo}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.499" starttime="20210224 15:54:58.499"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.499" starttime="20210224 15:54:58.492"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.499" starttime="20210224 15:54:58.491"></status>
</kw>
<kw name="recebendo notificação de aprovação" library="accreditation_risk_notification">
<kw name="Uuid 4" library="FakerLibrary">
<doc>Generates a random UUID4 string.
:param cast_to: Specify what type the UUID should be cast to. Default is `str`
:type cast_to: callable</doc>
<assign>
<var>${assessment_id}</var>
</assign>
<msg timestamp="20210224 15:54:58.499" level="INFO">${assessment_id} = 65955c27-3b5a-40ce-ab14-818ed9a2e6a9</msg>
<status status="PASS" endtime="20210224 15:54:58.499" starttime="20210224 15:54:58.499"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year</arg>
</arguments>
<assign>
<var>${year}</var>
</assign>
<msg timestamp="20210224 15:54:58.500" level="INFO">${year} = 2021</msg>
<status status="PASS" endtime="20210224 15:54:58.500" starttime="20210224 15:54:58.500"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>month</arg>
</arguments>
<assign>
<var>${month}</var>
</assign>
<msg timestamp="20210224 15:54:58.500" level="INFO">${month} = 02</msg>
<status status="PASS" endtime="20210224 15:54:58.500" starttime="20210224 15:54:58.500"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>day</arg>
</arguments>
<assign>
<var>${day}</var>
</assign>
<msg timestamp="20210224 15:54:58.501" level="INFO">${day} = 24</msg>
<status status="PASS" endtime="20210224 15:54:58.501" starttime="20210224 15:54:58.500"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210224 15:54:58.501" level="INFO">${header} = {u'Content-Type': u'application/json'}</msg>
<status status="PASS" endtime="20210224 15:54:58.501" starttime="20210224 15:54:58.501"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "risk.assessment.result",</arg>
<arg>"resource": "business.holder",</arg>
<arg>"created_at": "${year}-${month}-${day} 15:28:56.747Z",</arg>
<arg>"marketplace_id": "${marketplace_external_key}",</arg>
<arg>"object": {</arg>
<arg>"result": "APPROVED",</arg>
<arg>"holder_id": "${holder_external_key}",</arg>
<arg>"applicant_id": "${application_external_key}",</arg>
<arg>"assessment_id": "${assessment_id}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210224 15:54:58.503" level="INFO">${body} = { "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "ho...</msg>
<status status="PASS" endtime="20210224 15:54:58.503" starttime="20210224 15:54:58.501"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/admin/internal_operation/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/registration/approval</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:58.503" level="INFO">POST Request using : uri=/admin/internal_operation/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/registration/approval, files=None, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', u'Content-Type': u'application/json', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data={ "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-02-24 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "holder_id": "3d45c4c1f11842c592caa8192ccd6953", "applicant_id": "bcc25a6751c14b52af1340d40dba78c5", "assessment_id": "65955c27-3b5a-40ce-ab14-818ed9a2e6a9" } } 
json=None</msg>
<msg timestamp="20210224 15:54:58.696" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.696" starttime="20210224 15:54:58.503"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.696" level="INFO">{u'message': u'Holder approved successfully'}</msg>
<status status="PASS" endtime="20210224 15:54:58.696" starttime="20210224 15:54:58.696"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.697" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.697" starttime="20210224 15:54:58.697"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:58.697" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.698" starttime="20210224 15:54:58.697"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.698" starttime="20210224 15:54:58.499"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.698" starttime="20210224 15:54:58.140"></status>
</kw>
<kw name="Então o sistema deverá realizar o meu cadastro com sucesso" library="steps">
<arguments>
<arg>active</arg>
</arguments>
<kw name="buscar holder" library="accreditation_get_holder">
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210224 15:54:58.699" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953, params=None, timeout=None, allow_redirects=True
headers={'Connection': 'keep-alive', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'User-Agent': 'python-requests/2.23.0'} 
data=None 
json=None</msg>
<msg timestamp="20210224 15:54:58.843" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.843" starttime="20210224 15:54:58.699"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.844" level="INFO">{u'status': u'active', u'cbo': u'821450', u'marketplace_id': u'f71a8951368a4cc085cf7875ff44e61c', u'mothers_name': u'M\xe3e do Holder', u'revenue': 5500.0, u'marketplace_name': u'Marketplace de Teste', u'created_at': u'2021-02-24T15:54:57.247011', u'pep': False, u'updated_at': u'2021-02-24T15:54:59.670515', u'id': u'3d45c4c1f11842c592caa8192ccd6953', u'identity_card': u'478260532', u'birthday': u'1988-04-23', u'_links': {u'phones': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/phones', u'type': u'GET'}, u'self': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953', u'type': u'GET'}, u'documents': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/documents', u'type': u'GET'}, u'addresses': {u'href': u'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/3d45c4c1f11842c592caa8192ccd6953/addresses', u'type': u'GET'}}, u'national_registration': u'39786012577', u'type': u'individual', u'email': u'teste@teste.com.br', u'name': u'Holder de teste'}</msg>
<status status="PASS" endtime="20210224 15:54:58.844" starttime="20210224 15:54:58.844"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.845" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.845" starttime="20210224 15:54:58.845"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210224 15:54:58.846" level="INFO">Argument types are:
&lt;type 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.846" starttime="20210224 15:54:58.846"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.846" starttime="20210224 15:54:58.699"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["type"]}' == 'individual'</arg>
<arg>validar holder individual</arg>
<arg>${assert_holder_status}</arg>
<arg>ELSE IF</arg>
<arg>'${response.json()["type"]}' == 'business'</arg>
<arg>validar holder business</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="validar holder individual" library="asserts">
<arguments>
<arg>${assert_holder_status}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>individual</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.849" starttime="20210224 15:54:58.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${assert_holder_status}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.850" starttime="20210224 15:54:58.849"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["name"]}</arg>
<arg>${holder_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.850" starttime="20210224 15:54:58.850"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["email"]}</arg>
<arg>${email}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.852" starttime="20210224 15:54:58.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.852" starttime="20210224 15:54:58.852"></status>
</kw>
<kw name="Should Be Equal As Numbers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to real numbers.</doc>
<arguments>
<arg>${response.json()["revenue"]}</arg>
<arg>${revenue}</arg>
</arguments>
<msg timestamp="20210224 15:54:58.853" level="INFO">Argument types are:
&lt;type 'float'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.853" starttime="20210224 15:54:58.852"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["birthday"]}</arg>
<arg>${birthday}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.855" starttime="20210224 15:54:58.853"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["mothers_name"]}</arg>
<arg>${mothers_name}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.855" starttime="20210224 15:54:58.855"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["identity_card"]}</arg>
<arg>${identity_card}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.855" starttime="20210224 15:54:58.855"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["pep"]}</arg>
<arg>False</arg>
</arguments>
<msg timestamp="20210224 15:54:58.857" level="INFO">Argument types are:
&lt;type 'bool'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" endtime="20210224 15:54:58.857" starttime="20210224 15:54:58.856"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["cbo"]}</arg>
<arg>${cbo}</arg>
</arguments>
<status status="PASS" endtime="20210224 15:54:58.858" starttime="20210224 15:54:58.857"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.858" starttime="20210224 15:54:58.848"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.858" starttime="20210224 15:54:58.847"></status>
</kw>
<status status="PASS" endtime="20210224 15:54:58.858" starttime="20210224 15:54:58.698"></status>
</kw>
<tags>
<tag>regression_test</tag>
<tag>smoke_test</tag>
</tags>
<status status="PASS" endtime="20210224 15:54:58.858" critical="yes" starttime="20210224 15:54:55.623"></status>
</test>
<doc>Funcionalidade: Criar Holder Individual
Eu, como potencial cliente pessoa física de Banking
Desejo me cadastrar como Holder Individual</doc>
<status status="PASS" endtime="20210224 15:54:58.859" starttime="20210224 15:54:55.591"></status>
</suite>
<status status="PASS" endtime="20210224 15:54:58.860" starttime="20210224 15:54:24.231"></status>
</suite>
<status status="PASS" endtime="20210224 15:54:58.863" starttime="20210224 15:54:24.228"></status>
</suite>
<status status="PASS" endtime="20210224 15:54:58.865" starttime="20210224 15:54:24.194"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="6">Critical Tests</stat>
<stat fail="0" pass="6">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="6">regression_test</stat>
<stat fail="0" pass="6">smoke_test</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="Accreditation" pass="6">Accreditation</stat>
<stat fail="0" id="s1-s1" name="Holders" pass="6">Accreditation.Holders</stat>
<stat fail="0" id="s1-s1-s1" name="Fluxo Básico" pass="6">Accreditation.Holders.Fluxo Básico</stat>
<stat fail="0" id="s1-s1-s1-s1" name="Criar Holder Business" pass="5">Accreditation.Holders.Fluxo Básico.Criar Holder Business</stat>
<stat fail="0" id="s1-s1-s1-s2" name="Criar Holder Individual" pass="1">Accreditation.Holders.Fluxo Básico.Criar Holder Individual</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
