<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.1.2 (Python 3.8.1 on win32)" generated="20210326 21:18:57.897" rpa="false">
<suite id="s1" name="Criar Reivindicação de Posse" source="C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\tests\pix-dict\reivindicacao\Criar Reivindicação de Posse.robot">
<test id="s1-t1" name="Cenário: Criar Reivindicação de Posse para chave do tipo email">
<kw name="Email" library="FakerLibrary">
<assign>
<var>${email_pix}</var>
</assign>
<msg timestamp="20210326 21:18:59.133" level="INFO">${email_pix} = mouraeduarda@azevedo.com</msg>
<status status="PASS" starttime="20210326 21:18:59.133" endtime="20210326 21:18:59.133"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${email_pix}</arg>
</arguments>
<msg timestamp="20210326 21:18:59.135" level="INFO">${email_pix} = mouraeduarda@azevedo.com</msg>
<status status="PASS" starttime="20210326 21:18:59.135" endtime="20210326 21:18:59.135"></status>
</kw>
<kw name="criar holder individual ativo" library="accreditation_create_holder_active">
<kw name="conectar accreditation" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accreditation</arg>
<arg>url=${accreditation_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:18:59.138" level="INFO">Creating Session using : alias=accreditation, url=https://banking-accreditation-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:18:59.137" endtime="20210326 21:18:59.138"></status>
</kw>
<status status="PASS" starttime="20210326 21:18:59.137" endtime="20210326 21:18:59.138"></status>
</kw>
<kw name="Cpf" library="FakerLibrary">
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210326 21:18:59.139" level="INFO">${national_registration} = 357.049.216-80</msg>
<status status="PASS" starttime="20210326 21:18:59.138" endtime="20210326 21:18:59.139"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210326 21:18:59.140" level="INFO">${national_registration} = 357049216-80</msg>
<status status="PASS" starttime="20210326 21:18:59.139" endtime="20210326 21:18:59.140"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210326 21:18:59.140" level="INFO">${national_registration} = 35704921680</msg>
<status status="PASS" starttime="20210326 21:18:59.140" endtime="20210326 21:18:59.140"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${national_registration}</arg>
</arguments>
<msg timestamp="20210326 21:18:59.141" level="INFO">${national_registration} = 35704921680</msg>
<status status="PASS" starttime="20210326 21:18:59.141" endtime="20210326 21:18:59.141"></status>
</kw>
<kw name="Rg" library="FakerLibrary">
<doc>Brazilian RG, return plain numbers.
Check:  https://www.ngmatematica.com/2014/02/como-determinar-o-digito-verificador-do.html</doc>
<assign>
<var>${identity_card}</var>
</assign>
<msg timestamp="20210326 21:18:59.142" level="INFO">${identity_card} = 048573218</msg>
<status status="PASS" starttime="20210326 21:18:59.141" endtime="20210326 21:18:59.142"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${identity_card}</arg>
</arguments>
<msg timestamp="20210326 21:18:59.142" level="INFO">${identity_card} = 048573218</msg>
<status status="PASS" starttime="20210326 21:18:59.142" endtime="20210326 21:18:59.142"></status>
</kw>
<kw name="criar holder individual" library="accreditation_post_holder_individual">
<arguments>
<arg>holder_type=individual</arg>
<arg>holder_name=${holder_name}</arg>
<arg>email=${email}</arg>
<arg>national_registration=${national_registration}</arg>
<arg>revenue=${revenue}</arg>
<arg>birthday=${birthday}</arg>
<arg>mothers_name=${mothers_name}</arg>
<arg>identity_card=${identity_card}</arg>
<arg>pep=false</arg>
<arg>cbo=${cbo}</arg>
</arguments>
<kw name="conectar accreditation" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accreditation</arg>
<arg>url=${accreditation_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:18:59.144" level="INFO">Creating Session using : alias=accreditation, url=https://banking-accreditation-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:18:59.144" endtime="20210326 21:18:59.145"></status>
</kw>
<status status="PASS" starttime="20210326 21:18:59.144" endtime="20210326 21:18:59.145"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_type}</arg>
</arguments>
<msg timestamp="20210326 21:18:59.145" level="INFO">${holder_type} = individual</msg>
<status status="PASS" starttime="20210326 21:18:59.145" endtime="20210326 21:18:59.146"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_name}</arg>
</arguments>
<msg timestamp="20210326 21:18:59.146" level="INFO">${holder_name} = Holder de teste</msg>
<status status="PASS" starttime="20210326 21:18:59.146" endtime="20210326 21:18:59.146"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:18:59.147" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:18:59.146" endtime="20210326 21:18:59.147"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${holder_type}",</arg>
<arg>"name": "${holder_name}",</arg>
<arg>"email": "${email}",</arg>
<arg>"national_registration": "${national_registration}",</arg>
<arg>"revenue": ${revenue},</arg>
<arg>"birthday": "${birthday}",</arg>
<arg>"mothers_name": "${mothers_name}",</arg>
<arg>"identity_card": "${identity_card}",</arg>
<arg>"pep": false,</arg>
<arg>"cbo": ${cbo}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:18:59.149" level="INFO">${body} = { "type": "individual", "name": "Holder de teste", "email": "teste@teste.com.br", "national_registration": "35704921680", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Holder",...</msg>
<status status="PASS" starttime="20210326 21:18:59.148" endtime="20210326 21:18:59.149"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:18:59.151" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "type": "individual", "name": "Holder de teste", "email": "teste@teste.com.br", "national_registration": "35704921680", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Holder", "identity_card": "048573218", "pep": false, "cbo": 821450 } 
json=None</msg>
<msg timestamp="20210326 21:18:59.982" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:18:59.150" endtime="20210326 21:18:59.983"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:18:59.986" level="INFO">{'id': 'f35a9f57dc174783b0ac026022d7b802', 'name': 'Holder de teste', 'revenue': 5500.0, 'email': 'teste@teste.com.br', 'status': 'waiting_info_and_documents', 'marketplace_id': 'f71a8951368a4cc085cf7875ff44e61c', 'marketplace_name': 'Marketplace de Teste', 'created_at': '2021-03-26T21:19:00.096777', 'updated_at': '2021-03-26T21:19:00.09678', 'type': 'individual', 'national_registration': '35704921680', 'birthday': '1988-04-23', 'mothers_name': 'Mãe do Holder', 'identity_card': '048573218', 'pep': False, 'cbo': '821450', '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802', 'type': 'GET'}, 'phones': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/phones', 'type': 'GET'}, 'addresses': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/addresses', 'type': 'GET'}, 'documents': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/documents', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:18:59.984" endtime="20210326 21:18:59.986"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:18:59.987" level="INFO">ff2e5f5d415ec3e2</msg>
<status status="PASS" starttime="20210326 21:18:59.986" endtime="20210326 21:18:59.987"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210326 21:18:59.989" level="INFO">{ "type": "individual", "name": "Holder de teste", "email": "teste@teste.com.br", "national_registration": "35704921680", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Holder", "identity_card": "048573218", "pep": false, "cbo": 821450 }</msg>
<status status="PASS" starttime="20210326 21:18:59.988" endtime="20210326 21:18:59.989"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:18:59.991" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:18:59.991" endtime="20210326 21:18:59.991"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210326 21:18:59.995" level="INFO">${holder_external_key} = f35a9f57dc174783b0ac026022d7b802</msg>
<status status="PASS" starttime="20210326 21:18:59.992" endtime="20210326 21:18:59.995"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:18:59.996" level="INFO">${holder_external_key} = f35a9f57dc174783b0ac026022d7b802</msg>
<status status="PASS" starttime="20210326 21:18:59.995" endtime="20210326 21:18:59.997"></status>
</kw>
<status status="PASS" starttime="20210326 21:18:59.143" endtime="20210326 21:18:59.997"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_name}</arg>
</arguments>
<msg timestamp="20210326 21:18:59.999" level="INFO">${holder_name} = Holder de teste</msg>
<status status="PASS" starttime="20210326 21:18:59.999" endtime="20210326 21:18:59.999"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:00.002" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:00.001" endtime="20210326 21:19:00.003"></status>
</kw>
<kw name="criar holder phone" library="accreditation_post_holder_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996221236</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:00.007" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:00.006" endtime="20210326 21:19:00.008"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:00.011" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996221236" }</msg>
<status status="PASS" starttime="20210326 21:19:00.009" endtime="20210326 21:19:00.011"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/phones</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:00.015" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/phones, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "area_code": "21", "country_code": "51", "number": "996221236" } 
json=None</msg>
<msg timestamp="20210326 21:19:00.285" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:00.012" endtime="20210326 21:19:00.285"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.289" level="INFO">{'id': '61f8d802c9ef48c6aba21a44a665c501', 'area_code': '21', 'country_code': '51', 'number': '996221236', 'main': True, '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/phones/61f8d802c9ef48c6aba21a44a665c501', 'type': 'GET'}, 'holder': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:19:00.286" endtime="20210326 21:19:00.289"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.292" level="INFO">f95d0b7ae8e21a36</msg>
<status status="PASS" starttime="20210326 21:19:00.290" endtime="20210326 21:19:00.292"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.293" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:00.293" endtime="20210326 21:19:00.294"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${phone_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:00.298" level="INFO">${phone_external_key} = 61f8d802c9ef48c6aba21a44a665c501</msg>
<status status="PASS" starttime="20210326 21:19:00.295" endtime="20210326 21:19:00.298"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.300" level="INFO">${phone_external_key} = 61f8d802c9ef48c6aba21a44a665c501</msg>
<status status="PASS" starttime="20210326 21:19:00.299" endtime="20210326 21:19:00.300"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:00.004" endtime="20210326 21:19:00.301"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:00.303" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:00.302" endtime="20210326 21:19:00.304"></status>
</kw>
<kw name="criar holder address" library="accreditation_post_holder_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>90</arg>
<arg>apto 200</arg>
<arg>21550987</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:00.307" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:00.306" endtime="20210326 21:19:00.307"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:00.310" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "215...</msg>
<status status="PASS" starttime="20210326 21:19:00.308" endtime="20210326 21:19:00.310"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:00.314" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/addresses, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "21550987" } 
json=None</msg>
<msg timestamp="20210326 21:19:00.564" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:00.311" endtime="20210326 21:19:00.564"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.566" level="INFO">{'id': '9eee8c90f53243e3a2b5fbe2682df010', 'street': 'Rua de Testes', 'number': '90', 'city': 'Rio de Janeiro', 'complement': 'apto 200', 'state': 'Rio de Janeiro', 'neighborhood': 'Bairro de Testes', 'postal_code': '21550987', 'country': 'Brasil', 'main': True, '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/addresses/9eee8c90f53243e3a2b5fbe2682df010', 'type': 'GET'}, 'holder': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:19:00.566" endtime="20210326 21:19:00.567"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.568" level="INFO">6e2e34226dc5e82d</msg>
<status status="PASS" starttime="20210326 21:19:00.567" endtime="20210326 21:19:00.568"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.569" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:00.569" endtime="20210326 21:19:00.569"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:00.572" level="INFO">${address_external_key} = 9eee8c90f53243e3a2b5fbe2682df010</msg>
<status status="PASS" starttime="20210326 21:19:00.570" endtime="20210326 21:19:00.572"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.573" level="INFO">${address_external_key} = 9eee8c90f53243e3a2b5fbe2682df010</msg>
<status status="PASS" starttime="20210326 21:19:00.573" endtime="20210326 21:19:00.574"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:00.304" endtime="20210326 21:19:00.574"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:00.575" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:00.574" endtime="20210326 21:19:00.575"></status>
</kw>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>SELFIE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:00.578" level="INFO">${header} = {'Content-Type': 'image/jpeg'}</msg>
<status status="PASS" starttime="20210326 21:19:00.576" endtime="20210326 21:19:00.578"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>C:\\Users\\vinicius.trindade\\banking_continuous_testing\\banking_continuous_testing\\apis\\accreditation\\documents\\holder_documents\\post.${/}..${/}..${/}..${/}..${/}..${/}images${/}accreditation${/}image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210326 21:19:00.579" level="INFO" html="yes">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210326 21:19:00.583" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" starttime="20210326 21:19:00.578" endtime="20210326 21:19:00.584"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:00.587" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/documents?type=SELFIE, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'image/jpeg'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210326 21:19:00.975" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:00.584" endtime="20210326 21:19:00.975"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.978" level="INFO">{'id': '4bf4f7781e774162adf994bfcc615e5e', 'document_type': 'selfie', 'media_type': 'image_jpeg', 'length': 3135, '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/documents/4bf4f7781e774162adf994bfcc615e5e', 'type': 'GET'}, 'holder': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802', 'type': 'GET'}, 'download': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/documents/4bf4f7781e774162adf994bfcc615e5e/download', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:19:00.976" endtime="20210326 21:19:00.978"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.980" level="INFO">0143134484e1df68</msg>
<status status="PASS" starttime="20210326 21:19:00.979" endtime="20210326 21:19:00.980"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.983" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:00.981" endtime="20210326 21:19:00.983"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:00.985" level="INFO">${document_external_key} = 4bf4f7781e774162adf994bfcc615e5e</msg>
<status status="PASS" starttime="20210326 21:19:00.984" endtime="20210326 21:19:00.986"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:00.987" level="INFO">${document_external_key} = 4bf4f7781e774162adf994bfcc615e5e</msg>
<status status="PASS" starttime="20210326 21:19:00.986" endtime="20210326 21:19:00.987"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:00.576" endtime="20210326 21:19:00.987"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:00.989" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:00.988" endtime="20210326 21:19:00.991"></status>
</kw>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>RG_FRENTE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:00.993" level="INFO">${header} = {'Content-Type': 'image/jpeg'}</msg>
<status status="PASS" starttime="20210326 21:19:00.992" endtime="20210326 21:19:00.993"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>C:\\Users\\vinicius.trindade\\banking_continuous_testing\\banking_continuous_testing\\apis\\accreditation\\documents\\holder_documents\\post.${/}..${/}..${/}..${/}..${/}..${/}images${/}accreditation${/}image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210326 21:19:00.995" level="INFO" html="yes">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210326 21:19:01.000" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" starttime="20210326 21:19:00.994" endtime="20210326 21:19:01.000"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:01.004" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/documents?type=RG_FRENTE, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'image/jpeg'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210326 21:19:01.322" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:01.001" endtime="20210326 21:19:01.323"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:01.327" level="INFO">{'id': '0d5a1783e440437aa6a90632aec5e264', 'document_type': 'rg_frente', 'media_type': 'image_jpeg', 'length': 3135, '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/documents/0d5a1783e440437aa6a90632aec5e264', 'type': 'GET'}, 'holder': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802', 'type': 'GET'}, 'download': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/documents/0d5a1783e440437aa6a90632aec5e264/download', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:19:01.325" endtime="20210326 21:19:01.327"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:01.329" level="INFO">f0c3599325e70cc7</msg>
<status status="PASS" starttime="20210326 21:19:01.328" endtime="20210326 21:19:01.330"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:01.332" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:01.331" endtime="20210326 21:19:01.332"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:01.335" level="INFO">${document_external_key} = 0d5a1783e440437aa6a90632aec5e264</msg>
<status status="PASS" starttime="20210326 21:19:01.333" endtime="20210326 21:19:01.335"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:01.337" level="INFO">${document_external_key} = 0d5a1783e440437aa6a90632aec5e264</msg>
<status status="PASS" starttime="20210326 21:19:01.336" endtime="20210326 21:19:01.337"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:00.991" endtime="20210326 21:19:01.337"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:01.340" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:01.338" endtime="20210326 21:19:01.340"></status>
</kw>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>RG_VERSO</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:01.344" level="INFO">${header} = {'Content-Type': 'image/jpeg'}</msg>
<status status="PASS" starttime="20210326 21:19:01.342" endtime="20210326 21:19:01.345"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>C:\\Users\\vinicius.trindade\\banking_continuous_testing\\banking_continuous_testing\\apis\\accreditation\\documents\\holder_documents\\post.${/}..${/}..${/}..${/}..${/}..${/}images${/}accreditation${/}image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210326 21:19:01.346" level="INFO" html="yes">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210326 21:19:01.350" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" starttime="20210326 21:19:01.345" endtime="20210326 21:19:01.351"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:01.354" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/documents?type=RG_VERSO, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'image/jpeg'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210326 21:19:01.642" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:01.352" endtime="20210326 21:19:01.642"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:01.644" level="INFO">{'id': '09532e0c740a4b5299ae5b82bcf6ec7f', 'document_type': 'rg_verso', 'media_type': 'image_jpeg', 'length': 3135, '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/documents/09532e0c740a4b5299ae5b82bcf6ec7f', 'type': 'GET'}, 'holder': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802', 'type': 'GET'}, 'download': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/documents/09532e0c740a4b5299ae5b82bcf6ec7f/download', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:19:01.643" endtime="20210326 21:19:01.645"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:01.647" level="INFO">6ba318c4ba68c057</msg>
<status status="PASS" starttime="20210326 21:19:01.646" endtime="20210326 21:19:01.649"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:01.649" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:01.649" endtime="20210326 21:19:01.651"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:01.653" level="INFO">${document_external_key} = 09532e0c740a4b5299ae5b82bcf6ec7f</msg>
<status status="PASS" starttime="20210326 21:19:01.651" endtime="20210326 21:19:01.653"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:01.654" level="INFO">${document_external_key} = 09532e0c740a4b5299ae5b82bcf6ec7f</msg>
<status status="PASS" starttime="20210326 21:19:01.653" endtime="20210326 21:19:01.654"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:01.341" endtime="20210326 21:19:01.655"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:01.657" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:01.655" endtime="20210326 21:19:01.657"></status>
</kw>
<kw name="solicitar aprovação do holder" library="accreditation_request_approval">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:01.661" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:01.660" endtime="20210326 21:19:01.661"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/approval</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:01.664" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/approval, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:02.080" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:01.663" endtime="20210326 21:19:02.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:02.082" level="INFO">{'message': 'Approval request accepted successfully. Processing analysis'}</msg>
<status status="PASS" starttime="20210326 21:19:02.081" endtime="20210326 21:19:02.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:02.085" level="INFO">199edc9cb77bfd1e</msg>
<status status="PASS" starttime="20210326 21:19:02.084" endtime="20210326 21:19:02.085"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:02.087" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:02.086" endtime="20210326 21:19:02.087"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:01.658" endtime="20210326 21:19:02.087"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210326 21:19:02.089" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:02.088" endtime="20210326 21:19:02.090"></status>
</kw>
<kw name="recebendo notificação de aprovação" library="accreditation_risk_notification">
<kw name="Uuid 4" library="FakerLibrary">
<doc>Generates a random UUID4 string.
:param cast_to: Specify what type the UUID should be cast to. Default is `str`
:type cast_to: callable</doc>
<assign>
<var>${assessment_id}</var>
</assign>
<msg timestamp="20210326 21:19:02.093" level="INFO">${assessment_id} = 1268a4f8-e2f9-4f4a-a20d-0cbe72f71a3e</msg>
<status status="PASS" starttime="20210326 21:19:02.092" endtime="20210326 21:19:02.093"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year</arg>
</arguments>
<assign>
<var>${year}</var>
</assign>
<msg timestamp="20210326 21:19:02.095" level="INFO">${year} = 2021</msg>
<status status="PASS" starttime="20210326 21:19:02.094" endtime="20210326 21:19:02.096"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>month</arg>
</arguments>
<assign>
<var>${month}</var>
</assign>
<msg timestamp="20210326 21:19:02.097" level="INFO">${month} = 03</msg>
<status status="PASS" starttime="20210326 21:19:02.096" endtime="20210326 21:19:02.097"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>day</arg>
</arguments>
<assign>
<var>${day}</var>
</assign>
<msg timestamp="20210326 21:19:02.099" level="INFO">${day} = 26</msg>
<status status="PASS" starttime="20210326 21:19:02.097" endtime="20210326 21:19:02.099"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:02.100" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:02.099" endtime="20210326 21:19:02.100"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "risk.assessment.result",</arg>
<arg>"resource": "business.holder",</arg>
<arg>"created_at": "${year}-${month}-${day} 15:28:56.747Z",</arg>
<arg>"marketplace_id": "${marketplace_external_key}",</arg>
<arg>"object": {</arg>
<arg>"result": "APPROVED",</arg>
<arg>"holder_id": "${holder_external_key}",</arg>
<arg>"applicant_id": "${application_external_key}",</arg>
<arg>"assessment_id": "${assessment_id}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:02.104" level="INFO">${body} = { "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-03-26 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "ho...</msg>
<status status="PASS" starttime="20210326 21:19:02.101" endtime="20210326 21:19:02.104"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/admin/internal_operation/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/registration/approval</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:02.107" level="INFO">POST Request using : uri=/admin/internal_operation/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/f35a9f57dc174783b0ac026022d7b802/registration/approval, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-03-26 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "holder_id": "f35a9f57dc174783b0ac026022d7b802", "applicant_id": "bcc25a6751c14b52af1340d40dba78c5", "assessment_id": "1268a4f8-e2f9-4f4a-a20d-0cbe72f71a3e" } } 
json=None</msg>
<msg timestamp="20210326 21:19:03.860" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:02.105" endtime="20210326 21:19:03.860"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:03.862" level="INFO">{'message': 'Holder approved successfully'}</msg>
<status status="PASS" starttime="20210326 21:19:03.861" endtime="20210326 21:19:03.862"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:03.864" level="INFO">0d57059e94276de6</msg>
<status status="PASS" starttime="20210326 21:19:03.863" endtime="20210326 21:19:03.864"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:03.866" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:03.865" endtime="20210326 21:19:03.866"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210326 21:19:03.868" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:03.867" endtime="20210326 21:19:03.868"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:02.091" endtime="20210326 21:19:03.869"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210326 21:19:03.870" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:03.869" endtime="20210326 21:19:03.871"></status>
</kw>
<kw name="buscar account por holder" library="accounts_get_accounts_by_holder">
<kw name="conectar accounts" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accounts</arg>
<arg>url=${account_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:03.875" level="INFO">Creating Session using : alias=accounts, url=https://banking-accounts-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:03.874" endtime="20210326 21:19:03.876"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:03.873" endtime="20210326 21:19:03.877"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accounts</arg>
<arg>/marketplaces/${marketplace_external_key}/holders/${holder_external_key}/accounts</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:03.879" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/holders/f35a9f57dc174783b0ac026022d7b802/accounts, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:04.640" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:03.878" endtime="20210326 21:19:04.641"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:04.643" level="INFO">{'items': [{'id': 'cc6046f5a33d4dd581406be89f225623', 'holder': 'f35a9f57dc174783b0ac026022d7b802', 'balance': '0.00', 'currency': 'BRL', 'routing_number': '001', 'number': '3174786108', 'status': 'active', 'metadata': {}, 'created_at': '2021-03-27T00:19:03.400796', 'updated_at': '2021-03-27T00:19:03.400796', 'primary': True, 'marketplace_id': 'f71a8951368a4cc085cf7875ff44e61c', 'uri': '/v2/marketplaces/f71a8951368a4cc085cf7875ff44e61c/accounts/cc6046f5a33d4dd581406be89f225623', 'resource': 'payment_account'}], 'has_more': False, 'limit': 100, 'total_pages': 1, 'page': 1, 'offset': 0, 'total': '1', 'query_count': '1'}</msg>
<status status="PASS" starttime="20210326 21:19:04.642" endtime="20210326 21:19:04.643"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:04.645" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:04.644" endtime="20210326 21:19:04.645"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==200</arg>
<arg>${response.json()["items"][0]["id"]}</arg>
</arguments>
<assign>
<var>${account_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:04.648" level="INFO">${account_external_key} = cc6046f5a33d4dd581406be89f225623</msg>
<status status="PASS" starttime="20210326 21:19:04.646" endtime="20210326 21:19:04.648"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${account_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:04.650" level="INFO">${account_external_key} = cc6046f5a33d4dd581406be89f225623</msg>
<status status="PASS" starttime="20210326 21:19:04.649" endtime="20210326 21:19:04.650"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==200</arg>
<arg>${response.json()["items"][0]["number"]}</arg>
</arguments>
<assign>
<var>${account_number}</var>
</assign>
<msg timestamp="20210326 21:19:04.653" level="INFO">${account_number} = 3174786108</msg>
<status status="PASS" starttime="20210326 21:19:04.651" endtime="20210326 21:19:04.653"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${account_number}</arg>
</arguments>
<msg timestamp="20210326 21:19:04.655" level="INFO">${account_number} = 3174786108</msg>
<status status="PASS" starttime="20210326 21:19:04.654" endtime="20210326 21:19:04.655"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==200</arg>
<arg>${response.json()["items"][0]["routing_number"]}</arg>
</arguments>
<assign>
<var>${account_routing_number}</var>
</assign>
<msg timestamp="20210326 21:19:04.657" level="INFO">${account_routing_number} = 001</msg>
<status status="PASS" starttime="20210326 21:19:04.656" endtime="20210326 21:19:04.658"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${account_routing_number}</arg>
</arguments>
<msg timestamp="20210326 21:19:04.659" level="INFO">${account_routing_number} = 001</msg>
<status status="PASS" starttime="20210326 21:19:04.658" endtime="20210326 21:19:04.659"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:03.871" endtime="20210326 21:19:04.660"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210326 21:19:04.662" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:04.661" endtime="20210326 21:19:04.662"></status>
</kw>
<status status="PASS" starttime="20210326 21:18:59.136" endtime="20210326 21:19:04.662"></status>
</kw>
<kw name="criar chave pix" library="pix_dict_create_entry">
<arguments>
<arg>type=email</arg>
<arg>value=${email_pix}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:04.669" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:04.668" endtime="20210326 21:19:04.670"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:04.666" endtime="20210326 21:19:04.671"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${type}</arg>
</arguments>
<msg timestamp="20210326 21:19:04.673" level="INFO">${type} = email</msg>
<status status="PASS" starttime="20210326 21:19:04.672" endtime="20210326 21:19:04.673"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<msg timestamp="20210326 21:19:04.675" level="INFO">${value} = mouraeduarda@azevedo.com</msg>
<status status="PASS" starttime="20210326 21:19:04.675" endtime="20210326 21:19:04.676"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:04.678" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:04.677" endtime="20210326 21:19:04.679"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${type}",</arg>
<arg>"value": "${value}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:04.681" level="INFO">${body} = { "type": "email", "value": "mouraeduarda@azevedo.com" }</msg>
<status status="PASS" starttime="20210326 21:19:04.680" endtime="20210326 21:19:04.681"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/entries</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:04.684" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/f35a9f57dc174783b0ac026022d7b802/accounts/cc6046f5a33d4dd581406be89f225623/entries, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "type": "email", "value": "mouraeduarda@azevedo.com" } 
json=None</msg>
<msg timestamp="20210326 21:19:05.538" level="INFO">${response} = &lt;Response [202]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:04.682" endtime="20210326 21:19:05.539"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:05.541" level="INFO">{'id': 'a644912a2d5141c6a6394f035237e003', 'status': 'waiting_ownership_verification', 'created_at': '2021-03-26T09:19:05.666', 'updated_at': '2021-03-26T09:19:05.666', 'key': {'value': 'mouraeduarda@azevedo.com', 'type': 'email'}, 'account': {'id': 'cc6046f5a33d4dd581406be89f225623', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'f35a9f57dc174783b0ac026022d7b802', 'owner': {'name': 'Holder de teste', 'national_registration': '35704921680', 'type': 'individual'}, 'routing_number': '001', 'number': '3174786108', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}, 'resource': 'pix.entry'}</msg>
<status status="PASS" starttime="20210326 21:19:05.540" endtime="20210326 21:19:05.542"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:05.543" level="INFO">6afda07b9dc9acdd</msg>
<status status="PASS" starttime="20210326 21:19:05.543" endtime="20210326 21:19:05.544"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:05.545" level="INFO">202</msg>
<status status="PASS" starttime="20210326 21:19:05.545" endtime="20210326 21:19:05.546"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:05.547" level="INFO">${response} = &lt;Response [202]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:05.546" endtime="20210326 21:19:05.548"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
<arg>${response.status_code}==202</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${entry_external_key}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==202</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:05.551" endtime="20210326 21:19:05.553"></status>
</kw>
<msg timestamp="20210326 21:19:05.553" level="INFO">${entry_external_key} = a644912a2d5141c6a6394f035237e003</msg>
<status status="PASS" starttime="20210326 21:19:05.549" endtime="20210326 21:19:05.553"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${entry_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:05.555" level="INFO">${entry_external_key} = a644912a2d5141c6a6394f035237e003</msg>
<status status="PASS" starttime="20210326 21:19:05.554" endtime="20210326 21:19:05.555"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${response.status_code}==202</arg>
<arg>${response.json()["key"]["value"]}</arg>
</arguments>
<assign>
<var>${entry_key_value}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==202</arg>
<arg>${response.json()["key"]["value"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:05.558" endtime="20210326 21:19:05.560"></status>
</kw>
<msg timestamp="20210326 21:19:05.560" level="INFO">${entry_key_value} = mouraeduarda@azevedo.com</msg>
<status status="PASS" starttime="20210326 21:19:05.556" endtime="20210326 21:19:05.560"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${entry_key_value}</arg>
</arguments>
<msg timestamp="20210326 21:19:05.563" level="INFO">${entry_key_value} = mouraeduarda@azevedo.com</msg>
<status status="PASS" starttime="20210326 21:19:05.561" endtime="20210326 21:19:05.563"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:04.665" endtime="20210326 21:19:05.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '202'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao criar chave de endereçamento || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:05.566" endtime="20210326 21:19:05.567"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${holder_external_key}</arg>
</arguments>
<assign>
<var>${holder_owner}</var>
</assign>
<msg timestamp="20210326 21:19:05.571" level="INFO">${holder_owner} = f35a9f57dc174783b0ac026022d7b802</msg>
<status status="PASS" starttime="20210326 21:19:05.570" endtime="20210326 21:19:05.571"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${holder_type}</arg>
</arguments>
<assign>
<var>${holder_type_owner}</var>
</assign>
<msg timestamp="20210326 21:19:05.575" level="INFO">${holder_type_owner} = individual</msg>
<status status="PASS" starttime="20210326 21:19:05.574" endtime="20210326 21:19:05.575"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${holder_name}</arg>
</arguments>
<assign>
<var>${holder_name_owner}</var>
</assign>
<msg timestamp="20210326 21:19:05.581" level="INFO">${holder_name_owner} = Holder de teste</msg>
<status status="PASS" starttime="20210326 21:19:05.578" endtime="20210326 21:19:05.581"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${national_registration}</arg>
</arguments>
<assign>
<var>${national_registration_owner}</var>
</assign>
<msg timestamp="20210326 21:19:05.584" level="INFO">${national_registration_owner} = 35704921680</msg>
<status status="PASS" starttime="20210326 21:19:05.583" endtime="20210326 21:19:05.584"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${account_external_key}</arg>
</arguments>
<assign>
<var>${account_owner}</var>
</assign>
<msg timestamp="20210326 21:19:05.591" level="INFO">${account_owner} = cc6046f5a33d4dd581406be89f225623</msg>
<status status="PASS" starttime="20210326 21:19:05.589" endtime="20210326 21:19:05.591"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${account_number}</arg>
</arguments>
<assign>
<var>${account_number_owner}</var>
</assign>
<msg timestamp="20210326 21:19:05.594" level="INFO">${account_number_owner} = 3174786108</msg>
<status status="PASS" starttime="20210326 21:19:05.593" endtime="20210326 21:19:05.594"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${account_routing_number}</arg>
</arguments>
<assign>
<var>${account_routing_number_owner}</var>
</assign>
<msg timestamp="20210326 21:19:05.598" level="INFO">${account_routing_number_owner} = 001</msg>
<status status="PASS" starttime="20210326 21:19:05.597" endtime="20210326 21:19:05.598"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${entry_external_key}</arg>
</arguments>
<assign>
<var>${entry_owner}</var>
</assign>
<msg timestamp="20210326 21:19:05.602" level="INFO">${entry_owner} = a644912a2d5141c6a6394f035237e003</msg>
<status status="PASS" starttime="20210326 21:19:05.601" endtime="20210326 21:19:05.603"></status>
</kw>
<kw name="buscar verification code" library="pix_dict_verification_code">
<arguments>
<arg>holder_external_key=${holder_owner}</arg>
<arg>account_external_key=${account_owner}</arg>
<arg>entry_external_key=${entry_owner}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:05.611" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:05.609" endtime="20210326 21:19:05.612"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:05.608" endtime="20210326 21:19:05.612"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/admin/internal_operation/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/entries/${entry_external_key}/code</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:05.615" level="INFO">GET Request using : uri=/admin/internal_operation/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/f35a9f57dc174783b0ac026022d7b802/accounts/cc6046f5a33d4dd581406be89f225623/entries/a644912a2d5141c6a6394f035237e003/code, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:06.408" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:05.613" endtime="20210326 21:19:06.408"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:06.411" level="INFO">{'code': '4476'}</msg>
<status status="PASS" starttime="20210326 21:19:06.409" endtime="20210326 21:19:06.411"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:06.413" level="INFO">f1943587c32529d4</msg>
<status status="PASS" starttime="20210326 21:19:06.412" endtime="20210326 21:19:06.413"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:06.415" level="INFO">200</msg>
<status status="PASS" starttime="20210326 21:19:06.414" endtime="20210326 21:19:06.415"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:06.417" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:06.416" endtime="20210326 21:19:06.417"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==200</arg>
<arg>${response.json()["code"]}</arg>
</arguments>
<assign>
<var>${verification_code}</var>
</assign>
<msg timestamp="20210326 21:19:06.420" level="INFO">${verification_code} = 4476</msg>
<status status="PASS" starttime="20210326 21:19:06.418" endtime="20210326 21:19:06.420"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${verification_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:06.422" level="INFO">${verification_code} = 4476</msg>
<status status="PASS" starttime="20210326 21:19:06.421" endtime="20210326 21:19:06.422"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:05.606" endtime="20210326 21:19:06.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '200'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao buscar verification code || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:06.425" endtime="20210326 21:19:06.426"></status>
</kw>
<kw name="confirmar propriedade da chave pix" library="pix_dict_confirm_propriety">
<arguments>
<arg>verification_code=${verification_code}</arg>
<arg>holder_external_key=${holder_owner}</arg>
<arg>account_external_key=${account_owner}</arg>
<arg>entry_external_key=${entry_owner}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:06.434" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:06.433" endtime="20210326 21:19:06.436"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:06.431" endtime="20210326 21:19:06.437"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:06.440" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:06.438" endtime="20210326 21:19:06.440"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"code": "${verification_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:06.443" level="INFO">${body} = { "code": "4476" }</msg>
<status status="PASS" starttime="20210326 21:19:06.441" endtime="20210326 21:19:06.443"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/entries/${entry_external_key}/ownership</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:06.446" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/f35a9f57dc174783b0ac026022d7b802/accounts/cc6046f5a33d4dd581406be89f225623/entries/a644912a2d5141c6a6394f035237e003/ownership, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "code": "4476" } 
json=None</msg>
<msg timestamp="20210326 21:19:08.714" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:06.444" endtime="20210326 21:19:08.714"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:08.715" level="INFO">{'id': 'a644912a2d5141c6a6394f035237e003', 'status': 'active', 'created_at': '2021-03-26T09:19:05.666', 'updated_at': '2021-03-26T09:19:08.892', 'key': {'value': 'mouraeduarda@azevedo.com', 'type': 'email'}, 'account': {'id': 'cc6046f5a33d4dd581406be89f225623', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'f35a9f57dc174783b0ac026022d7b802', 'owner': {'name': 'Holder de teste', 'national_registration': '35704921680', 'type': 'individual'}, 'routing_number': '001', 'number': '3174786108', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}, 'resource': 'pix.entry'}</msg>
<status status="PASS" starttime="20210326 21:19:08.715" endtime="20210326 21:19:08.715"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:08.716" level="INFO">eaa2e9e77583b19f</msg>
<status status="PASS" starttime="20210326 21:19:08.716" endtime="20210326 21:19:08.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:08.717" level="INFO">201</msg>
<status status="PASS" starttime="20210326 21:19:08.717" endtime="20210326 21:19:08.717"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:08.718" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:08.718" endtime="20210326 21:19:08.718"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:06.428" endtime="20210326 21:19:08.719"></status>
</kw>
<kw name="validar chave pix" library="asserts">
<arguments>
<arg>status_code=201</arg>
<arg>key_status=active</arg>
<arg>key_type=${type}</arg>
<arg>key_value=${value}</arg>
<arg>account_external_key=${account_owner}</arg>
<arg>marketplace_external_key=${marketplace_external_key}</arg>
<arg>holder_external_key=${holder_owner}</arg>
<arg>account_number=${account_number_owner}</arg>
<arg>account_routing_number=${account_routing_number_owner}</arg>
<arg>account_type=CACC</arg>
<arg>owner_key_name=${holder_name_owner}</arg>
<arg>national_registration=${national_registration_owner}</arg>
<arg>holder_type=${holder_type}</arg>
<arg>psp_code=19468242</arg>
<arg>psp_name=Zoop Tecnologia e Meios de Pagamento S.A.</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '${status_code}'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao criar chave de endereçamento || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.722" endtime="20210326 21:19:08.723"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar status da chave</arg>
</arguments>
<msg timestamp="20210326 21:19:08.723" level="INFO">Validar status da chave</msg>
<status status="PASS" starttime="20210326 21:19:08.723" endtime="20210326 21:19:08.723"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${key_status}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.724" endtime="20210326 21:19:08.724"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validando Tipo da chave PIX</arg>
</arguments>
<msg timestamp="20210326 21:19:08.725" level="INFO">Validando Tipo da chave PIX</msg>
<status status="PASS" starttime="20210326 21:19:08.725" endtime="20210326 21:19:08.725"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["key"]["type"]}</arg>
<arg>${key_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.725" endtime="20210326 21:19:08.726"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validando Valor da chave PIX</arg>
</arguments>
<msg timestamp="20210326 21:19:08.726" level="INFO">Validando Valor da chave PIX</msg>
<status status="PASS" starttime="20210326 21:19:08.726" endtime="20210326 21:19:08.727"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == 'evp'</arg>
<arg>Should Not Be Empty</arg>
<arg>${response.json()["key"]["value"]}</arg>
<arg>ELSE IF</arg>
<arg>'${type}' != 'evp'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${key_value}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${key_value}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.729" endtime="20210326 21:19:08.729"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:08.727" endtime="20210326 21:19:08.730"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validando dados da conta</arg>
</arguments>
<msg timestamp="20210326 21:19:08.730" level="INFO">Validando dados da conta</msg>
<status status="PASS" starttime="20210326 21:19:08.730" endtime="20210326 21:19:08.730"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["id"]}</arg>
<arg>${account_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.730" endtime="20210326 21:19:08.731"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["marketplace"]}</arg>
<arg>${marketplace_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.731" endtime="20210326 21:19:08.732"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["holder"]}</arg>
<arg>${holder_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.732" endtime="20210326 21:19:08.733"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["number"]}</arg>
<arg>${account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.733" endtime="20210326 21:19:08.734"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["routing_number"]}</arg>
<arg>${account_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.735" endtime="20210326 21:19:08.735"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["type"]}</arg>
<arg>${account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.736" endtime="20210326 21:19:08.737"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar Proprietário da Account Owner</arg>
</arguments>
<msg timestamp="20210326 21:19:08.738" level="INFO">Validar Proprietário da Account Owner</msg>
<status status="PASS" starttime="20210326 21:19:08.737" endtime="20210326 21:19:08.738"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["account"]["owner"]["name"]}</arg>
<arg>${owner_key_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.738" endtime="20210326 21:19:08.739"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar national_registration da Account Owner</arg>
</arguments>
<msg timestamp="20210326 21:19:08.740" level="INFO">Validar national_registration da Account Owner</msg>
<status status="PASS" starttime="20210326 21:19:08.739" endtime="20210326 21:19:08.740"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["account"]["owner"]["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.740" endtime="20210326 21:19:08.741"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar Holder Type do Account Owner</arg>
</arguments>
<msg timestamp="20210326 21:19:08.741" level="INFO">Validar Holder Type do Account Owner</msg>
<status status="PASS" starttime="20210326 21:19:08.741" endtime="20210326 21:19:08.741"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["account"]["owner"]["type"]}</arg>
<arg>${holder_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.742" endtime="20210326 21:19:08.742"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar PSP</arg>
</arguments>
<msg timestamp="20210326 21:19:08.743" level="INFO">Validar PSP</msg>
<status status="PASS" starttime="20210326 21:19:08.743" endtime="20210326 21:19:08.743"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["psp"]["code"]}</arg>
<arg>${psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.743" endtime="20210326 21:19:08.744"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["psp"]["name"]}</arg>
<arg>${psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:08.744" endtime="20210326 21:19:08.745"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:08.720" endtime="20210326 21:19:08.745"></status>
</kw>
<kw name="criar holder individual ativo" library="accreditation_create_holder_active">
<kw name="conectar accreditation" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accreditation</arg>
<arg>url=${accreditation_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:08.748" level="INFO">Creating Session using : alias=accreditation, url=https://banking-accreditation-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:08.747" endtime="20210326 21:19:08.749"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:08.747" endtime="20210326 21:19:08.749"></status>
</kw>
<kw name="Cpf" library="FakerLibrary">
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210326 21:19:08.751" level="INFO">${national_registration} = 683.749.210-13</msg>
<status status="PASS" starttime="20210326 21:19:08.750" endtime="20210326 21:19:08.751"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>.</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210326 21:19:08.752" level="INFO">${national_registration} = 683749210-13</msg>
<status status="PASS" starttime="20210326 21:19:08.751" endtime="20210326 21:19:08.752"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${national_registration}</arg>
<arg>-</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${national_registration}</var>
</assign>
<msg timestamp="20210326 21:19:08.753" level="INFO">${national_registration} = 68374921013</msg>
<status status="PASS" starttime="20210326 21:19:08.752" endtime="20210326 21:19:08.753"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${national_registration}</arg>
</arguments>
<msg timestamp="20210326 21:19:08.754" level="INFO">${national_registration} = 68374921013</msg>
<status status="PASS" starttime="20210326 21:19:08.753" endtime="20210326 21:19:08.754"></status>
</kw>
<kw name="Rg" library="FakerLibrary">
<doc>Brazilian RG, return plain numbers.
Check:  https://www.ngmatematica.com/2014/02/como-determinar-o-digito-verificador-do.html</doc>
<assign>
<var>${identity_card}</var>
</assign>
<msg timestamp="20210326 21:19:08.755" level="INFO">${identity_card} = 861075341</msg>
<status status="PASS" starttime="20210326 21:19:08.754" endtime="20210326 21:19:08.755"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${identity_card}</arg>
</arguments>
<msg timestamp="20210326 21:19:08.756" level="INFO">${identity_card} = 861075341</msg>
<status status="PASS" starttime="20210326 21:19:08.755" endtime="20210326 21:19:08.756"></status>
</kw>
<kw name="criar holder individual" library="accreditation_post_holder_individual">
<arguments>
<arg>holder_type=individual</arg>
<arg>holder_name=${holder_name}</arg>
<arg>email=${email}</arg>
<arg>national_registration=${national_registration}</arg>
<arg>revenue=${revenue}</arg>
<arg>birthday=${birthday}</arg>
<arg>mothers_name=${mothers_name}</arg>
<arg>identity_card=${identity_card}</arg>
<arg>pep=false</arg>
<arg>cbo=${cbo}</arg>
</arguments>
<kw name="conectar accreditation" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accreditation</arg>
<arg>url=${accreditation_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:08.759" level="INFO">Creating Session using : alias=accreditation, url=https://banking-accreditation-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:08.758" endtime="20210326 21:19:08.759"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:08.757" endtime="20210326 21:19:08.759"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_type}</arg>
</arguments>
<msg timestamp="20210326 21:19:08.760" level="INFO">${holder_type} = individual</msg>
<status status="PASS" starttime="20210326 21:19:08.760" endtime="20210326 21:19:08.760"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_name}</arg>
</arguments>
<msg timestamp="20210326 21:19:08.761" level="INFO">${holder_name} = Holder de teste</msg>
<status status="PASS" starttime="20210326 21:19:08.761" endtime="20210326 21:19:08.761"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:08.763" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:08.763" endtime="20210326 21:19:08.763"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${holder_type}",</arg>
<arg>"name": "${holder_name}",</arg>
<arg>"email": "${email}",</arg>
<arg>"national_registration": "${national_registration}",</arg>
<arg>"revenue": ${revenue},</arg>
<arg>"birthday": "${birthday}",</arg>
<arg>"mothers_name": "${mothers_name}",</arg>
<arg>"identity_card": "${identity_card}",</arg>
<arg>"pep": false,</arg>
<arg>"cbo": ${cbo}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:08.764" level="INFO">${body} = { "type": "individual", "name": "Holder de teste", "email": "teste@teste.com.br", "national_registration": "68374921013", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Holder",...</msg>
<status status="PASS" starttime="20210326 21:19:08.763" endtime="20210326 21:19:08.764"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:08.767" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "type": "individual", "name": "Holder de teste", "email": "teste@teste.com.br", "national_registration": "68374921013", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Holder", "identity_card": "861075341", "pep": false, "cbo": 821450 } 
json=None</msg>
<msg timestamp="20210326 21:19:09.560" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:08.765" endtime="20210326 21:19:09.560"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:09.563" level="INFO">{'id': 'e02d594615b54cc09f0394cfb4e985a1', 'name': 'Holder de teste', 'revenue': 5500.0, 'email': 'teste@teste.com.br', 'status': 'waiting_info_and_documents', 'marketplace_id': 'f71a8951368a4cc085cf7875ff44e61c', 'marketplace_name': 'Marketplace de Teste', 'created_at': '2021-03-26T21:19:09.69271', 'updated_at': '2021-03-26T21:19:09.692714', 'type': 'individual', 'national_registration': '68374921013', 'birthday': '1988-04-23', 'mothers_name': 'Mãe do Holder', 'identity_card': '861075341', 'pep': False, 'cbo': '821450', '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1', 'type': 'GET'}, 'phones': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/phones', 'type': 'GET'}, 'addresses': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/addresses', 'type': 'GET'}, 'documents': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/documents', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:19:09.562" endtime="20210326 21:19:09.563"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:09.565" level="INFO">9f6027eb0294ce98</msg>
<status status="PASS" starttime="20210326 21:19:09.564" endtime="20210326 21:19:09.565"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${body}</arg>
</arguments>
<msg timestamp="20210326 21:19:09.568" level="INFO">{ "type": "individual", "name": "Holder de teste", "email": "teste@teste.com.br", "national_registration": "68374921013", "revenue": 5500.00, "birthday": "1988-04-23", "mothers_name": "Mãe do Holder", "identity_card": "861075341", "pep": false, "cbo": 821450 }</msg>
<status status="PASS" starttime="20210326 21:19:09.566" endtime="20210326 21:19:09.568"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:09.570" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:09.568" endtime="20210326 21:19:09.570"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${holder_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:09.573" level="INFO">${holder_external_key} = e02d594615b54cc09f0394cfb4e985a1</msg>
<status status="PASS" starttime="20210326 21:19:09.571" endtime="20210326 21:19:09.573"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:09.575" level="INFO">${holder_external_key} = e02d594615b54cc09f0394cfb4e985a1</msg>
<status status="PASS" starttime="20210326 21:19:09.575" endtime="20210326 21:19:09.576"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:08.756" endtime="20210326 21:19:09.576"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${holder_name}</arg>
</arguments>
<msg timestamp="20210326 21:19:09.577" level="INFO">${holder_name} = Holder de teste</msg>
<status status="PASS" starttime="20210326 21:19:09.576" endtime="20210326 21:19:09.578"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:09.579" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:09.578" endtime="20210326 21:19:09.580"></status>
</kw>
<kw name="criar holder phone" library="accreditation_post_holder_phone">
<arguments>
<arg>21</arg>
<arg>51</arg>
<arg>996221236</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:09.583" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:09.582" endtime="20210326 21:19:09.584"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"area_code": "${phone_area_code}",</arg>
<arg>"country_code": "${phone_country_code}",</arg>
<arg>"number": "${phone_number}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:09.586" level="INFO">${body} = { "area_code": "21", "country_code": "51", "number": "996221236" }</msg>
<status status="PASS" starttime="20210326 21:19:09.584" endtime="20210326 21:19:09.586"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/phones</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:09.588" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/phones, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "area_code": "21", "country_code": "51", "number": "996221236" } 
json=None</msg>
<msg timestamp="20210326 21:19:09.920" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:09.586" endtime="20210326 21:19:09.921"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:09.923" level="INFO">{'id': 'db15c8edf3484f999b39f8d274b01f20', 'area_code': '21', 'country_code': '51', 'number': '996221236', 'main': True, '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/phones/db15c8edf3484f999b39f8d274b01f20', 'type': 'GET'}, 'holder': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:19:09.922" endtime="20210326 21:19:09.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:09.926" level="INFO">6a88797b6f7c2c18</msg>
<status status="PASS" starttime="20210326 21:19:09.925" endtime="20210326 21:19:09.926"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:09.929" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:09.928" endtime="20210326 21:19:09.930"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${phone_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:09.934" level="INFO">${phone_external_key} = db15c8edf3484f999b39f8d274b01f20</msg>
<status status="PASS" starttime="20210326 21:19:09.931" endtime="20210326 21:19:09.934"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${phone_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:09.937" level="INFO">${phone_external_key} = db15c8edf3484f999b39f8d274b01f20</msg>
<status status="PASS" starttime="20210326 21:19:09.935" endtime="20210326 21:19:09.939"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:09.580" endtime="20210326 21:19:09.939"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:09.942" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:09.940" endtime="20210326 21:19:09.943"></status>
</kw>
<kw name="criar holder address" library="accreditation_post_holder_address">
<arguments>
<arg>Rio de Janeiro</arg>
<arg>Rio de Janeiro</arg>
<arg>Brasil</arg>
<arg>Bairro de Testes</arg>
<arg>Rua de Testes</arg>
<arg>90</arg>
<arg>apto 200</arg>
<arg>21550987</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:09.948" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:09.946" endtime="20210326 21:19:09.948"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"city": "${city}",</arg>
<arg>"state": "${state}",</arg>
<arg>"country": "${country}",</arg>
<arg>"neighborhood": "${neighborhood}",</arg>
<arg>"street": "${street}",</arg>
<arg>"number": "${number}",</arg>
<arg>"complement": "${complement}",</arg>
<arg>"postal_code": "${postal_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:09.954" level="INFO">${body} = { "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "215...</msg>
<status status="PASS" starttime="20210326 21:19:09.950" endtime="20210326 21:19:09.954"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/addresses</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:09.957" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/addresses, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "city": "Rio de Janeiro", "state": "Rio de Janeiro", "country": "Brasil", "neighborhood": "Bairro de Testes", "street": "Rua de Testes", "number": "90", "complement": "apto 200", "postal_code": "21550987" } 
json=None</msg>
<msg timestamp="20210326 21:19:10.211" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:09.955" endtime="20210326 21:19:10.212"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.214" level="INFO">{'id': 'fc8d5274a1994bbca73fefb828242afe', 'street': 'Rua de Testes', 'number': '90', 'city': 'Rio de Janeiro', 'complement': 'apto 200', 'state': 'Rio de Janeiro', 'neighborhood': 'Bairro de Testes', 'postal_code': '21550987', 'country': 'Brasil', 'main': True, '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/addresses/fc8d5274a1994bbca73fefb828242afe', 'type': 'GET'}, 'holder': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:19:10.213" endtime="20210326 21:19:10.215"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.216" level="INFO">f5b9ac7a31ee3842</msg>
<status status="PASS" starttime="20210326 21:19:10.215" endtime="20210326 21:19:10.216"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.218" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:10.217" endtime="20210326 21:19:10.220"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${address_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:10.222" level="INFO">${address_external_key} = fc8d5274a1994bbca73fefb828242afe</msg>
<status status="PASS" starttime="20210326 21:19:10.220" endtime="20210326 21:19:10.222"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${address_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.224" level="INFO">${address_external_key} = fc8d5274a1994bbca73fefb828242afe</msg>
<status status="PASS" starttime="20210326 21:19:10.224" endtime="20210326 21:19:10.225"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:09.944" endtime="20210326 21:19:10.225"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:10.227" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:10.226" endtime="20210326 21:19:10.228"></status>
</kw>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>SELFIE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:10.232" level="INFO">${header} = {'Content-Type': 'image/jpeg'}</msg>
<status status="PASS" starttime="20210326 21:19:10.231" endtime="20210326 21:19:10.232"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>C:\\Users\\vinicius.trindade\\banking_continuous_testing\\banking_continuous_testing\\apis\\accreditation\\documents\\holder_documents\\post.${/}..${/}..${/}..${/}..${/}..${/}images${/}accreditation${/}image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210326 21:19:10.235" level="INFO" html="yes">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210326 21:19:10.240" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" starttime="20210326 21:19:10.233" endtime="20210326 21:19:10.240"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:10.243" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/documents?type=SELFIE, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'image/jpeg'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210326 21:19:10.532" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:10.241" endtime="20210326 21:19:10.532"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.535" level="INFO">{'id': '3833fa6326ab456c9faf12e9b3da65fc', 'document_type': 'selfie', 'media_type': 'image_jpeg', 'length': 3135, '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/documents/3833fa6326ab456c9faf12e9b3da65fc', 'type': 'GET'}, 'holder': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1', 'type': 'GET'}, 'download': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/documents/3833fa6326ab456c9faf12e9b3da65fc/download', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:19:10.534" endtime="20210326 21:19:10.535"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.538" level="INFO">72685ad171549c82</msg>
<status status="PASS" starttime="20210326 21:19:10.536" endtime="20210326 21:19:10.538"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.541" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:10.539" endtime="20210326 21:19:10.541"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:10.544" level="INFO">${document_external_key} = 3833fa6326ab456c9faf12e9b3da65fc</msg>
<status status="PASS" starttime="20210326 21:19:10.542" endtime="20210326 21:19:10.544"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.547" level="INFO">${document_external_key} = 3833fa6326ab456c9faf12e9b3da65fc</msg>
<status status="PASS" starttime="20210326 21:19:10.545" endtime="20210326 21:19:10.547"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:10.229" endtime="20210326 21:19:10.547"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:10.550" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:10.548" endtime="20210326 21:19:10.550"></status>
</kw>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>RG_FRENTE</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:10.554" level="INFO">${header} = {'Content-Type': 'image/jpeg'}</msg>
<status status="PASS" starttime="20210326 21:19:10.553" endtime="20210326 21:19:10.555"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>C:\\Users\\vinicius.trindade\\banking_continuous_testing\\banking_continuous_testing\\apis\\accreditation\\documents\\holder_documents\\post.${/}..${/}..${/}..${/}..${/}..${/}images${/}accreditation${/}image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210326 21:19:10.557" level="INFO" html="yes">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210326 21:19:10.563" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" starttime="20210326 21:19:10.556" endtime="20210326 21:19:10.563"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:10.565" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/documents?type=RG_FRENTE, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'image/jpeg'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210326 21:19:10.877" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:10.563" endtime="20210326 21:19:10.878"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.880" level="INFO">{'id': 'cd64c13f029d49009ffefa3b778b70e5', 'document_type': 'rg_frente', 'media_type': 'image_jpeg', 'length': 3135, '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/documents/cd64c13f029d49009ffefa3b778b70e5', 'type': 'GET'}, 'holder': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1', 'type': 'GET'}, 'download': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/documents/cd64c13f029d49009ffefa3b778b70e5/download', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:19:10.879" endtime="20210326 21:19:10.880"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.883" level="INFO">8a51487f1e3d3322</msg>
<status status="PASS" starttime="20210326 21:19:10.882" endtime="20210326 21:19:10.884"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.887" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:10.886" endtime="20210326 21:19:10.887"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:10.890" level="INFO">${document_external_key} = cd64c13f029d49009ffefa3b778b70e5</msg>
<status status="PASS" starttime="20210326 21:19:10.888" endtime="20210326 21:19:10.890"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:10.893" level="INFO">${document_external_key} = cd64c13f029d49009ffefa3b778b70e5</msg>
<status status="PASS" starttime="20210326 21:19:10.891" endtime="20210326 21:19:10.893"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:10.551" endtime="20210326 21:19:10.893"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:10.895" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:10.893" endtime="20210326 21:19:10.895"></status>
</kw>
<kw name="criar holder document" library="accreditation_post_holder_document">
<arguments>
<arg>RG_VERSO</arg>
</arguments>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=image/jpeg</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:10.900" level="INFO">${header} = {'Content-Type': 'image/jpeg'}</msg>
<status status="PASS" starttime="20210326 21:19:10.897" endtime="20210326 21:19:10.900"></status>
</kw>
<kw name="Get Binary File" library="OperatingSystem">
<doc>Returns the contents of a specified file.</doc>
<arguments>
<arg>C:\\Users\\vinicius.trindade\\banking_continuous_testing\\banking_continuous_testing\\apis\\accreditation\\documents\\holder_documents\\post.${/}..${/}..${/}..${/}..${/}..${/}images${/}accreditation${/}image.jpg</arg>
</arguments>
<assign>
<var>${data}</var>
</assign>
<msg timestamp="20210326 21:19:10.903" level="INFO" html="yes">Getting file '&lt;a href="file://C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg"&gt;C:\Users\vinicius.trindade\banking_continuous_testing\banking_continuous_testing\images\accreditation\image.jpg&lt;/a&gt;'.</msg>
<msg timestamp="20210326 21:19:10.908" level="INFO">${data} = \xff\xd8\xff\xe0JFIF\xf0\xf0\xff\xdbC


		
%# , #&amp;')*)-0-(0%()(\xff\xc0\xa0\xf0\xff\xc4	\xff\xc4=...</msg>
<status status="PASS" starttime="20210326 21:19:10.901" endtime="20210326 21:19:10.908"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/documents?type=${document_type}</arg>
<arg>data=${data}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:10.914" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/documents?type=RG_VERSO, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'image/jpeg'} 
data=&lt;image/jpeg&gt; 
json=None</msg>
<msg timestamp="20210326 21:19:11.207" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:10.910" endtime="20210326 21:19:11.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:11.210" level="INFO">{'id': 'fddb116a56b447958dbbd3238a12b64b', 'document_type': 'rg_verso', 'media_type': 'image_jpeg', 'length': 3135, '_links': {'self': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/documents/fddb116a56b447958dbbd3238a12b64b', 'type': 'GET'}, 'holder': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1', 'type': 'GET'}, 'download': {'href': 'https://banking-accreditation-internal.staging.zoop.tech/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/documents/fddb116a56b447958dbbd3238a12b64b/download', 'type': 'GET'}}}</msg>
<status status="PASS" starttime="20210326 21:19:11.209" endtime="20210326 21:19:11.210"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:11.212" level="INFO">e2d342815467d8e7</msg>
<status status="PASS" starttime="20210326 21:19:11.211" endtime="20210326 21:19:11.212"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:11.215" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:11.214" endtime="20210326 21:19:11.216"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${document_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:11.218" level="INFO">${document_external_key} = fddb116a56b447958dbbd3238a12b64b</msg>
<status status="PASS" starttime="20210326 21:19:11.216" endtime="20210326 21:19:11.218"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${document_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:11.220" level="INFO">${document_external_key} = fddb116a56b447958dbbd3238a12b64b</msg>
<status status="PASS" starttime="20210326 21:19:11.219" endtime="20210326 21:19:11.220"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:10.896" endtime="20210326 21:19:11.220"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>201</arg>
</arguments>
<msg timestamp="20210326 21:19:11.222" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:11.221" endtime="20210326 21:19:11.223"></status>
</kw>
<kw name="solicitar aprovação do holder" library="accreditation_request_approval">
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:11.225" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:11.225" endtime="20210326 21:19:11.226"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/approval</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:11.228" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/approval, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:11.571" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:11.226" endtime="20210326 21:19:11.571"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:11.573" level="INFO">{'message': 'Approval request accepted successfully. Processing analysis'}</msg>
<status status="PASS" starttime="20210326 21:19:11.572" endtime="20210326 21:19:11.573"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:11.576" level="INFO">90c575f48ac806f2</msg>
<status status="PASS" starttime="20210326 21:19:11.574" endtime="20210326 21:19:11.576"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:11.577" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:11.576" endtime="20210326 21:19:11.577"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:11.223" endtime="20210326 21:19:11.578"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210326 21:19:11.580" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:11.579" endtime="20210326 21:19:11.580"></status>
</kw>
<kw name="recebendo notificação de aprovação" library="accreditation_risk_notification">
<kw name="Uuid 4" library="FakerLibrary">
<doc>Generates a random UUID4 string.
:param cast_to: Specify what type the UUID should be cast to. Default is `str`
:type cast_to: callable</doc>
<assign>
<var>${assessment_id}</var>
</assign>
<msg timestamp="20210326 21:19:11.583" level="INFO">${assessment_id} = 23cb2142-c641-4098-83bc-e99d1d4fb82d</msg>
<status status="PASS" starttime="20210326 21:19:11.582" endtime="20210326 21:19:11.584"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>year</arg>
</arguments>
<assign>
<var>${year}</var>
</assign>
<msg timestamp="20210326 21:19:11.585" level="INFO">${year} = 2021</msg>
<status status="PASS" starttime="20210326 21:19:11.584" endtime="20210326 21:19:11.585"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>month</arg>
</arguments>
<assign>
<var>${month}</var>
</assign>
<msg timestamp="20210326 21:19:11.587" level="INFO">${month} = 03</msg>
<status status="PASS" starttime="20210326 21:19:11.586" endtime="20210326 21:19:11.587"></status>
</kw>
<kw name="Get Time" library="BuiltIn">
<doc>Returns the given time in the requested format.</doc>
<arguments>
<arg>day</arg>
</arguments>
<assign>
<var>${day}</var>
</assign>
<msg timestamp="20210326 21:19:11.590" level="INFO">${day} = 26</msg>
<status status="PASS" starttime="20210326 21:19:11.588" endtime="20210326 21:19:11.590"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:11.592" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:11.591" endtime="20210326 21:19:11.592"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "risk.assessment.result",</arg>
<arg>"resource": "business.holder",</arg>
<arg>"created_at": "${year}-${month}-${day} 15:28:56.747Z",</arg>
<arg>"marketplace_id": "${marketplace_external_key}",</arg>
<arg>"object": {</arg>
<arg>"result": "APPROVED",</arg>
<arg>"holder_id": "${holder_external_key}",</arg>
<arg>"applicant_id": "${application_external_key}",</arg>
<arg>"assessment_id": "${assessment_id}"</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:11.595" level="INFO">${body} = { "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-03-26 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "ho...</msg>
<status status="PASS" starttime="20210326 21:19:11.593" endtime="20210326 21:19:11.595"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accreditation</arg>
<arg>/admin/internal_operation/marketplaces/${marketplace_external_key}/banking/accreditation/holders/${holder_external_key}/registration/approval</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:11.598" level="INFO">POST Request using : uri=/admin/internal_operation/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/accreditation/holders/e02d594615b54cc09f0394cfb4e985a1/registration/approval, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "type": "risk.assessment.result", "resource": "business.holder", "created_at": "2021-03-26 15:28:56.747Z", "marketplace_id": "f71a8951368a4cc085cf7875ff44e61c", "object": { "result": "APPROVED", "holder_id": "e02d594615b54cc09f0394cfb4e985a1", "applicant_id": "bcc25a6751c14b52af1340d40dba78c5", "assessment_id": "23cb2142-c641-4098-83bc-e99d1d4fb82d" } } 
json=None</msg>
<msg timestamp="20210326 21:19:11.831" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:11.596" endtime="20210326 21:19:11.832"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:11.834" level="INFO">{'message': 'Holder approved successfully'}</msg>
<status status="PASS" starttime="20210326 21:19:11.833" endtime="20210326 21:19:11.834"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:11.836" level="INFO">56a2b39dcce1a3ea</msg>
<status status="PASS" starttime="20210326 21:19:11.835" endtime="20210326 21:19:11.836"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:11.837" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:11.837" endtime="20210326 21:19:11.838"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210326 21:19:11.839" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:11.838" endtime="20210326 21:19:11.840"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:11.581" endtime="20210326 21:19:11.841"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210326 21:19:11.842" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:11.841" endtime="20210326 21:19:11.842"></status>
</kw>
<kw name="buscar account por holder" library="accounts_get_accounts_by_holder">
<kw name="conectar accounts" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=accounts</arg>
<arg>url=${account_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:11.847" level="INFO">Creating Session using : alias=accounts, url=https://banking-accounts-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:11.845" endtime="20210326 21:19:11.848"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:11.844" endtime="20210326 21:19:11.849"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>accounts</arg>
<arg>/marketplaces/${marketplace_external_key}/holders/${holder_external_key}/accounts</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:11.850" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/holders/e02d594615b54cc09f0394cfb4e985a1/accounts, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:12.622" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:11.849" endtime="20210326 21:19:12.622"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:12.624" level="INFO">{'items': [{'id': '14069ef25c9c48289cde8950940872a8', 'holder': 'e02d594615b54cc09f0394cfb4e985a1', 'balance': '0.00', 'currency': 'BRL', 'routing_number': '001', 'number': '2841688903', 'status': 'active', 'metadata': {}, 'created_at': '2021-03-27T00:19:11.957787', 'updated_at': '2021-03-27T00:19:11.957787', 'primary': True, 'marketplace_id': 'f71a8951368a4cc085cf7875ff44e61c', 'uri': '/v2/marketplaces/f71a8951368a4cc085cf7875ff44e61c/accounts/14069ef25c9c48289cde8950940872a8', 'resource': 'payment_account'}], 'has_more': False, 'limit': 100, 'total_pages': 1, 'page': 1, 'offset': 0, 'total': '1', 'query_count': '1'}</msg>
<status status="PASS" starttime="20210326 21:19:12.623" endtime="20210326 21:19:12.625"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:12.626" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:12.625" endtime="20210326 21:19:12.627"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==200</arg>
<arg>${response.json()["items"][0]["id"]}</arg>
</arguments>
<assign>
<var>${account_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:12.629" level="INFO">${account_external_key} = 14069ef25c9c48289cde8950940872a8</msg>
<status status="PASS" starttime="20210326 21:19:12.627" endtime="20210326 21:19:12.629"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${account_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:12.631" level="INFO">${account_external_key} = 14069ef25c9c48289cde8950940872a8</msg>
<status status="PASS" starttime="20210326 21:19:12.630" endtime="20210326 21:19:12.631"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==200</arg>
<arg>${response.json()["items"][0]["number"]}</arg>
</arguments>
<assign>
<var>${account_number}</var>
</assign>
<msg timestamp="20210326 21:19:12.634" level="INFO">${account_number} = 2841688903</msg>
<status status="PASS" starttime="20210326 21:19:12.632" endtime="20210326 21:19:12.634"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${account_number}</arg>
</arguments>
<msg timestamp="20210326 21:19:12.636" level="INFO">${account_number} = 2841688903</msg>
<status status="PASS" starttime="20210326 21:19:12.635" endtime="20210326 21:19:12.636"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==200</arg>
<arg>${response.json()["items"][0]["routing_number"]}</arg>
</arguments>
<assign>
<var>${account_routing_number}</var>
</assign>
<msg timestamp="20210326 21:19:12.640" level="INFO">${account_routing_number} = 001</msg>
<status status="PASS" starttime="20210326 21:19:12.638" endtime="20210326 21:19:12.640"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${account_routing_number}</arg>
</arguments>
<msg timestamp="20210326 21:19:12.641" level="INFO">${account_routing_number} = 001</msg>
<status status="PASS" starttime="20210326 21:19:12.640" endtime="20210326 21:19:12.641"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:11.843" endtime="20210326 21:19:12.643"></status>
</kw>
<kw name="Should Be Equal As Integers" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to integers.</doc>
<arguments>
<arg>${response.status_code}</arg>
<arg>200</arg>
</arguments>
<msg timestamp="20210326 21:19:12.645" level="INFO">Argument types are:
&lt;class 'int'&gt;
&lt;type 'unicode'&gt;</msg>
<status status="PASS" starttime="20210326 21:19:12.644" endtime="20210326 21:19:12.645"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:08.746" endtime="20210326 21:19:12.645"></status>
</kw>
<kw name="criar chave pix" library="pix_dict_create_entry">
<arguments>
<arg>type=email</arg>
<arg>value=${email_pix}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:12.651" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:12.650" endtime="20210326 21:19:12.653"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:12.649" endtime="20210326 21:19:12.653"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${type}</arg>
</arguments>
<msg timestamp="20210326 21:19:12.655" level="INFO">${type} = email</msg>
<status status="PASS" starttime="20210326 21:19:12.654" endtime="20210326 21:19:12.655"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${value}</arg>
</arguments>
<msg timestamp="20210326 21:19:12.657" level="INFO">${value} = mouraeduarda@azevedo.com</msg>
<status status="PASS" starttime="20210326 21:19:12.656" endtime="20210326 21:19:12.657"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:12.658" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:12.657" endtime="20210326 21:19:12.659"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"type": "${type}",</arg>
<arg>"value": "${value}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:12.661" level="INFO">${body} = { "type": "email", "value": "mouraeduarda@azevedo.com" }</msg>
<status status="PASS" starttime="20210326 21:19:12.659" endtime="20210326 21:19:12.661"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/entries</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:12.663" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/e02d594615b54cc09f0394cfb4e985a1/accounts/14069ef25c9c48289cde8950940872a8/entries, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "type": "email", "value": "mouraeduarda@azevedo.com" } 
json=None</msg>
<msg timestamp="20210326 21:19:13.452" level="INFO">${response} = &lt;Response [202]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:12.662" endtime="20210326 21:19:13.452"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:13.454" level="INFO">{'id': 'c151e806defa4f80b94d77de972ab22f', 'status': 'waiting_ownership_verification', 'created_at': '2021-03-26T09:19:13.602', 'updated_at': '2021-03-26T09:19:13.602', 'key': {'value': 'mouraeduarda@azevedo.com', 'type': 'email'}, 'account': {'id': '14069ef25c9c48289cde8950940872a8', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'e02d594615b54cc09f0394cfb4e985a1', 'owner': {'name': 'Holder de teste', 'national_registration': '68374921013', 'type': 'individual'}, 'routing_number': '001', 'number': '2841688903', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}, 'resource': 'pix.entry'}</msg>
<status status="PASS" starttime="20210326 21:19:13.453" endtime="20210326 21:19:13.454"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:13.456" level="INFO">0c49adedd6b5ca0f</msg>
<status status="PASS" starttime="20210326 21:19:13.455" endtime="20210326 21:19:13.456"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:13.459" level="INFO">202</msg>
<status status="PASS" starttime="20210326 21:19:13.457" endtime="20210326 21:19:13.459"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:13.461" level="INFO">${response} = &lt;Response [202]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:13.460" endtime="20210326 21:19:13.462"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
<arg>${response.status_code}==202</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${entry_external_key}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==202</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:13.464" endtime="20210326 21:19:13.465"></status>
</kw>
<msg timestamp="20210326 21:19:13.466" level="INFO">${entry_external_key} = c151e806defa4f80b94d77de972ab22f</msg>
<status status="PASS" starttime="20210326 21:19:13.462" endtime="20210326 21:19:13.466"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${entry_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:13.468" level="INFO">${entry_external_key} = c151e806defa4f80b94d77de972ab22f</msg>
<status status="PASS" starttime="20210326 21:19:13.467" endtime="20210326 21:19:13.468"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${response.status_code}==202</arg>
<arg>${response.json()["key"]["value"]}</arg>
</arguments>
<assign>
<var>${entry_key_value}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==202</arg>
<arg>${response.json()["key"]["value"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:13.470" endtime="20210326 21:19:13.472"></status>
</kw>
<msg timestamp="20210326 21:19:13.473" level="INFO">${entry_key_value} = mouraeduarda@azevedo.com</msg>
<status status="PASS" starttime="20210326 21:19:13.468" endtime="20210326 21:19:13.473"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${entry_key_value}</arg>
</arguments>
<msg timestamp="20210326 21:19:13.474" level="INFO">${entry_key_value} = mouraeduarda@azevedo.com</msg>
<status status="PASS" starttime="20210326 21:19:13.474" endtime="20210326 21:19:13.475"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:12.648" endtime="20210326 21:19:13.475"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '202'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao criar chave de endereçamento || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:13.478" endtime="20210326 21:19:13.480"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${holder_external_key}</arg>
</arguments>
<assign>
<var>${holder_claimer}</var>
</assign>
<msg timestamp="20210326 21:19:13.483" level="INFO">${holder_claimer} = e02d594615b54cc09f0394cfb4e985a1</msg>
<status status="PASS" starttime="20210326 21:19:13.482" endtime="20210326 21:19:13.483"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${holder_type}</arg>
</arguments>
<assign>
<var>${holder_type_claimer}</var>
</assign>
<msg timestamp="20210326 21:19:13.488" level="INFO">${holder_type_claimer} = individual</msg>
<status status="PASS" starttime="20210326 21:19:13.485" endtime="20210326 21:19:13.488"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${holder_name}</arg>
</arguments>
<assign>
<var>${holder_name_claimer}</var>
</assign>
<msg timestamp="20210326 21:19:13.492" level="INFO">${holder_name_claimer} = Holder de teste</msg>
<status status="PASS" starttime="20210326 21:19:13.490" endtime="20210326 21:19:13.492"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${national_registration}</arg>
</arguments>
<assign>
<var>${national_registration_claimer}</var>
</assign>
<msg timestamp="20210326 21:19:13.496" level="INFO">${national_registration_claimer} = 68374921013</msg>
<status status="PASS" starttime="20210326 21:19:13.494" endtime="20210326 21:19:13.496"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${account_external_key}</arg>
</arguments>
<assign>
<var>${account_claimer}</var>
</assign>
<msg timestamp="20210326 21:19:13.501" level="INFO">${account_claimer} = 14069ef25c9c48289cde8950940872a8</msg>
<status status="PASS" starttime="20210326 21:19:13.499" endtime="20210326 21:19:13.501"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${account_number}</arg>
</arguments>
<assign>
<var>${account_number_claimer}</var>
</assign>
<msg timestamp="20210326 21:19:13.506" level="INFO">${account_number_claimer} = 2841688903</msg>
<status status="PASS" starttime="20210326 21:19:13.505" endtime="20210326 21:19:13.506"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${account_routing_number}</arg>
</arguments>
<assign>
<var>${account_routing_number_claimer}</var>
</assign>
<msg timestamp="20210326 21:19:13.510" level="INFO">${account_routing_number_claimer} = 001</msg>
<status status="PASS" starttime="20210326 21:19:13.509" endtime="20210326 21:19:13.510"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${entry_external_key}</arg>
</arguments>
<assign>
<var>${entry_claimer}</var>
</assign>
<msg timestamp="20210326 21:19:13.514" level="INFO">${entry_claimer} = c151e806defa4f80b94d77de972ab22f</msg>
<status status="PASS" starttime="20210326 21:19:13.512" endtime="20210326 21:19:13.514"></status>
</kw>
<kw name="buscar verification code" library="pix_dict_verification_code">
<arguments>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>entry_external_key=${entry_claimer}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:13.525" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:13.524" endtime="20210326 21:19:13.526"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:13.521" endtime="20210326 21:19:13.527"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/admin/internal_operation/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/entries/${entry_external_key}/code</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:13.530" level="INFO">GET Request using : uri=/admin/internal_operation/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/e02d594615b54cc09f0394cfb4e985a1/accounts/14069ef25c9c48289cde8950940872a8/entries/c151e806defa4f80b94d77de972ab22f/code, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:14.276" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:13.528" endtime="20210326 21:19:14.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:14.278" level="INFO">{'code': '2674'}</msg>
<status status="PASS" starttime="20210326 21:19:14.277" endtime="20210326 21:19:14.279"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:14.280" level="INFO">1d83189e01da9b70</msg>
<status status="PASS" starttime="20210326 21:19:14.279" endtime="20210326 21:19:14.281"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:14.282" level="INFO">200</msg>
<status status="PASS" starttime="20210326 21:19:14.281" endtime="20210326 21:19:14.282"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:14.284" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:14.283" endtime="20210326 21:19:14.284"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==200</arg>
<arg>${response.json()["code"]}</arg>
</arguments>
<assign>
<var>${verification_code}</var>
</assign>
<msg timestamp="20210326 21:19:14.287" level="INFO">${verification_code} = 2674</msg>
<status status="PASS" starttime="20210326 21:19:14.285" endtime="20210326 21:19:14.287"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${verification_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:14.289" level="INFO">${verification_code} = 2674</msg>
<status status="PASS" starttime="20210326 21:19:14.288" endtime="20210326 21:19:14.289"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:13.517" endtime="20210326 21:19:14.290"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '200'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao buscar verification code || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:14.292" endtime="20210326 21:19:14.294"></status>
</kw>
<kw name="confirmar propriedade da chave pix" library="pix_dict_confirm_propriety">
<arguments>
<arg>verification_code=${verification_code}</arg>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>entry_external_key=${entry_claimer}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:14.301" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:14.300" endtime="20210326 21:19:14.302"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:14.298" endtime="20210326 21:19:14.302"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:14.304" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:14.303" endtime="20210326 21:19:14.304"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"code": "${verification_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:14.306" level="INFO">${body} = { "code": "2674" }</msg>
<status status="PASS" starttime="20210326 21:19:14.305" endtime="20210326 21:19:14.306"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/entries/${entry_external_key}/ownership</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:14.309" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/e02d594615b54cc09f0394cfb4e985a1/accounts/14069ef25c9c48289cde8950940872a8/entries/c151e806defa4f80b94d77de972ab22f/ownership, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "code": "2674" } 
json=None</msg>
<msg timestamp="20210326 21:19:15.791" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:14.307" endtime="20210326 21:19:15.791"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:15.793" level="INFO">{'id': 'c151e806defa4f80b94d77de972ab22f', 'status': 'waiting_ownership_claiming', 'created_at': '2021-03-26T09:19:13.602', 'updated_at': '2021-03-26T09:19:15.968', 'key': {'value': 'mouraeduarda@azevedo.com', 'type': 'email'}, 'account': {'id': '14069ef25c9c48289cde8950940872a8', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'e02d594615b54cc09f0394cfb4e985a1', 'owner': {'name': 'Holder de teste', 'national_registration': '68374921013', 'type': 'individual'}, 'routing_number': '001', 'number': '2841688903', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}, 'resource': 'pix.entry'}</msg>
<status status="PASS" starttime="20210326 21:19:15.793" endtime="20210326 21:19:15.793"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:15.796" level="INFO">148633f81df7a59b</msg>
<status status="PASS" starttime="20210326 21:19:15.794" endtime="20210326 21:19:15.796"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:15.797" level="INFO">201</msg>
<status status="PASS" starttime="20210326 21:19:15.796" endtime="20210326 21:19:15.798"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:15.800" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:15.799" endtime="20210326 21:19:15.801"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:14.296" endtime="20210326 21:19:15.801"></status>
</kw>
<kw name="validar chave pix" library="asserts">
<arguments>
<arg>status_code=201</arg>
<arg>key_status=waiting_ownership_claiming</arg>
<arg>key_type=${type}</arg>
<arg>key_value=${value}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>marketplace_external_key=${marketplace_external_key}</arg>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_number=${account_number_claimer}</arg>
<arg>account_routing_number=${account_routing_number_claimer}</arg>
<arg>account_type=CACC</arg>
<arg>owner_key_name=${holder_name_claimer}</arg>
<arg>national_registration=${national_registration_claimer}</arg>
<arg>holder_type=${holder_type}</arg>
<arg>psp_code=${psp_code}</arg>
<arg>psp_name=${psp_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '${status_code}'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao criar chave de endereçamento || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.809" endtime="20210326 21:19:15.810"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar status da chave</arg>
</arguments>
<msg timestamp="20210326 21:19:15.812" level="INFO">Validar status da chave</msg>
<status status="PASS" starttime="20210326 21:19:15.811" endtime="20210326 21:19:15.812"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${key_status}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.813" endtime="20210326 21:19:15.814"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validando Tipo da chave PIX</arg>
</arguments>
<msg timestamp="20210326 21:19:15.816" level="INFO">Validando Tipo da chave PIX</msg>
<status status="PASS" starttime="20210326 21:19:15.815" endtime="20210326 21:19:15.816"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["key"]["type"]}</arg>
<arg>${key_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.817" endtime="20210326 21:19:15.818"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validando Valor da chave PIX</arg>
</arguments>
<msg timestamp="20210326 21:19:15.820" level="INFO">Validando Valor da chave PIX</msg>
<status status="PASS" starttime="20210326 21:19:15.819" endtime="20210326 21:19:15.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == 'evp'</arg>
<arg>Should Not Be Empty</arg>
<arg>${response.json()["key"]["value"]}</arg>
<arg>ELSE IF</arg>
<arg>'${type}' != 'evp'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${key_value}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${key_value}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.823" endtime="20210326 21:19:15.825"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:15.821" endtime="20210326 21:19:15.825"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validando dados da conta</arg>
</arguments>
<msg timestamp="20210326 21:19:15.826" level="INFO">Validando dados da conta</msg>
<status status="PASS" starttime="20210326 21:19:15.826" endtime="20210326 21:19:15.827"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["id"]}</arg>
<arg>${account_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.827" endtime="20210326 21:19:15.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["marketplace"]}</arg>
<arg>${marketplace_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.830" endtime="20210326 21:19:15.832"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["holder"]}</arg>
<arg>${holder_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.833" endtime="20210326 21:19:15.835"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["number"]}</arg>
<arg>${account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.836" endtime="20210326 21:19:15.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["routing_number"]}</arg>
<arg>${account_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.837" endtime="20210326 21:19:15.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["type"]}</arg>
<arg>${account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.841" endtime="20210326 21:19:15.842"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar Proprietário da Account Owner</arg>
</arguments>
<msg timestamp="20210326 21:19:15.844" level="INFO">Validar Proprietário da Account Owner</msg>
<status status="PASS" starttime="20210326 21:19:15.843" endtime="20210326 21:19:15.844"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["account"]["owner"]["name"]}</arg>
<arg>${owner_key_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.844" endtime="20210326 21:19:15.846"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar national_registration da Account Owner</arg>
</arguments>
<msg timestamp="20210326 21:19:15.848" level="INFO">Validar national_registration da Account Owner</msg>
<status status="PASS" starttime="20210326 21:19:15.848" endtime="20210326 21:19:15.848"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["account"]["owner"]["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.850" endtime="20210326 21:19:15.852"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar Holder Type do Account Owner</arg>
</arguments>
<msg timestamp="20210326 21:19:15.855" level="INFO">Validar Holder Type do Account Owner</msg>
<status status="PASS" starttime="20210326 21:19:15.854" endtime="20210326 21:19:15.855"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["account"]["owner"]["type"]}</arg>
<arg>${holder_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.857" endtime="20210326 21:19:15.859"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar PSP</arg>
</arguments>
<msg timestamp="20210326 21:19:15.862" level="INFO">Validar PSP</msg>
<status status="PASS" starttime="20210326 21:19:15.860" endtime="20210326 21:19:15.862"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["psp"]["code"]}</arg>
<arg>${psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.863" endtime="20210326 21:19:15.865"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["psp"]["name"]}</arg>
<arg>${psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:15.866" endtime="20210326 21:19:15.868"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:15.804" endtime="20210326 21:19:15.869"></status>
</kw>
<kw name="criar reivindicação de posse" library="pix_dict_create_claims">
<arguments>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>entry_external_key=${entry_claimer}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:15.877" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:15.876" endtime="20210326 21:19:15.879"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:15.876" endtime="20210326 21:19:15.879"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/entries/${entry_external_key}/claims</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:15.882" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/e02d594615b54cc09f0394cfb4e985a1/accounts/14069ef25c9c48289cde8950940872a8/entries/c151e806defa4f80b94d77de972ab22f/claims, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:17.598" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:15.880" endtime="20210326 21:19:17.598"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:17.601" level="INFO">{'id': 'fd09e42738ee4810917a1a680685301a', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'created_at': '2021-03-26T09:19:17.767', 'updated_at': '2021-03-26T09:19:17.767', 'type': 'OWNERSHIP', 'status': 'open', 'key': {'value': 'mouraeduarda@azevedo.com', 'type': 'email'}, 'claimer': {'name': 'Holder de teste', 'national_registration': '68374921013', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'e02d594615b54cc09f0394cfb4e985a1', 'account': {'digital_account_id': '14069ef25c9c48289cde8950940872a8', 'routing_number': '001', 'number': '2841688903', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'donor': {'name': 'Holder de teste', 'national_registration': '35704921680', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'f35a9f57dc174783b0ac026022d7b802', 'account': {'digital_account_id': 'cc6046f5a33d4dd581406be89f225623', 'routing_number': '001', 'number': '3174786108', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'completion_period_end': '2021-04-10T12:19:17.000', 'resolution_period_end': '2021-04-03T12:19:17.000', 'resource': 'pix.claim'}</msg>
<status status="PASS" starttime="20210326 21:19:17.599" endtime="20210326 21:19:17.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:17.604" level="INFO">76ec3321f3265ef3</msg>
<status status="PASS" starttime="20210326 21:19:17.602" endtime="20210326 21:19:17.604"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:17.606" level="INFO">201</msg>
<status status="PASS" starttime="20210326 21:19:17.605" endtime="20210326 21:19:17.606"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:17.609" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:17.608" endtime="20210326 21:19:17.609"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==201</arg>
<arg>${response.json()["id"]}</arg>
</arguments>
<assign>
<var>${claim_external_key}</var>
</assign>
<msg timestamp="20210326 21:19:17.613" level="INFO">${claim_external_key} = fd09e42738ee4810917a1a680685301a</msg>
<status status="PASS" starttime="20210326 21:19:17.610" endtime="20210326 21:19:17.613"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${claim_external_key}</arg>
</arguments>
<msg timestamp="20210326 21:19:17.615" level="INFO">${claim_external_key} = fd09e42738ee4810917a1a680685301a</msg>
<status status="PASS" starttime="20210326 21:19:17.614" endtime="20210326 21:19:17.615"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:15.872" endtime="20210326 21:19:17.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '201'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao criar reivindicação || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:17.621" endtime="20210326 21:19:17.622"></status>
</kw>
<kw name="buscar reivindicação de posse" library="pix_dict_get_claims">
<arguments>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:17.630" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:17.629" endtime="20210326 21:19:17.632"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:17.627" endtime="20210326 21:19:17.632"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/claims/${claim_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:17.635" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/e02d594615b54cc09f0394cfb4e985a1/accounts/14069ef25c9c48289cde8950940872a8/claims/fd09e42738ee4810917a1a680685301a, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:18.399" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:17.633" endtime="20210326 21:19:18.399"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:18.402" level="INFO">{'id': 'fd09e42738ee4810917a1a680685301a', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'created_at': '2021-03-26T09:19:17.767', 'updated_at': '2021-03-26T09:19:17.767', 'type': 'OWNERSHIP', 'status': 'open', 'key': {'value': 'mouraeduarda@azevedo.com', 'type': 'email'}, 'claimer': {'name': 'Holder de teste', 'national_registration': '68374921013', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'e02d594615b54cc09f0394cfb4e985a1', 'account': {'digital_account_id': '14069ef25c9c48289cde8950940872a8', 'routing_number': '001', 'number': '2841688903', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'donor': {'name': 'Holder de teste', 'national_registration': '35704921680', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'f35a9f57dc174783b0ac026022d7b802', 'account': {'digital_account_id': 'cc6046f5a33d4dd581406be89f225623', 'routing_number': '001', 'number': '3174786108', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'completion_period_end': '2021-04-10T12:19:17.000', 'resolution_period_end': '2021-04-03T12:19:17.000', 'resource': 'pix.claim'}</msg>
<status status="PASS" starttime="20210326 21:19:18.401" endtime="20210326 21:19:18.403"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:18.405" level="INFO">4fbde2eae1e3683d</msg>
<status status="PASS" starttime="20210326 21:19:18.403" endtime="20210326 21:19:18.405"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:18.407" level="INFO">200</msg>
<status status="PASS" starttime="20210326 21:19:18.406" endtime="20210326 21:19:18.407"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:18.409" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:18.408" endtime="20210326 21:19:18.409"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:17.625" endtime="20210326 21:19:18.409"></status>
</kw>
<kw name="validar reivindicação" library="asserts">
<arguments>
<arg>status_code=200</arg>
<arg>marketplace_external_key=${marketplace_external_key}</arg>
<arg>claim_type=OWNERSHIP</arg>
<arg>claim_status=open</arg>
<arg>key_value=${value}</arg>
<arg>key_type=${type}</arg>
<arg>claimer_name=${holder_name_claimer}</arg>
<arg>claimer_national_registration=${national_registration_claimer}</arg>
<arg>claimer_type=${holder_type_claimer}</arg>
<arg>claimer_marketplace=${marketplace_external_key}</arg>
<arg>claimer_holder_id=${holder_claimer}</arg>
<arg>claimer_account_id=${account_claimer}</arg>
<arg>claimer_routing_number=${account_routing_number_claimer}</arg>
<arg>claimer_account_number=${account_number_claimer}</arg>
<arg>claimer_account_type=CACC</arg>
<arg>claimer_psp_code=${psp_code}</arg>
<arg>claimer_psp_name=${psp_name}</arg>
<arg>donor_name=${holder_name_owner}</arg>
<arg>donor_national_registration=${national_registration_owner}</arg>
<arg>donor_type=${holder_type_owner}</arg>
<arg>donor_marketplace=${marketplace_external_key}</arg>
<arg>donor_holder_id=${holder_owner}</arg>
<arg>donor_account_id=${account_owner}</arg>
<arg>donor_routing_number=${account_routing_number_owner}</arg>
<arg>donor_account_number=${account_number_owner}</arg>
<arg>donor_account_type=CACC</arg>
<arg>donor_psp_code=${psp_code}</arg>
<arg>donor_psp_name=${psp_name}</arg>
<arg>claim_resource=pix.claim</arg>
</arguments>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=datetime</arg>
</arguments>
<assign>
<var>${date}</var>
</assign>
<msg timestamp="20210326 21:19:18.422" level="INFO">${date} = 2021-03-26 21:19:18.421397</msg>
<status status="PASS" starttime="20210326 21:19:18.420" endtime="20210326 21:19:18.422"></status>
</kw>
<kw name="Convert Date" library="DateTime">
<doc>Converts between supported `date formats`.</doc>
<arguments>
<arg>${date}</arg>
<arg>exclude_millis=yes</arg>
<arg>result_format=%Y-%m-%d</arg>
<arg>date_format=%d-%m-%Y</arg>
</arguments>
<assign>
<var>${date}</var>
</assign>
<msg timestamp="20210326 21:19:18.424" level="INFO">${date} = 2021-03-26</msg>
<status status="PASS" starttime="20210326 21:19:18.423" endtime="20210326 21:19:18.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '${status_code}'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao criar reivindicação || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.425" endtime="20210326 21:19:18.426"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${response.json()["id"]}</arg>
</arguments>
<msg timestamp="20210326 21:19:18.429" level="INFO">Length is 32</msg>
<status status="PASS" starttime="20210326 21:19:18.428" endtime="20210326 21:19:18.430"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["marketplace"]}</arg>
<arg>${marketplace_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.431" endtime="20210326 21:19:18.432"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${response.json()["created_at"]}</arg>
<arg>${date}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.433" endtime="20210326 21:19:18.435"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${response.json()["updated_at"]}</arg>
<arg>${date}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.436" endtime="20210326 21:19:18.437"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>${claim_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.437" endtime="20210326 21:19:18.440"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${claim_status}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.441" endtime="20210326 21:19:18.442"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${key_value}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.443" endtime="20210326 21:19:18.445"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["key"]["type"]}</arg>
<arg>${key_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.446" endtime="20210326 21:19:18.448"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["name"]}</arg>
<arg>${claimer_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.450" endtime="20210326 21:19:18.453"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["national_registration"]}</arg>
<arg>${claimer_national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.454" endtime="20210326 21:19:18.456"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["type"]}</arg>
<arg>${claimer_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.457" endtime="20210326 21:19:18.459"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["marketplace"]}</arg>
<arg>${claimer_marketplace}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.460" endtime="20210326 21:19:18.461"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["holder"]}</arg>
<arg>${claimer_holder_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.463" endtime="20210326 21:19:18.466"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["digital_account_id"]}</arg>
<arg>${claimer_account_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.468" endtime="20210326 21:19:18.471"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["routing_number"]}</arg>
<arg>${claimer_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.472" endtime="20210326 21:19:18.475"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["number"]}</arg>
<arg>${claimer_account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.476" endtime="20210326 21:19:18.477"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["type"]}</arg>
<arg>${claimer_account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.478" endtime="20210326 21:19:18.480"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["psp"]["code"]}</arg>
<arg>${claimer_psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.481" endtime="20210326 21:19:18.483"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["psp"]["name"]}</arg>
<arg>${claimer_psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.484" endtime="20210326 21:19:18.487"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["name"]}</arg>
<arg>${donor_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.489" endtime="20210326 21:19:18.491"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["national_registration"]}</arg>
<arg>${donor_national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.492" endtime="20210326 21:19:18.494"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["type"]}</arg>
<arg>${donor_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.494" endtime="20210326 21:19:18.496"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["marketplace"]}</arg>
<arg>${donor_marketplace}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.497" endtime="20210326 21:19:18.498"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["holder"]}</arg>
<arg>${donor_holder_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.499" endtime="20210326 21:19:18.501"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["digital_account_id"]}</arg>
<arg>${donor_account_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.502" endtime="20210326 21:19:18.504"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["routing_number"]}</arg>
<arg>${donor_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.505" endtime="20210326 21:19:18.508"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["number"]}</arg>
<arg>${donor_account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.509" endtime="20210326 21:19:18.511"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["type"]}</arg>
<arg>${donor_account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.511" endtime="20210326 21:19:18.513"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["psp"]["code"]}</arg>
<arg>${donor_psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.514" endtime="20210326 21:19:18.516"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["psp"]["name"]}</arg>
<arg>${donor_psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.516" endtime="20210326 21:19:18.517"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["resource"]}</arg>
<arg>${claim_resource}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:18.520" endtime="20210326 21:19:18.521"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:18.412" endtime="20210326 21:19:18.522"></status>
</kw>
<kw name="receber notificação de reivindicação" library="pix_dict_receive_claim_notification">
<arguments>
<arg>key_pix=${value}</arg>
<arg>account_number=${account_number_owner}</arg>
<arg>claimer_tax_id=${national_registration_owner}</arg>
<arg>claimer_name=${holder_name_owner}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
<arg>claim_notification_status=WAITING_RESOLUTION</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:18.530" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:18.529" endtime="20210326 21:19:18.531"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:18.527" endtime="20210326 21:19:18.531"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:18.535" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:18.532" endtime="20210326 21:19:18.535"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"data": {</arg>
<arg>"claim": {</arg>
<arg>"type": "OWNERSHIP",</arg>
<arg>"key": "${key_pix}",</arg>
<arg>"key_type": "PHONE",</arg>
<arg>"claimer_account": {</arg>
<arg>"participant": "19468242",</arg>
<arg>"branch": "0001",</arg>
<arg>"account_number": "${account_number}",</arg>
<arg>"account_type": "CACC"</arg>
<arg>},</arg>
<arg>"claimer": {</arg>
<arg>"type": "NATURAL_PERSON",</arg>
<arg>"tax_id_number": "${claimer_tax_id}",</arg>
<arg>"name": "${claimer_name}"</arg>
<arg>},</arg>
<arg>"donor_participant": "19468242",</arg>
<arg>"id": "${claim_external_key}",</arg>
<arg>"status": "${claim_notification_status}",</arg>
<arg>"resolution_period_end": "2020-10-18T10:00:00.000Z",</arg>
<arg>"completion_period_end": "2020-10-25T10:00:00.000Z",</arg>
<arg>"last_modified": "2020-10-17T10:00:00.000Z"</arg>
<arg>}</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:18.541" level="INFO">${body} = { "data": { "claim": { "type": "OWNERSHIP", "key": "mouraeduarda@azevedo.com", "key_type": "PHONE", "claimer_account": { "participant": "19468242", "branch": "0001", "account_number": "3174786108", "a...</msg>
<status status="PASS" starttime="20210326 21:19:18.536" endtime="20210326 21:19:18.541"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/banking/internal/dict/claims</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:18.544" level="INFO">POST Request using : uri=/banking/internal/dict/claims, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "data": { "claim": { "type": "OWNERSHIP", "key": "mouraeduarda@azevedo.com", "key_type": "PHONE", "claimer_account": { "participant": "19468242", "branch": "0001", "account_number": "3174786108", "account_type": "CACC" }, "claimer": { "type": "NATURAL_PERSON", "tax_id_number": "35704921680", "name": "Holder de teste" }, "donor_participant": "19468242", "id": "fd09e42738ee4810917a1a680685301a", "status": "WAITING_RESOLUTION", "resolution_period_end": "2020-10-18T10:00:00.000Z", "completion_period_end": "2020-10-25T10:00:00.000Z", "last_modified": "2020-10-17T10:00:00.000Z" } } } 
json=None</msg>
<msg timestamp="20210326 21:19:19.305" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:18.542" endtime="20210326 21:19:19.307"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:19.309" level="INFO">200</msg>
<status status="PASS" starttime="20210326 21:19:19.307" endtime="20210326 21:19:19.309"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:19.311" level="INFO">181d60e93e8a3cb1</msg>
<status status="PASS" starttime="20210326 21:19:19.309" endtime="20210326 21:19:19.311"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:18.524" endtime="20210326 21:19:19.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '200'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao receber notificação da reivindicação || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:19.313" endtime="20210326 21:19:19.315"></status>
</kw>
<kw name="buscar reivindicação de posse" library="pix_dict_get_claims">
<arguments>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:19.322" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:19.321" endtime="20210326 21:19:19.324"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:19.319" endtime="20210326 21:19:19.324"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/claims/${claim_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:19.326" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/e02d594615b54cc09f0394cfb4e985a1/accounts/14069ef25c9c48289cde8950940872a8/claims/fd09e42738ee4810917a1a680685301a, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:20.088" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:19.324" endtime="20210326 21:19:20.089"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:20.093" level="INFO">{'id': 'fd09e42738ee4810917a1a680685301a', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'created_at': '2021-03-26T09:19:17.767', 'updated_at': '2021-03-26T09:19:19.480', 'type': 'OWNERSHIP', 'status': 'waiting_resolution', 'key': {'value': 'mouraeduarda@azevedo.com', 'type': 'email'}, 'claimer': {'name': 'Holder de teste', 'national_registration': '68374921013', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'e02d594615b54cc09f0394cfb4e985a1', 'account': {'digital_account_id': '14069ef25c9c48289cde8950940872a8', 'routing_number': '001', 'number': '2841688903', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'donor': {'name': 'Holder de teste', 'national_registration': '35704921680', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'f35a9f57dc174783b0ac026022d7b802', 'account': {'digital_account_id': 'cc6046f5a33d4dd581406be89f225623', 'routing_number': '001', 'number': '3174786108', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'completion_period_end': '2021-04-10T12:19:17.000', 'resolution_period_end': '2021-04-03T12:19:17.000', 'resource': 'pix.claim'}</msg>
<status status="PASS" starttime="20210326 21:19:20.091" endtime="20210326 21:19:20.093"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:20.096" level="INFO">b05644929dbddf64</msg>
<status status="PASS" starttime="20210326 21:19:20.095" endtime="20210326 21:19:20.097"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:20.099" level="INFO">200</msg>
<status status="PASS" starttime="20210326 21:19:20.098" endtime="20210326 21:19:20.100"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:20.104" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:20.102" endtime="20210326 21:19:20.105"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:19.317" endtime="20210326 21:19:20.105"></status>
</kw>
<kw name="validar reivindicação" library="asserts">
<arguments>
<arg>status_code=200</arg>
<arg>marketplace_external_key=${marketplace_external_key}</arg>
<arg>claim_type=OWNERSHIP</arg>
<arg>claim_status=waiting_resolution</arg>
<arg>key_value=${value}</arg>
<arg>key_type=${type}</arg>
<arg>claimer_name=${holder_name_claimer}</arg>
<arg>claimer_national_registration=${national_registration_claimer}</arg>
<arg>claimer_type=${holder_type_claimer}</arg>
<arg>claimer_marketplace=${marketplace_external_key}</arg>
<arg>claimer_holder_id=${holder_claimer}</arg>
<arg>claimer_account_id=${account_claimer}</arg>
<arg>claimer_routing_number=${account_routing_number_claimer}</arg>
<arg>claimer_account_number=${account_number_claimer}</arg>
<arg>claimer_account_type=CACC</arg>
<arg>claimer_psp_code=${psp_code}</arg>
<arg>claimer_psp_name=${psp_name}</arg>
<arg>donor_name=${holder_name_owner}</arg>
<arg>donor_national_registration=${national_registration_owner}</arg>
<arg>donor_type=${holder_type_owner}</arg>
<arg>donor_marketplace=${marketplace_external_key}</arg>
<arg>donor_holder_id=${holder_owner}</arg>
<arg>donor_account_id=${account_owner}</arg>
<arg>donor_routing_number=${account_routing_number_owner}</arg>
<arg>donor_account_number=${account_number_owner}</arg>
<arg>donor_account_type=CACC</arg>
<arg>donor_psp_code=${psp_code}</arg>
<arg>donor_psp_name=${psp_name}</arg>
<arg>claim_resource=pix.claim</arg>
</arguments>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=datetime</arg>
</arguments>
<assign>
<var>${date}</var>
</assign>
<msg timestamp="20210326 21:19:20.119" level="INFO">${date} = 2021-03-26 21:19:20.118487</msg>
<status status="PASS" starttime="20210326 21:19:20.117" endtime="20210326 21:19:20.119"></status>
</kw>
<kw name="Convert Date" library="DateTime">
<doc>Converts between supported `date formats`.</doc>
<arguments>
<arg>${date}</arg>
<arg>exclude_millis=yes</arg>
<arg>result_format=%Y-%m-%d</arg>
<arg>date_format=%d-%m-%Y</arg>
</arguments>
<assign>
<var>${date}</var>
</assign>
<msg timestamp="20210326 21:19:20.121" level="INFO">${date} = 2021-03-26</msg>
<status status="PASS" starttime="20210326 21:19:20.120" endtime="20210326 21:19:20.122"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '${status_code}'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao criar reivindicação || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.123" endtime="20210326 21:19:20.125"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${response.json()["id"]}</arg>
</arguments>
<msg timestamp="20210326 21:19:20.127" level="INFO">Length is 32</msg>
<status status="PASS" starttime="20210326 21:19:20.126" endtime="20210326 21:19:20.128"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["marketplace"]}</arg>
<arg>${marketplace_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.129" endtime="20210326 21:19:20.132"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${response.json()["created_at"]}</arg>
<arg>${date}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.133" endtime="20210326 21:19:20.136"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${response.json()["updated_at"]}</arg>
<arg>${date}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.137" endtime="20210326 21:19:20.139"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>${claim_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.140" endtime="20210326 21:19:20.141"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${claim_status}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.142" endtime="20210326 21:19:20.144"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${key_value}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.145" endtime="20210326 21:19:20.147"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["key"]["type"]}</arg>
<arg>${key_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.148" endtime="20210326 21:19:20.152"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["name"]}</arg>
<arg>${claimer_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.153" endtime="20210326 21:19:20.155"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["national_registration"]}</arg>
<arg>${claimer_national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.156" endtime="20210326 21:19:20.158"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["type"]}</arg>
<arg>${claimer_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.160" endtime="20210326 21:19:20.162"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["marketplace"]}</arg>
<arg>${claimer_marketplace}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.163" endtime="20210326 21:19:20.164"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["holder"]}</arg>
<arg>${claimer_holder_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.165" endtime="20210326 21:19:20.168"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["digital_account_id"]}</arg>
<arg>${claimer_account_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.170" endtime="20210326 21:19:20.173"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["routing_number"]}</arg>
<arg>${claimer_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.175" endtime="20210326 21:19:20.177"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["number"]}</arg>
<arg>${claimer_account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.178" endtime="20210326 21:19:20.180"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["type"]}</arg>
<arg>${claimer_account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.180" endtime="20210326 21:19:20.182"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["psp"]["code"]}</arg>
<arg>${claimer_psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.183" endtime="20210326 21:19:20.184"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["psp"]["name"]}</arg>
<arg>${claimer_psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.185" endtime="20210326 21:19:20.187"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["name"]}</arg>
<arg>${donor_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.188" endtime="20210326 21:19:20.189"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["national_registration"]}</arg>
<arg>${donor_national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.190" endtime="20210326 21:19:20.193"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["type"]}</arg>
<arg>${donor_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.195" endtime="20210326 21:19:20.197"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["marketplace"]}</arg>
<arg>${donor_marketplace}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.198" endtime="20210326 21:19:20.200"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["holder"]}</arg>
<arg>${donor_holder_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.201" endtime="20210326 21:19:20.203"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["digital_account_id"]}</arg>
<arg>${donor_account_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.204" endtime="20210326 21:19:20.206"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["routing_number"]}</arg>
<arg>${donor_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.207" endtime="20210326 21:19:20.208"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["number"]}</arg>
<arg>${donor_account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.209" endtime="20210326 21:19:20.211"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["type"]}</arg>
<arg>${donor_account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.212" endtime="20210326 21:19:20.214"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["psp"]["code"]}</arg>
<arg>${donor_psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.215" endtime="20210326 21:19:20.216"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["psp"]["name"]}</arg>
<arg>${donor_psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.217" endtime="20210326 21:19:20.219"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["resource"]}</arg>
<arg>${claim_resource}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:20.219" endtime="20210326 21:19:20.221"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:20.108" endtime="20210326 21:19:20.221"></status>
</kw>
<kw name="${index} IN RANGE [ 60 ]" type="for">
<kw name="${index} = 0" type="foritem">
<kw name="confirmar reivindicação de posse" library="pix_dict_confirm_claims">
<arguments>
<arg>holder_external_key=${holder_owner}</arg>
<arg>account_external_key=${account_owner}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:20.229" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:20.227" endtime="20210326 21:19:20.230"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:20.225" endtime="20210326 21:19:20.230"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/claims/${claim_external_key}/confirm</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:20.233" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/f35a9f57dc174783b0ac026022d7b802/accounts/cc6046f5a33d4dd581406be89f225623/claims/fd09e42738ee4810917a1a680685301a/confirm, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:21.914" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:20.231" endtime="20210326 21:19:21.915"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:21.917" level="INFO">{'code': 9997, 'status': 'bad_request', 'type': 'integration_error', 'message': 'Claim operation invalid', 'category': 'unexpected', 'status_code': 400}</msg>
<status status="PASS" starttime="20210326 21:19:21.916" endtime="20210326 21:19:21.918"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:21.920" level="INFO">66f73d2c0ca5fade</msg>
<status status="PASS" starttime="20210326 21:19:21.919" endtime="20210326 21:19:21.921"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:21.923" level="INFO">400</msg>
<status status="PASS" starttime="20210326 21:19:21.922" endtime="20210326 21:19:21.923"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:21.925" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:21.924" endtime="20210326 21:19:21.925"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:20.224" endtime="20210326 21:19:21.926"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["message"]}' == 'Claim confirmed successfully'</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:21.926" endtime="20210326 21:19:21.928"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:20.223" endtime="20210326 21:19:21.928"></status>
</kw>
<kw name="${index} = 1" type="foritem">
<kw name="confirmar reivindicação de posse" library="pix_dict_confirm_claims">
<arguments>
<arg>holder_external_key=${holder_owner}</arg>
<arg>account_external_key=${account_owner}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:21.934" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:21.933" endtime="20210326 21:19:21.935"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:21.931" endtime="20210326 21:19:21.935"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/claims/${claim_external_key}/confirm</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:21.937" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/f35a9f57dc174783b0ac026022d7b802/accounts/cc6046f5a33d4dd581406be89f225623/claims/fd09e42738ee4810917a1a680685301a/confirm, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:23.693" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:21.936" endtime="20210326 21:19:23.693"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:23.696" level="INFO">{'code': 9997, 'status': 'bad_request', 'type': 'integration_error', 'message': 'Claim operation invalid', 'category': 'unexpected', 'status_code': 400}</msg>
<status status="PASS" starttime="20210326 21:19:23.694" endtime="20210326 21:19:23.696"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:23.698" level="INFO">26534928241ce6c9</msg>
<status status="PASS" starttime="20210326 21:19:23.697" endtime="20210326 21:19:23.698"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:23.700" level="INFO">400</msg>
<status status="PASS" starttime="20210326 21:19:23.699" endtime="20210326 21:19:23.701"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:23.702" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:23.702" endtime="20210326 21:19:23.703"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:21.929" endtime="20210326 21:19:23.703"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["message"]}' == 'Claim confirmed successfully'</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:23.704" endtime="20210326 21:19:23.706"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:21.928" endtime="20210326 21:19:23.706"></status>
</kw>
<kw name="${index} = 2" type="foritem">
<kw name="confirmar reivindicação de posse" library="pix_dict_confirm_claims">
<arguments>
<arg>holder_external_key=${holder_owner}</arg>
<arg>account_external_key=${account_owner}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:23.712" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:23.711" endtime="20210326 21:19:23.713"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:23.710" endtime="20210326 21:19:23.713"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/claims/${claim_external_key}/confirm</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:23.716" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/f35a9f57dc174783b0ac026022d7b802/accounts/cc6046f5a33d4dd581406be89f225623/claims/fd09e42738ee4810917a1a680685301a/confirm, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:25.529" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:23.714" endtime="20210326 21:19:25.529"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:25.532" level="INFO">{'code': 9997, 'status': 'bad_request', 'type': 'integration_error', 'message': 'Claim operation invalid', 'category': 'unexpected', 'status_code': 400}</msg>
<status status="PASS" starttime="20210326 21:19:25.530" endtime="20210326 21:19:25.532"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:25.534" level="INFO">83a50e5da8b14ec8</msg>
<status status="PASS" starttime="20210326 21:19:25.534" endtime="20210326 21:19:25.535"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:25.537" level="INFO">400</msg>
<status status="PASS" starttime="20210326 21:19:25.536" endtime="20210326 21:19:25.537"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:25.539" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:25.538" endtime="20210326 21:19:25.540"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:23.707" endtime="20210326 21:19:25.540"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["message"]}' == 'Claim confirmed successfully'</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:25.542" endtime="20210326 21:19:25.543"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:23.706" endtime="20210326 21:19:25.544"></status>
</kw>
<kw name="${index} = 3" type="foritem">
<kw name="confirmar reivindicação de posse" library="pix_dict_confirm_claims">
<arguments>
<arg>holder_external_key=${holder_owner}</arg>
<arg>account_external_key=${account_owner}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:25.550" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:25.549" endtime="20210326 21:19:25.552"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:25.547" endtime="20210326 21:19:25.552"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/claims/${claim_external_key}/confirm</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:25.555" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/f35a9f57dc174783b0ac026022d7b802/accounts/cc6046f5a33d4dd581406be89f225623/claims/fd09e42738ee4810917a1a680685301a/confirm, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:27.197" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:25.553" endtime="20210326 21:19:27.198"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:27.201" level="INFO">{'code': 9997, 'status': 'bad_request', 'type': 'integration_error', 'message': 'Claim operation invalid', 'category': 'unexpected', 'status_code': 400}</msg>
<status status="PASS" starttime="20210326 21:19:27.199" endtime="20210326 21:19:27.201"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:27.205" level="INFO">5a84a2989df14518</msg>
<status status="PASS" starttime="20210326 21:19:27.203" endtime="20210326 21:19:27.206"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:27.208" level="INFO">400</msg>
<status status="PASS" starttime="20210326 21:19:27.207" endtime="20210326 21:19:27.208"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:27.211" level="INFO">${response} = &lt;Response [400]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:27.210" endtime="20210326 21:19:27.211"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:25.545" endtime="20210326 21:19:27.212"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["message"]}' == 'Claim confirmed successfully'</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:27.213" endtime="20210326 21:19:27.215"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:25.544" endtime="20210326 21:19:27.216"></status>
</kw>
<kw name="${index} = 4" type="foritem">
<kw name="confirmar reivindicação de posse" library="pix_dict_confirm_claims">
<arguments>
<arg>holder_external_key=${holder_owner}</arg>
<arg>account_external_key=${account_owner}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:27.223" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:27.221" endtime="20210326 21:19:27.224"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:27.220" endtime="20210326 21:19:27.224"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/claims/${claim_external_key}/confirm</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:27.228" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/f35a9f57dc174783b0ac026022d7b802/accounts/cc6046f5a33d4dd581406be89f225623/claims/fd09e42738ee4810917a1a680685301a/confirm, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:29.029" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:27.225" endtime="20210326 21:19:29.030"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:29.032" level="INFO">{'message': 'Claim confirmed successfully'}</msg>
<status status="PASS" starttime="20210326 21:19:29.031" endtime="20210326 21:19:29.032"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:29.034" level="INFO">7769d4850b97f0e7</msg>
<status status="PASS" starttime="20210326 21:19:29.033" endtime="20210326 21:19:29.035"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:29.037" level="INFO">200</msg>
<status status="PASS" starttime="20210326 21:19:29.035" endtime="20210326 21:19:29.037"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:29.039" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:29.038" endtime="20210326 21:19:29.039"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:27.217" endtime="20210326 21:19:29.039"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${response.json()["message"]}' == 'Claim confirmed successfully'</arg>
</arguments>
<msg timestamp="20210326 21:19:29.042" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" starttime="20210326 21:19:29.040" endtime="20210326 21:19:29.042"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:27.216" endtime="20210326 21:19:29.042"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:20.222" endtime="20210326 21:19:29.043"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '200'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao confirmar reivindicação || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.047" endtime="20210326 21:19:29.049"></status>
</kw>
<kw name="buscar reivindicação de posse" library="pix_dict_get_claims">
<arguments>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:29.055" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:29.054" endtime="20210326 21:19:29.056"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:29.052" endtime="20210326 21:19:29.056"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/claims/${claim_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:29.059" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/e02d594615b54cc09f0394cfb4e985a1/accounts/14069ef25c9c48289cde8950940872a8/claims/fd09e42738ee4810917a1a680685301a, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:29.794" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:29.057" endtime="20210326 21:19:29.794"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:29.796" level="INFO">{'id': 'fd09e42738ee4810917a1a680685301a', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'created_at': '2021-03-26T09:19:17.767', 'updated_at': '2021-03-26T09:19:29.206', 'type': 'OWNERSHIP', 'status': 'confirmed', 'confirm_reason': 'USER_REQUESTED', 'key': {'value': 'mouraeduarda@azevedo.com', 'type': 'email'}, 'claimer': {'name': 'Holder de teste', 'national_registration': '68374921013', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'e02d594615b54cc09f0394cfb4e985a1', 'account': {'digital_account_id': '14069ef25c9c48289cde8950940872a8', 'routing_number': '001', 'number': '2841688903', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'donor': {'name': 'Holder de teste', 'national_registration': '35704921680', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'f35a9f57dc174783b0ac026022d7b802', 'account': {'digital_account_id': 'cc6046f5a33d4dd581406be89f225623', 'routing_number': '001', 'number': '3174786108', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'completion_period_end': '2021-03-27T12:19:00.000', 'resolution_period_end': '2021-04-03T12:19:17.000', 'resource': 'pix.claim'}</msg>
<status status="PASS" starttime="20210326 21:19:29.795" endtime="20210326 21:19:29.797"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:29.799" level="INFO">97bcb42fc3cecffb</msg>
<status status="PASS" starttime="20210326 21:19:29.797" endtime="20210326 21:19:29.799"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:29.801" level="INFO">200</msg>
<status status="PASS" starttime="20210326 21:19:29.800" endtime="20210326 21:19:29.801"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:29.803" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:29.802" endtime="20210326 21:19:29.803"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:29.050" endtime="20210326 21:19:29.804"></status>
</kw>
<kw name="validar reivindicação" library="asserts">
<arguments>
<arg>status_code=200</arg>
<arg>marketplace_external_key=${marketplace_external_key}</arg>
<arg>claim_type=OWNERSHIP</arg>
<arg>claim_status=confirmed</arg>
<arg>key_value=${value}</arg>
<arg>key_type=${type}</arg>
<arg>claimer_name=${holder_name_claimer}</arg>
<arg>claimer_national_registration=${national_registration_claimer}</arg>
<arg>claimer_type=${holder_type_claimer}</arg>
<arg>claimer_marketplace=${marketplace_external_key}</arg>
<arg>claimer_holder_id=${holder_claimer}</arg>
<arg>claimer_account_id=${account_claimer}</arg>
<arg>claimer_routing_number=${account_routing_number_claimer}</arg>
<arg>claimer_account_number=${account_number_claimer}</arg>
<arg>claimer_account_type=CACC</arg>
<arg>claimer_psp_code=${psp_code}</arg>
<arg>claimer_psp_name=${psp_name}</arg>
<arg>donor_name=${holder_name_owner}</arg>
<arg>donor_national_registration=${national_registration_owner}</arg>
<arg>donor_type=${holder_type_owner}</arg>
<arg>donor_marketplace=${marketplace_external_key}</arg>
<arg>donor_holder_id=${holder_owner}</arg>
<arg>donor_account_id=${account_owner}</arg>
<arg>donor_routing_number=${account_routing_number_owner}</arg>
<arg>donor_account_number=${account_number_owner}</arg>
<arg>donor_account_type=CACC</arg>
<arg>donor_psp_code=${psp_code}</arg>
<arg>donor_psp_name=${psp_name}</arg>
<arg>claim_resource=pix.claim</arg>
</arguments>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=datetime</arg>
</arguments>
<assign>
<var>${date}</var>
</assign>
<msg timestamp="20210326 21:19:29.814" level="INFO">${date} = 2021-03-26 21:19:29.812606</msg>
<status status="PASS" starttime="20210326 21:19:29.813" endtime="20210326 21:19:29.814"></status>
</kw>
<kw name="Convert Date" library="DateTime">
<doc>Converts between supported `date formats`.</doc>
<arguments>
<arg>${date}</arg>
<arg>exclude_millis=yes</arg>
<arg>result_format=%Y-%m-%d</arg>
<arg>date_format=%d-%m-%Y</arg>
</arguments>
<assign>
<var>${date}</var>
</assign>
<msg timestamp="20210326 21:19:29.816" level="INFO">${date} = 2021-03-26</msg>
<status status="PASS" starttime="20210326 21:19:29.815" endtime="20210326 21:19:29.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '${status_code}'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao criar reivindicação || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.817" endtime="20210326 21:19:29.818"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${response.json()["id"]}</arg>
</arguments>
<msg timestamp="20210326 21:19:29.820" level="INFO">Length is 32</msg>
<status status="PASS" starttime="20210326 21:19:29.819" endtime="20210326 21:19:29.821"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["marketplace"]}</arg>
<arg>${marketplace_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.821" endtime="20210326 21:19:29.823"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${response.json()["created_at"]}</arg>
<arg>${date}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.824" endtime="20210326 21:19:29.825"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${response.json()["updated_at"]}</arg>
<arg>${date}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.826" endtime="20210326 21:19:29.828"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>${claim_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.829" endtime="20210326 21:19:29.830"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${claim_status}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.831" endtime="20210326 21:19:29.834"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${key_value}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.835" endtime="20210326 21:19:29.837"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["key"]["type"]}</arg>
<arg>${key_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.838" endtime="20210326 21:19:29.839"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["name"]}</arg>
<arg>${claimer_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.840" endtime="20210326 21:19:29.842"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["national_registration"]}</arg>
<arg>${claimer_national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.843" endtime="20210326 21:19:29.844"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["type"]}</arg>
<arg>${claimer_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.846" endtime="20210326 21:19:29.848"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["marketplace"]}</arg>
<arg>${claimer_marketplace}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.850" endtime="20210326 21:19:29.853"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["holder"]}</arg>
<arg>${claimer_holder_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.854" endtime="20210326 21:19:29.858"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["digital_account_id"]}</arg>
<arg>${claimer_account_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.859" endtime="20210326 21:19:29.861"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["routing_number"]}</arg>
<arg>${claimer_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.862" endtime="20210326 21:19:29.864"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["number"]}</arg>
<arg>${claimer_account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.865" endtime="20210326 21:19:29.867"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["type"]}</arg>
<arg>${claimer_account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.868" endtime="20210326 21:19:29.871"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["psp"]["code"]}</arg>
<arg>${claimer_psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.872" endtime="20210326 21:19:29.874"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["psp"]["name"]}</arg>
<arg>${claimer_psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.875" endtime="20210326 21:19:29.877"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["name"]}</arg>
<arg>${donor_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.878" endtime="20210326 21:19:29.879"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["national_registration"]}</arg>
<arg>${donor_national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.880" endtime="20210326 21:19:29.882"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["type"]}</arg>
<arg>${donor_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.883" endtime="20210326 21:19:29.885"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["marketplace"]}</arg>
<arg>${donor_marketplace}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.886" endtime="20210326 21:19:29.887"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["holder"]}</arg>
<arg>${donor_holder_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.889" endtime="20210326 21:19:29.890"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["digital_account_id"]}</arg>
<arg>${donor_account_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.892" endtime="20210326 21:19:29.894"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["routing_number"]}</arg>
<arg>${donor_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.895" endtime="20210326 21:19:29.896"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["number"]}</arg>
<arg>${donor_account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.897" endtime="20210326 21:19:29.899"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["type"]}</arg>
<arg>${donor_account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.900" endtime="20210326 21:19:29.901"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["psp"]["code"]}</arg>
<arg>${donor_psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.902" endtime="20210326 21:19:29.905"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["psp"]["name"]}</arg>
<arg>${donor_psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.905" endtime="20210326 21:19:29.907"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["resource"]}</arg>
<arg>${claim_resource}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:29.908" endtime="20210326 21:19:29.910"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:29.806" endtime="20210326 21:19:29.911"></status>
</kw>
<kw name="receber notificação de reivindicação" library="pix_dict_receive_claim_notification">
<arguments>
<arg>key_pix=${value}</arg>
<arg>account_number=${account_number_owner}</arg>
<arg>claimer_tax_id=${national_registration_owner}</arg>
<arg>claimer_name=${holder_name_owner}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
<arg>claim_notification_status=CONFIRMED</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:29.924" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:29.923" endtime="20210326 21:19:29.925"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:29.919" endtime="20210326 21:19:29.926"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:29.929" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:29.928" endtime="20210326 21:19:29.930"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"data": {</arg>
<arg>"claim": {</arg>
<arg>"type": "OWNERSHIP",</arg>
<arg>"key": "${key_pix}",</arg>
<arg>"key_type": "PHONE",</arg>
<arg>"claimer_account": {</arg>
<arg>"participant": "19468242",</arg>
<arg>"branch": "0001",</arg>
<arg>"account_number": "${account_number}",</arg>
<arg>"account_type": "CACC"</arg>
<arg>},</arg>
<arg>"claimer": {</arg>
<arg>"type": "NATURAL_PERSON",</arg>
<arg>"tax_id_number": "${claimer_tax_id}",</arg>
<arg>"name": "${claimer_name}"</arg>
<arg>},</arg>
<arg>"donor_participant": "19468242",</arg>
<arg>"id": "${claim_external_key}",</arg>
<arg>"status": "${claim_notification_status}",</arg>
<arg>"resolution_period_end": "2020-10-18T10:00:00.000Z",</arg>
<arg>"completion_period_end": "2020-10-25T10:00:00.000Z",</arg>
<arg>"last_modified": "2020-10-17T10:00:00.000Z"</arg>
<arg>}</arg>
<arg>}</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:29.934" level="INFO">${body} = { "data": { "claim": { "type": "OWNERSHIP", "key": "mouraeduarda@azevedo.com", "key_type": "PHONE", "claimer_account": { "participant": "19468242", "branch": "0001", "account_number": "3174786108", "a...</msg>
<status status="PASS" starttime="20210326 21:19:29.930" endtime="20210326 21:19:29.934"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/banking/internal/dict/claims</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:29.937" level="INFO">POST Request using : uri=/banking/internal/dict/claims, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "data": { "claim": { "type": "OWNERSHIP", "key": "mouraeduarda@azevedo.com", "key_type": "PHONE", "claimer_account": { "participant": "19468242", "branch": "0001", "account_number": "3174786108", "account_type": "CACC" }, "claimer": { "type": "NATURAL_PERSON", "tax_id_number": "35704921680", "name": "Holder de teste" }, "donor_participant": "19468242", "id": "fd09e42738ee4810917a1a680685301a", "status": "CONFIRMED", "resolution_period_end": "2020-10-18T10:00:00.000Z", "completion_period_end": "2020-10-25T10:00:00.000Z", "last_modified": "2020-10-17T10:00:00.000Z" } } } 
json=None</msg>
<msg timestamp="20210326 21:19:30.715" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:29.935" endtime="20210326 21:19:30.716"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:30.718" level="INFO">200</msg>
<status status="PASS" starttime="20210326 21:19:30.717" endtime="20210326 21:19:30.718"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:30.720" level="INFO">6fa7caf823bb26f9</msg>
<status status="PASS" starttime="20210326 21:19:30.719" endtime="20210326 21:19:30.721"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:29.914" endtime="20210326 21:19:30.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '200'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao receber notificação da reivindicação || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:30.724" endtime="20210326 21:19:30.726"></status>
</kw>
<kw name="buscar reivindicação de posse" library="pix_dict_get_claims">
<arguments>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:30.733" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:30.732" endtime="20210326 21:19:30.734"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:30.730" endtime="20210326 21:19:30.735"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/claims/${claim_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:30.738" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/e02d594615b54cc09f0394cfb4e985a1/accounts/14069ef25c9c48289cde8950940872a8/claims/fd09e42738ee4810917a1a680685301a, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:31.491" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:30.736" endtime="20210326 21:19:31.491"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:31.493" level="INFO">{'id': 'fd09e42738ee4810917a1a680685301a', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'created_at': '2021-03-26T09:19:17.767', 'updated_at': '2021-03-26T09:19:30.886', 'type': 'OWNERSHIP', 'status': 'waiting_entry_ownership_confirm_to_complete', 'confirm_reason': 'USER_REQUESTED', 'key': {'value': 'mouraeduarda@azevedo.com', 'type': 'email'}, 'claimer': {'name': 'Holder de teste', 'national_registration': '68374921013', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'e02d594615b54cc09f0394cfb4e985a1', 'account': {'digital_account_id': '14069ef25c9c48289cde8950940872a8', 'routing_number': '001', 'number': '2841688903', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'donor': {'name': 'Holder de teste', 'national_registration': '35704921680', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'f35a9f57dc174783b0ac026022d7b802', 'account': {'digital_account_id': 'cc6046f5a33d4dd581406be89f225623', 'routing_number': '001', 'number': '3174786108', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'completion_period_end': '2021-03-27T12:19:00.000', 'resolution_period_end': '2021-04-03T12:19:17.000', 'resource': 'pix.claim'}</msg>
<status status="PASS" starttime="20210326 21:19:31.492" endtime="20210326 21:19:31.493"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:31.495" level="INFO">806140a5f8c6a34e</msg>
<status status="PASS" starttime="20210326 21:19:31.494" endtime="20210326 21:19:31.495"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:31.497" level="INFO">200</msg>
<status status="PASS" starttime="20210326 21:19:31.496" endtime="20210326 21:19:31.497"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:31.500" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:31.499" endtime="20210326 21:19:31.501"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:30.728" endtime="20210326 21:19:31.501"></status>
</kw>
<kw name="validar reivindicação" library="asserts">
<arguments>
<arg>status_code=200</arg>
<arg>marketplace_external_key=${marketplace_external_key}</arg>
<arg>claim_type=OWNERSHIP</arg>
<arg>claim_status=waiting_entry_ownership_confirm_to_complete</arg>
<arg>key_value=${value}</arg>
<arg>key_type=${type}</arg>
<arg>claimer_name=${holder_name_claimer}</arg>
<arg>claimer_national_registration=${national_registration_claimer}</arg>
<arg>claimer_type=${holder_type_claimer}</arg>
<arg>claimer_marketplace=${marketplace_external_key}</arg>
<arg>claimer_holder_id=${holder_claimer}</arg>
<arg>claimer_account_id=${account_claimer}</arg>
<arg>claimer_routing_number=${account_routing_number_claimer}</arg>
<arg>claimer_account_number=${account_number_claimer}</arg>
<arg>claimer_account_type=CACC</arg>
<arg>claimer_psp_code=${psp_code}</arg>
<arg>claimer_psp_name=${psp_name}</arg>
<arg>donor_name=${holder_name_owner}</arg>
<arg>donor_national_registration=${national_registration_owner}</arg>
<arg>donor_type=${holder_type_owner}</arg>
<arg>donor_marketplace=${marketplace_external_key}</arg>
<arg>donor_holder_id=${holder_owner}</arg>
<arg>donor_account_id=${account_owner}</arg>
<arg>donor_routing_number=${account_routing_number_owner}</arg>
<arg>donor_account_number=${account_number_owner}</arg>
<arg>donor_account_type=CACC</arg>
<arg>donor_psp_code=${psp_code}</arg>
<arg>donor_psp_name=${psp_name}</arg>
<arg>claim_resource=pix.claim</arg>
</arguments>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=datetime</arg>
</arguments>
<assign>
<var>${date}</var>
</assign>
<msg timestamp="20210326 21:19:31.511" level="INFO">${date} = 2021-03-26 21:19:31.510637</msg>
<status status="PASS" starttime="20210326 21:19:31.510" endtime="20210326 21:19:31.512"></status>
</kw>
<kw name="Convert Date" library="DateTime">
<doc>Converts between supported `date formats`.</doc>
<arguments>
<arg>${date}</arg>
<arg>exclude_millis=yes</arg>
<arg>result_format=%Y-%m-%d</arg>
<arg>date_format=%d-%m-%Y</arg>
</arguments>
<assign>
<var>${date}</var>
</assign>
<msg timestamp="20210326 21:19:31.514" level="INFO">${date} = 2021-03-26</msg>
<status status="PASS" starttime="20210326 21:19:31.512" endtime="20210326 21:19:31.514"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '${status_code}'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao criar reivindicação || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.515" endtime="20210326 21:19:31.516"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${response.json()["id"]}</arg>
</arguments>
<msg timestamp="20210326 21:19:31.518" level="INFO">Length is 32</msg>
<status status="PASS" starttime="20210326 21:19:31.517" endtime="20210326 21:19:31.519"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["marketplace"]}</arg>
<arg>${marketplace_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.520" endtime="20210326 21:19:31.522"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${response.json()["created_at"]}</arg>
<arg>${date}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.523" endtime="20210326 21:19:31.524"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${response.json()["updated_at"]}</arg>
<arg>${date}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.525" endtime="20210326 21:19:31.526"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>${claim_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.527" endtime="20210326 21:19:31.528"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${claim_status}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.529" endtime="20210326 21:19:31.531"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${key_value}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.532" endtime="20210326 21:19:31.534"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["key"]["type"]}</arg>
<arg>${key_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.535" endtime="20210326 21:19:31.537"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["name"]}</arg>
<arg>${claimer_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.538" endtime="20210326 21:19:31.539"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["national_registration"]}</arg>
<arg>${claimer_national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.540" endtime="20210326 21:19:31.541"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["type"]}</arg>
<arg>${claimer_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.542" endtime="20210326 21:19:31.544"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["marketplace"]}</arg>
<arg>${claimer_marketplace}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.544" endtime="20210326 21:19:31.546"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["holder"]}</arg>
<arg>${claimer_holder_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.547" endtime="20210326 21:19:31.550"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["digital_account_id"]}</arg>
<arg>${claimer_account_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.551" endtime="20210326 21:19:31.554"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["routing_number"]}</arg>
<arg>${claimer_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.554" endtime="20210326 21:19:31.557"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["number"]}</arg>
<arg>${claimer_account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.557" endtime="20210326 21:19:31.560"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["type"]}</arg>
<arg>${claimer_account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.562" endtime="20210326 21:19:31.563"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["psp"]["code"]}</arg>
<arg>${claimer_psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.564" endtime="20210326 21:19:31.566"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["psp"]["name"]}</arg>
<arg>${claimer_psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.567" endtime="20210326 21:19:31.570"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["name"]}</arg>
<arg>${donor_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.572" endtime="20210326 21:19:31.574"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["national_registration"]}</arg>
<arg>${donor_national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.575" endtime="20210326 21:19:31.576"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["type"]}</arg>
<arg>${donor_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.577" endtime="20210326 21:19:31.579"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["marketplace"]}</arg>
<arg>${donor_marketplace}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.580" endtime="20210326 21:19:31.581"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["holder"]}</arg>
<arg>${donor_holder_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.582" endtime="20210326 21:19:31.584"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["digital_account_id"]}</arg>
<arg>${donor_account_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.584" endtime="20210326 21:19:31.586"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["routing_number"]}</arg>
<arg>${donor_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.587" endtime="20210326 21:19:31.589"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["number"]}</arg>
<arg>${donor_account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.590" endtime="20210326 21:19:31.592"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["type"]}</arg>
<arg>${donor_account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.592" endtime="20210326 21:19:31.594"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["psp"]["code"]}</arg>
<arg>${donor_psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.595" endtime="20210326 21:19:31.597"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["psp"]["name"]}</arg>
<arg>${donor_psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.598" endtime="20210326 21:19:31.599"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["resource"]}</arg>
<arg>${claim_resource}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:31.600" endtime="20210326 21:19:31.602"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:31.503" endtime="20210326 21:19:31.603"></status>
</kw>
<kw name="buscar verification code" library="pix_dict_verification_code">
<arguments>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>entry_external_key=${entry_claimer}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:31.610" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:31.609" endtime="20210326 21:19:31.611"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:31.607" endtime="20210326 21:19:31.612"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/admin/internal_operation/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/entries/${entry_external_key}/code</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:31.614" level="INFO">GET Request using : uri=/admin/internal_operation/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/e02d594615b54cc09f0394cfb4e985a1/accounts/14069ef25c9c48289cde8950940872a8/entries/c151e806defa4f80b94d77de972ab22f/code, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:32.346" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:31.613" endtime="20210326 21:19:32.346"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:32.349" level="INFO">{'code': '8872'}</msg>
<status status="PASS" starttime="20210326 21:19:32.347" endtime="20210326 21:19:32.349"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:32.351" level="INFO">d4e88472c8a51149</msg>
<status status="PASS" starttime="20210326 21:19:32.350" endtime="20210326 21:19:32.351"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:32.353" level="INFO">200</msg>
<status status="PASS" starttime="20210326 21:19:32.352" endtime="20210326 21:19:32.353"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:32.355" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:32.354" endtime="20210326 21:19:32.356"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${response.status_code}==200</arg>
<arg>${response.json()["code"]}</arg>
</arguments>
<assign>
<var>${verification_code}</var>
</assign>
<msg timestamp="20210326 21:19:32.358" level="INFO">${verification_code} = 8872</msg>
<status status="PASS" starttime="20210326 21:19:32.356" endtime="20210326 21:19:32.358"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${verification_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:32.360" level="INFO">${verification_code} = 8872</msg>
<status status="PASS" starttime="20210326 21:19:32.359" endtime="20210326 21:19:32.361"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:31.605" endtime="20210326 21:19:32.361"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '200'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao buscar código de verificação || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:32.365" endtime="20210326 21:19:32.366"></status>
</kw>
<kw name="confirmar propriedade da chave pix" library="pix_dict_confirm_propriety">
<arguments>
<arg>verification_code=${verification_code}</arg>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>entry_external_key=${entry_claimer}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:32.373" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:32.372" endtime="20210326 21:19:32.374"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:32.370" endtime="20210326 21:19:32.374"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>Content-Type=application/json</arg>
</arguments>
<assign>
<var>${header}</var>
</assign>
<msg timestamp="20210326 21:19:32.376" level="INFO">${header} = {'Content-Type': 'application/json'}</msg>
<status status="PASS" starttime="20210326 21:19:32.375" endtime="20210326 21:19:32.376"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>{</arg>
<arg>"code": "${verification_code}"</arg>
<arg>}</arg>
</arguments>
<assign>
<var>${body}</var>
</assign>
<msg timestamp="20210326 21:19:32.378" level="INFO">${body} = { "code": "8872" }</msg>
<status status="PASS" starttime="20210326 21:19:32.377" endtime="20210326 21:19:32.378"></status>
</kw>
<kw name="Post Request" library="RequestsLibrary">
<doc>Send a POST request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/entries/${entry_external_key}/ownership</arg>
<arg>data=${body}</arg>
<arg>headers=${header}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:32.382" level="INFO">POST Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/e02d594615b54cc09f0394cfb4e985a1/accounts/14069ef25c9c48289cde8950940872a8/entries/c151e806defa4f80b94d77de972ab22f/ownership, params=None, files=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive', 'Content-Type': 'application/json'} 
data={ "code": "8872" } 
json=None</msg>
<msg timestamp="20210326 21:19:34.253" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:32.379" endtime="20210326 21:19:34.253"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:34.255" level="INFO">{'id': 'c151e806defa4f80b94d77de972ab22f', 'status': 'active', 'created_at': '2021-03-26T09:19:13.602', 'updated_at': '2021-03-26T09:19:34.424', 'key': {'value': 'mouraeduarda@azevedo.com', 'type': 'email'}, 'account': {'id': '14069ef25c9c48289cde8950940872a8', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'e02d594615b54cc09f0394cfb4e985a1', 'owner': {'name': 'Holder de teste', 'national_registration': '68374921013', 'type': 'individual'}, 'routing_number': '001', 'number': '2841688903', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}, 'resource': 'pix.entry'}</msg>
<status status="PASS" starttime="20210326 21:19:34.254" endtime="20210326 21:19:34.255"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:34.257" level="INFO">47bea9e45dbe24bf</msg>
<status status="PASS" starttime="20210326 21:19:34.256" endtime="20210326 21:19:34.258"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:34.260" level="INFO">201</msg>
<status status="PASS" starttime="20210326 21:19:34.259" endtime="20210326 21:19:34.260"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:34.262" level="INFO">${response} = &lt;Response [201]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:34.261" endtime="20210326 21:19:34.262"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:32.368" endtime="20210326 21:19:34.263"></status>
</kw>
<kw name="validar chave pix" library="asserts">
<arguments>
<arg>status_code=201</arg>
<arg>key_status=active</arg>
<arg>key_type=${type}</arg>
<arg>key_value=${value}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>marketplace_external_key=${marketplace_external_key}</arg>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_number=${account_number_claimer}</arg>
<arg>account_routing_number=${account_routing_number_claimer}</arg>
<arg>account_type=CACC</arg>
<arg>owner_key_name=${holder_name_claimer}</arg>
<arg>national_registration=${national_registration_claimer}</arg>
<arg>holder_type=${holder_type}</arg>
<arg>psp_code=${psp_code}</arg>
<arg>psp_name=${psp_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '${status_code}'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao criar chave de endereçamento || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.269" endtime="20210326 21:19:34.271"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar status da chave</arg>
</arguments>
<msg timestamp="20210326 21:19:34.273" level="INFO">Validar status da chave</msg>
<status status="PASS" starttime="20210326 21:19:34.272" endtime="20210326 21:19:34.273"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${key_status}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.274" endtime="20210326 21:19:34.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validando Tipo da chave PIX</arg>
</arguments>
<msg timestamp="20210326 21:19:34.277" level="INFO">Validando Tipo da chave PIX</msg>
<status status="PASS" starttime="20210326 21:19:34.276" endtime="20210326 21:19:34.277"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["key"]["type"]}</arg>
<arg>${key_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.278" endtime="20210326 21:19:34.280"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validando Valor da chave PIX</arg>
</arguments>
<msg timestamp="20210326 21:19:34.281" level="INFO">Validando Valor da chave PIX</msg>
<status status="PASS" starttime="20210326 21:19:34.281" endtime="20210326 21:19:34.282"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${type}' == 'evp'</arg>
<arg>Should Not Be Empty</arg>
<arg>${response.json()["key"]["value"]}</arg>
<arg>ELSE IF</arg>
<arg>'${type}' != 'evp'</arg>
<arg>Should Be Equal As Strings</arg>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${key_value}</arg>
</arguments>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${key_value}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.284" endtime="20210326 21:19:34.286"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:34.282" endtime="20210326 21:19:34.286"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validando dados da conta</arg>
</arguments>
<msg timestamp="20210326 21:19:34.287" level="INFO">Validando dados da conta</msg>
<status status="PASS" starttime="20210326 21:19:34.287" endtime="20210326 21:19:34.288"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["id"]}</arg>
<arg>${account_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.288" endtime="20210326 21:19:34.290"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["marketplace"]}</arg>
<arg>${marketplace_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.291" endtime="20210326 21:19:34.292"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["holder"]}</arg>
<arg>${holder_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.293" endtime="20210326 21:19:34.294"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["number"]}</arg>
<arg>${account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.295" endtime="20210326 21:19:34.297"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["routing_number"]}</arg>
<arg>${account_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.297" endtime="20210326 21:19:34.300"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["account"]["type"]}</arg>
<arg>${account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.301" endtime="20210326 21:19:34.303"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar Proprietário da Account Owner</arg>
</arguments>
<msg timestamp="20210326 21:19:34.304" level="INFO">Validar Proprietário da Account Owner</msg>
<status status="PASS" starttime="20210326 21:19:34.304" endtime="20210326 21:19:34.305"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["account"]["owner"]["name"]}</arg>
<arg>${owner_key_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.305" endtime="20210326 21:19:34.307"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar national_registration da Account Owner</arg>
</arguments>
<msg timestamp="20210326 21:19:34.308" level="INFO">Validar national_registration da Account Owner</msg>
<status status="PASS" starttime="20210326 21:19:34.308" endtime="20210326 21:19:34.308"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["account"]["owner"]["national_registration"]}</arg>
<arg>${national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.309" endtime="20210326 21:19:34.310"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar Holder Type do Account Owner</arg>
</arguments>
<msg timestamp="20210326 21:19:34.312" level="INFO">Validar Holder Type do Account Owner</msg>
<status status="PASS" starttime="20210326 21:19:34.311" endtime="20210326 21:19:34.312"></status>
</kw>
<kw name="Should Be Equal As Strings" library="BuiltIn">
<doc>Fails if objects are unequal after converting them to strings.</doc>
<arguments>
<arg>${response.json()["account"]["owner"]["type"]}</arg>
<arg>${holder_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.313" endtime="20210326 21:19:34.315"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>Validar PSP</arg>
</arguments>
<msg timestamp="20210326 21:19:34.316" level="INFO">Validar PSP</msg>
<status status="PASS" starttime="20210326 21:19:34.316" endtime="20210326 21:19:34.316"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["psp"]["code"]}</arg>
<arg>${psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.318" endtime="20210326 21:19:34.322"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["psp"]["name"]}</arg>
<arg>${psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:34.323" endtime="20210326 21:19:34.325"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:34.265" endtime="20210326 21:19:34.325"></status>
</kw>
<kw name="buscar reivindicação de posse" library="pix_dict_get_claims">
<arguments>
<arg>holder_external_key=${holder_claimer}</arg>
<arg>account_external_key=${account_claimer}</arg>
<arg>claim_external_key=${claim_external_key}</arg>
</arguments>
<kw name="conectar pix-dict" library="create_session_staging_internal">
<kw name="Create Session" library="RequestsLibrary">
<doc>Create Session: create a HTTP session to a server</doc>
<arguments>
<arg>alias=pix-dict</arg>
<arg>url=${pix_dict_url_base}</arg>
<arg>disable_warnings=true</arg>
</arguments>
<msg timestamp="20210326 21:19:34.333" level="INFO">Creating Session using : alias=pix-dict, url=https://banking-pix-dict-internal.staging.zoop.tech, headers={},                     cookies={}, auth=None, timeout=None, proxies=None, verify=False,                     debug=0 </msg>
<status status="PASS" starttime="20210326 21:19:34.332" endtime="20210326 21:19:34.335"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:34.330" endtime="20210326 21:19:34.335"></status>
</kw>
<kw name="Get Request" library="RequestsLibrary">
<doc>Send a GET request on the session object found using the
given `alias`</doc>
<arguments>
<arg>pix-dict</arg>
<arg>/marketplaces/${marketplace_external_key}/banking/dict/holders/${holder_external_key}/accounts/${account_external_key}/claims/${claim_external_key}</arg>
</arguments>
<assign>
<var>${response}</var>
</assign>
<msg timestamp="20210326 21:19:34.337" level="INFO">GET Request using : uri=/marketplaces/f71a8951368a4cc085cf7875ff44e61c/banking/dict/holders/e02d594615b54cc09f0394cfb4e985a1/accounts/14069ef25c9c48289cde8950940872a8/claims/fd09e42738ee4810917a1a680685301a, params=None, allow_redirects=True, timeout=None
headers={'User-Agent': 'python-requests/2.22.0', 'Accept-Encoding': 'gzip, deflate', 'Accept': '*/*', 'Connection': 'keep-alive'} 
data=None 
json=None</msg>
<msg timestamp="20210326 21:19:35.194" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:34.336" endtime="20210326 21:19:35.194"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.json()}</arg>
</arguments>
<msg timestamp="20210326 21:19:35.196" level="INFO">{'id': 'fd09e42738ee4810917a1a680685301a', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'created_at': '2021-03-26T09:19:17.767', 'updated_at': '2021-03-26T09:19:34.424', 'type': 'OWNERSHIP', 'status': 'completed', 'confirm_reason': 'USER_REQUESTED', 'key': {'value': 'mouraeduarda@azevedo.com', 'type': 'email'}, 'claimer': {'name': 'Holder de teste', 'national_registration': '68374921013', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'e02d594615b54cc09f0394cfb4e985a1', 'account': {'digital_account_id': '14069ef25c9c48289cde8950940872a8', 'routing_number': '001', 'number': '2841688903', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'donor': {'name': 'Holder de teste', 'national_registration': '35704921680', 'type': 'individual', 'marketplace': 'f71a8951368a4cc085cf7875ff44e61c', 'holder': 'f35a9f57dc174783b0ac026022d7b802', 'account': {'digital_account_id': 'cc6046f5a33d4dd581406be89f225623', 'routing_number': '001', 'number': '3174786108', 'type': 'CACC'}, 'psp': {'code': '19468242', 'name': 'Zoop Tecnologia e Meios de Pagamento S.A.'}}, 'completion_period_end': '2021-03-27T12:19:00.000', 'resolution_period_end': '2021-04-03T12:19:17.000', 'resource': 'pix.claim'}</msg>
<status status="PASS" starttime="20210326 21:19:35.195" endtime="20210326 21:19:35.197"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.headers['X-REQUEST-ID']}</arg>
</arguments>
<msg timestamp="20210326 21:19:35.199" level="INFO">e760131493dfdee7</msg>
<status status="PASS" starttime="20210326 21:19:35.197" endtime="20210326 21:19:35.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${response.status_code}</arg>
</arguments>
<msg timestamp="20210326 21:19:35.201" level="INFO">200</msg>
<status status="PASS" starttime="20210326 21:19:35.200" endtime="20210326 21:19:35.201"></status>
</kw>
<kw name="Set Global Variable" library="BuiltIn">
<doc>Makes a variable available globally in all tests and suites.</doc>
<arguments>
<arg>${response}</arg>
</arguments>
<msg timestamp="20210326 21:19:35.203" level="INFO">${response} = &lt;Response [200]&gt;</msg>
<status status="PASS" starttime="20210326 21:19:35.202" endtime="20210326 21:19:35.203"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:34.328" endtime="20210326 21:19:35.203"></status>
</kw>
<kw name="validar reivindicação" library="asserts">
<arguments>
<arg>status_code=200</arg>
<arg>marketplace_external_key=${marketplace_external_key}</arg>
<arg>claim_type=OWNERSHIP</arg>
<arg>claim_status=completed</arg>
<arg>key_value=${value}</arg>
<arg>key_type=${type}</arg>
<arg>claimer_name=${holder_name_claimer}</arg>
<arg>claimer_national_registration=${national_registration_claimer}</arg>
<arg>claimer_type=${holder_type_claimer}</arg>
<arg>claimer_marketplace=${marketplace_external_key}</arg>
<arg>claimer_holder_id=${holder_claimer}</arg>
<arg>claimer_account_id=${account_claimer}</arg>
<arg>claimer_routing_number=${account_routing_number_claimer}</arg>
<arg>claimer_account_number=${account_number_claimer}</arg>
<arg>claimer_account_type=CACC</arg>
<arg>claimer_psp_code=${psp_code}</arg>
<arg>claimer_psp_name=${psp_name}</arg>
<arg>donor_name=${holder_name_owner}</arg>
<arg>donor_national_registration=${national_registration_owner}</arg>
<arg>donor_type=${holder_type_owner}</arg>
<arg>donor_marketplace=${marketplace_external_key}</arg>
<arg>donor_holder_id=${holder_owner}</arg>
<arg>donor_account_id=${account_owner}</arg>
<arg>donor_routing_number=${account_routing_number_owner}</arg>
<arg>donor_account_number=${account_number_owner}</arg>
<arg>donor_account_type=CACC</arg>
<arg>donor_psp_code=${psp_code}</arg>
<arg>donor_psp_name=${psp_name}</arg>
<arg>claim_resource=pix.claim</arg>
</arguments>
<kw name="Get Current Date" library="DateTime">
<doc>Returns current local or UTC time with an optional increment.</doc>
<arguments>
<arg>result_format=datetime</arg>
</arguments>
<assign>
<var>${date}</var>
</assign>
<msg timestamp="20210326 21:19:35.212" level="INFO">${date} = 2021-03-26 21:19:35.211728</msg>
<status status="PASS" starttime="20210326 21:19:35.211" endtime="20210326 21:19:35.212"></status>
</kw>
<kw name="Convert Date" library="DateTime">
<doc>Converts between supported `date formats`.</doc>
<arguments>
<arg>${date}</arg>
<arg>exclude_millis=yes</arg>
<arg>result_format=%Y-%m-%d</arg>
<arg>date_format=%d-%m-%Y</arg>
</arguments>
<assign>
<var>${date}</var>
</assign>
<msg timestamp="20210326 21:19:35.214" level="INFO">${date} = 2021-03-26</msg>
<status status="PASS" starttime="20210326 21:19:35.213" endtime="20210326 21:19:35.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${response.status_code}' != '${status_code}'</arg>
<arg>Fatal Error</arg>
<arg>msg=Erro ao criar reivindicação || status_code: ${response.status_code} || message: ${response.json()["message"]}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.215" endtime="20210326 21:19:35.215"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${response.json()["id"]}</arg>
</arguments>
<msg timestamp="20210326 21:19:35.217" level="INFO">Length is 32</msg>
<status status="PASS" starttime="20210326 21:19:35.216" endtime="20210326 21:19:35.217"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["marketplace"]}</arg>
<arg>${marketplace_external_key}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.218" endtime="20210326 21:19:35.220"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${response.json()["created_at"]}</arg>
<arg>${date}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.220" endtime="20210326 21:19:35.222"></status>
</kw>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${response.json()["updated_at"]}</arg>
<arg>${date}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.222" endtime="20210326 21:19:35.223"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["type"]}</arg>
<arg>${claim_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.224" endtime="20210326 21:19:35.225"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["status"]}</arg>
<arg>${claim_status}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.225" endtime="20210326 21:19:35.226"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["key"]["value"]}</arg>
<arg>${key_value}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.226" endtime="20210326 21:19:35.227"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["key"]["type"]}</arg>
<arg>${key_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.228" endtime="20210326 21:19:35.229"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["name"]}</arg>
<arg>${claimer_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.230" endtime="20210326 21:19:35.233"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["national_registration"]}</arg>
<arg>${claimer_national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.234" endtime="20210326 21:19:35.235"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["type"]}</arg>
<arg>${claimer_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.236" endtime="20210326 21:19:35.238"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["marketplace"]}</arg>
<arg>${claimer_marketplace}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.239" endtime="20210326 21:19:35.241"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["holder"]}</arg>
<arg>${claimer_holder_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.241" endtime="20210326 21:19:35.243"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["digital_account_id"]}</arg>
<arg>${claimer_account_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.244" endtime="20210326 21:19:35.245"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["routing_number"]}</arg>
<arg>${claimer_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.245" endtime="20210326 21:19:35.246"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["number"]}</arg>
<arg>${claimer_account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.247" endtime="20210326 21:19:35.248"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["account"]["type"]}</arg>
<arg>${claimer_account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.249" endtime="20210326 21:19:35.250"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["psp"]["code"]}</arg>
<arg>${claimer_psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.251" endtime="20210326 21:19:35.251"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["claimer"]["psp"]["name"]}</arg>
<arg>${claimer_psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.252" endtime="20210326 21:19:35.253"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["name"]}</arg>
<arg>${donor_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.253" endtime="20210326 21:19:35.254"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["national_registration"]}</arg>
<arg>${donor_national_registration}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.255" endtime="20210326 21:19:35.257"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["type"]}</arg>
<arg>${donor_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.258" endtime="20210326 21:19:35.259"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["marketplace"]}</arg>
<arg>${donor_marketplace}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.259" endtime="20210326 21:19:35.260"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["holder"]}</arg>
<arg>${donor_holder_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.261" endtime="20210326 21:19:35.263"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["digital_account_id"]}</arg>
<arg>${donor_account_id}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.263" endtime="20210326 21:19:35.265"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["routing_number"]}</arg>
<arg>${donor_routing_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.265" endtime="20210326 21:19:35.267"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["number"]}</arg>
<arg>${donor_account_number}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.267" endtime="20210326 21:19:35.269"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["account"]["type"]}</arg>
<arg>${donor_account_type}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.271" endtime="20210326 21:19:35.272"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["psp"]["code"]}</arg>
<arg>${donor_psp_code}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.273" endtime="20210326 21:19:35.274"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["donor"]["psp"]["name"]}</arg>
<arg>${donor_psp_name}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.275" endtime="20210326 21:19:35.277"></status>
</kw>
<kw name="Should Be Equal" library="BuiltIn">
<doc>Fails if the given objects are unequal.</doc>
<arguments>
<arg>${response.json()["resource"]}</arg>
<arg>${claim_resource}</arg>
</arguments>
<status status="PASS" starttime="20210326 21:19:35.277" endtime="20210326 21:19:35.279"></status>
</kw>
<status status="PASS" starttime="20210326 21:19:35.204" endtime="20210326 21:19:35.279"></status>
</kw>
<doc>Fluxo Básico</doc>
<tags>
<tag>smoke_test_email</tag>
</tags>
<status status="PASS" starttime="20210326 21:18:59.131" endtime="20210326 21:19:35.280" critical="yes"></status>
</test>
<doc>Funcionalidade: Criar Reivindicação de Posse
Eu, como um Holder, portador de uma conta ativa em Banking
Desejo aceitar uma reivindicação de posse de uma chave de endereçamento</doc>
<status status="PASS" starttime="20210326 21:18:57.904" endtime="20210326 21:19:35.285"></status>
</suite>
<statistics>
<total>
<stat pass="1" fail="0">Critical Tests</stat>
<stat pass="1" fail="0">All Tests</stat>
</total>
<tag>
<stat pass="1" fail="0">smoke_test_email</stat>
</tag>
<suite>
<stat pass="1" fail="0" id="s1" name="Criar Reivindicação de Posse">Criar Reivindicação de Posse</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
